{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.6", "generated_at": "2023-07-14T04:07:36.515535Z", "invocation_id": "5df2d2c6-b4a8-4cbe-b691-3b46e23ebff2", "env": {}, "project_id": "f6466ee410a6b34eeab8b5f1b3b2555f", "user_id": "459bb7dd-ed27-4f26-aa7a-0334c08e2088", "send_anonymous_usage_stats": true, "adapter_type": "fabric"}, "nodes": {"model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_branches": {"database": "DWH", "schema": "dbo", "name": "stg__cmis_dbo_branches", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_branches.sql", "original_file_path": "models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_branches.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_branches", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "11_staging", "cmis", "stg__cmis_dbo_branches"], "alias": "stg__cmis_dbo_branches", "checksum": {"name": "sha256", "checksum": "3aa0f49d6e66268d2b59d4eb36ad2dc5c368f2bdb3a9ba4c3167b30765a38155"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_branches.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.2951658, "relation_name": "\"DWH\".\"dbo\".\"stg__cmis_dbo_branches\"", "raw_code": "select \r\nID,\r\nCode,\r\nName,\r\nDescription,\r\nPublishType,\r\nActivate,\r\nIsDeleted,\r\nCreatedDate,\r\nParentID,\r\nADN,\r\nLastChildADN,\r\nBaseSource,\r\nLastUpdateBase,\r\nPercentProfit,\r\nIsDisplay,\r\nColor,\r\nIsSBAService,\r\nIsSBARetail,\r\nIsSBALicense,\r\nIsSBAServiceRetail,\r\nDV_RECORD_SOURCE,\r\nDV_APPLIED_DATE \r\nfrom {{ source('DWH', 'Staging__CMIS_dbo_Branches') }}", "language": "sql", "refs": [], "sources": [["DWH", "Staging__CMIS_dbo_Branches"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Branches"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_branches.sql", "compiled": true, "compiled_code": "select \nID,\nCode,\nName,\nDescription,\nPublishType,\nActivate,\nIsDeleted,\nCreatedDate,\nParentID,\nADN,\nLastChildADN,\nBaseSource,\nLastUpdateBase,\nPercentProfit,\nIsDisplay,\nColor,\nIsSBAService,\nIsSBARetail,\nIsSBALicense,\nIsSBAServiceRetail,\nDV_RECORD_SOURCE,\nDV_APPLIED_DATE \nfrom \"DWH\".\"dbo\".\"Staging__CMIS_dbo_Branches\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_businessplans": {"database": "DWH", "schema": "dbo", "name": "stg__cmis_dbo_businessplans", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_businessplans.sql", "original_file_path": "models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_businessplans.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_businessplans", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "11_staging", "cmis", "stg__cmis_dbo_businessplans"], "alias": "stg__cmis_dbo_businessplans", "checksum": {"name": "sha256", "checksum": "07c5762155127f04b605e39d122051b347faf926bc619570a070c1644788d2f9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_businessplans.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.3091702, "relation_name": "\"DWH\".\"dbo\".\"stg__cmis_dbo_businessplans\"", "raw_code": "select * from {{ source('DWH', 'Staging__CMIS_dbo_BusinessPlans') }}", "language": "sql", "refs": [], "sources": [["DWH", "Staging__CMIS_dbo_BusinessPlans"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_BusinessPlans"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_businessplans.sql", "compiled": true, "compiled_code": "select * from \"DWH\".\"dbo\".\"Staging__CMIS_dbo_BusinessPlans\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_contractlockstatus": {"database": "DWH", "schema": "dbo", "name": "stg__cmis_dbo_contractlockstatus", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_contractlockstatus.sql", "original_file_path": "models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_contractlockstatus.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_contractlockstatus", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "11_staging", "cmis", "stg__cmis_dbo_contractlockstatus"], "alias": "stg__cmis_dbo_contractlockstatus", "checksum": {"name": "sha256", "checksum": "950d9aeb1cd50c34aa5d853b438290db3c593209586660442d4f91b385c0b8c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_contractlockstatus.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.31317, "relation_name": "\"DWH\".\"dbo\".\"stg__cmis_dbo_contractlockstatus\"", "raw_code": "select * from {{ source('DWH', 'Staging__CMIS_dbo_ContractLockStatus') }}", "language": "sql", "refs": [], "sources": [["DWH", "Staging__CMIS_dbo_ContractLockStatus"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_ContractLockStatus"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_contractlockstatus.sql", "compiled": true, "compiled_code": "select * from \"DWH\".\"dbo\".\"Staging__CMIS_dbo_ContractLockStatus\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_contracts": {"database": "DWH", "schema": "dbo", "name": "stg__cmis_dbo_contracts", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_contracts.sql", "original_file_path": "models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_contracts.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_contracts", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "11_staging", "cmis", "stg__cmis_dbo_contracts"], "alias": "stg__cmis_dbo_contracts", "checksum": {"name": "sha256", "checksum": "2400bb5799ef2ec2d28e673eb073f145d724c91ecff80f52a1cc38c02be0b2a9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_contracts.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.3161685, "relation_name": "\"DWH\".\"dbo\".\"stg__cmis_dbo_contracts\"", "raw_code": "select * from {{ source('DWH', 'Staging__CMIS_dbo_Contracts') }}", "language": "sql", "refs": [], "sources": [["DWH", "Staging__CMIS_dbo_Contracts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Contracts"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_contracts.sql", "compiled": true, "compiled_code": "select * from \"DWH\".\"dbo\".\"Staging__CMIS_dbo_Contracts\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_ct00": {"database": "DWH", "schema": "dbo", "name": "stg__cmis_dbo_ct00", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_ct00.sql", "original_file_path": "models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_ct00.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_ct00", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "11_staging", "cmis", "stg__cmis_dbo_ct00"], "alias": "stg__cmis_dbo_ct00", "checksum": {"name": "sha256", "checksum": "0f2ed1d36ecefb8882b837f8c92926326ea262d4e7cf225b54b2d12f1d5a1591"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_ct00.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.3211718, "relation_name": "\"DWH\".\"dbo\".\"stg__cmis_dbo_ct00\"", "raw_code": "select * from {{ source('DWH', 'Staging__CMIS_dbo_ct00') }}", "language": "sql", "refs": [], "sources": [["DWH", "Staging__CMIS_dbo_ct00"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_ct00"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_ct00.sql", "compiled": true, "compiled_code": "select * from \"DWH\".\"dbo\".\"Staging__CMIS_dbo_ct00\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_customers": {"database": "DWH", "schema": "dbo", "name": "stg__cmis_dbo_customers", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_customers.sql", "original_file_path": "models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_customers.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_customers", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "11_staging", "cmis", "stg__cmis_dbo_customers"], "alias": "stg__cmis_dbo_customers", "checksum": {"name": "sha256", "checksum": "4450f2e8af1b006e2546c3c3f3cf931afd0a04c11e25040b2c31463b2aa65527"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_customers.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.324167, "relation_name": "\"DWH\".\"dbo\".\"stg__cmis_dbo_customers\"", "raw_code": "select\r\n    *\r\nfrom  {{ source('DWH', 'Staging__CMIS_dbo_Customers') }}", "language": "sql", "refs": [], "sources": [["DWH", "Staging__CMIS_dbo_Customers"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Customers"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_customers.sql", "compiled": true, "compiled_code": "select\n    *\nfrom  \"DWH\".\"dbo\".\"Staging__CMIS_dbo_Customers\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_customertypes": {"database": "DWH", "schema": "dbo", "name": "stg__cmis_dbo_customertypes", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_customertypes.sql", "original_file_path": "models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_customertypes.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_customertypes", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "11_staging", "cmis", "stg__cmis_dbo_customertypes"], "alias": "stg__cmis_dbo_customertypes", "checksum": {"name": "sha256", "checksum": "70a4fdbf93ab5952685bf17d243a186d51d236214415eeba0a7479e7a1cb31bc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_customertypes.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.327167, "relation_name": "\"DWH\".\"dbo\".\"stg__cmis_dbo_customertypes\"", "raw_code": "select\r\n    *\r\nfrom  {{ source('DWH', 'Staging__CMIS_dbo_CustomerTypes') }}", "language": "sql", "refs": [], "sources": [["DWH", "Staging__CMIS_dbo_CustomerTypes"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_CustomerTypes"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_customertypes.sql", "compiled": true, "compiled_code": "select\n    *\nfrom  \"DWH\".\"dbo\".\"Staging__CMIS_dbo_CustomerTypes\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_environmenttypes": {"database": "DWH", "schema": "dbo", "name": "stg__cmis_dbo_environmenttypes", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_environmenttypes.sql", "original_file_path": "models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_environmenttypes.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_environmenttypes", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "11_staging", "cmis", "stg__cmis_dbo_environmenttypes"], "alias": "stg__cmis_dbo_environmenttypes", "checksum": {"name": "sha256", "checksum": "6c532b2709e5cbe4cf6becaee2aa309859d223c0bb69e95dc55a5841d5ffcfaa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_environmenttypes.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.3301668, "relation_name": "\"DWH\".\"dbo\".\"stg__cmis_dbo_environmenttypes\"", "raw_code": "select\r\n    *\r\nfrom  {{ source('DWH', 'Staging__CMIS_dbo_EnvironmentTypes') }}", "language": "sql", "refs": [], "sources": [["DWH", "Staging__CMIS_dbo_EnvironmentTypes"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_EnvironmentTypes"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_environmenttypes.sql", "compiled": true, "compiled_code": "select\n    *\nfrom  \"DWH\".\"dbo\".\"Staging__CMIS_dbo_EnvironmentTypes\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_estimatecontracts": {"database": "DWH", "schema": "dbo", "name": "stg__cmis_dbo_estimatecontracts", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_estimatecontracts.sql", "original_file_path": "models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_estimatecontracts.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_estimatecontracts", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "11_staging", "cmis", "stg__cmis_dbo_estimatecontracts"], "alias": "stg__cmis_dbo_estimatecontracts", "checksum": {"name": "sha256", "checksum": "dc729dfaee311136dab52339325e49eefe917e859ffc6404b6ae5e93035dafd7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_estimatecontracts.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.3341668, "relation_name": "\"DWH\".\"dbo\".\"stg__cmis_dbo_estimatecontracts\"", "raw_code": "select * from {{ source('DWH', 'Staging__CMIS_dbo_EstimateContracts') }}", "language": "sql", "refs": [], "sources": [["DWH", "Staging__CMIS_dbo_EstimateContracts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_EstimateContracts"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_estimatecontracts.sql", "compiled": true, "compiled_code": "select * from \"DWH\".\"dbo\".\"Staging__CMIS_dbo_EstimateContracts\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_finalizationcontracts": {"database": "DWH", "schema": "dbo", "name": "stg__cmis_dbo_finalizationcontracts", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_finalizationcontracts.sql", "original_file_path": "models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_finalizationcontracts.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_finalizationcontracts", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "11_staging", "cmis", "stg__cmis_dbo_finalizationcontracts"], "alias": "stg__cmis_dbo_finalizationcontracts", "checksum": {"name": "sha256", "checksum": "e9d2c34126eb1b32cf72eb4e75daad2ce2c363422b85617d89f48b472771ada9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_finalizationcontracts.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.3381708, "relation_name": "\"DWH\".\"dbo\".\"stg__cmis_dbo_finalizationcontracts\"", "raw_code": "select * from {{ source('DWH', 'Staging__CMIS_dbo_FinalizationContracts') }}", "language": "sql", "refs": [], "sources": [["DWH", "Staging__CMIS_dbo_FinalizationContracts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_FinalizationContracts"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_finalizationcontracts.sql", "compiled": true, "compiled_code": "select * from \"DWH\".\"dbo\".\"Staging__CMIS_dbo_FinalizationContracts\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_groups": {"database": "DWH", "schema": "dbo", "name": "stg__cmis_dbo_groups", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_groups.sql", "original_file_path": "models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_groups.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_groups", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "11_staging", "cmis", "stg__cmis_dbo_groups"], "alias": "stg__cmis_dbo_groups", "checksum": {"name": "sha256", "checksum": "81a9c62da36f740699e9686b0c25c82b3e36e1dedb68b35b8b81b987dd9f344a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_groups.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.3411689, "relation_name": "\"DWH\".\"dbo\".\"stg__cmis_dbo_groups\"", "raw_code": "select\r\n    *\r\nfrom  {{ source('DWH', 'Staging__CMIS_dbo_Groups') }}", "language": "sql", "refs": [], "sources": [["DWH", "Staging__CMIS_dbo_Groups"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Groups"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_groups.sql", "compiled": true, "compiled_code": "select\n    *\nfrom  \"DWH\".\"dbo\".\"Staging__CMIS_dbo_Groups\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_industrytypes": {"database": "DWH", "schema": "dbo", "name": "stg__cmis_dbo_industrytypes", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_industrytypes.sql", "original_file_path": "models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_industrytypes.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_industrytypes", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "11_staging", "cmis", "stg__cmis_dbo_industrytypes"], "alias": "stg__cmis_dbo_industrytypes", "checksum": {"name": "sha256", "checksum": "5bec80dab8b567f2fa9a163a63dee894e0fe06f6d71be0b06e2618cb573773fd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_industrytypes.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.3441684, "relation_name": "\"DWH\".\"dbo\".\"stg__cmis_dbo_industrytypes\"", "raw_code": "select\r\n    *\r\nfrom  {{ source('DWH', 'Staging__CMIS_dbo_IndustryTypes') }}", "language": "sql", "refs": [], "sources": [["DWH", "Staging__CMIS_dbo_IndustryTypes"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_IndustryTypes"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_industrytypes.sql", "compiled": true, "compiled_code": "select\n    *\nfrom  \"DWH\".\"dbo\".\"Staging__CMIS_dbo_IndustryTypes\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_opportunities": {"database": "DWH", "schema": "dbo", "name": "stg__cmis_dbo_opportunities", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_opportunities.sql", "original_file_path": "models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_opportunities.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_opportunities", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "11_staging", "cmis", "stg__cmis_dbo_opportunities"], "alias": "stg__cmis_dbo_opportunities", "checksum": {"name": "sha256", "checksum": "4980091529834bc489dd3c1a6ede1387675e4a6013d65e0b83a3a2cfb62798ba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_opportunities.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.3471684, "relation_name": "\"DWH\".\"dbo\".\"stg__cmis_dbo_opportunities\"", "raw_code": "select * from {{ source('DWH', 'Staging__CMIS_dbo_Opportunities') }}", "language": "sql", "refs": [], "sources": [["DWH", "Staging__CMIS_dbo_Opportunities"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Opportunities"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_opportunities.sql", "compiled": true, "compiled_code": "select * from \"DWH\".\"dbo\".\"Staging__CMIS_dbo_Opportunities\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_opportunitystatus": {"database": "DWH", "schema": "dbo", "name": "stg__cmis_dbo_opportunitystatus", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_opportunitystatus.sql", "original_file_path": "models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_opportunitystatus.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_opportunitystatus", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "11_staging", "cmis", "stg__cmis_dbo_opportunitystatus"], "alias": "stg__cmis_dbo_opportunitystatus", "checksum": {"name": "sha256", "checksum": "65fa415c0c7ad2c12d43139fccd5a627de795e996edf0aef9c16f11995a1d891"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_opportunitystatus.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.3501692, "relation_name": "\"DWH\".\"dbo\".\"stg__cmis_dbo_opportunitystatus\"", "raw_code": "select * from {{ source('DWH', 'Staging__CMIS_dbo_OpportunityStatus') }}", "language": "sql", "refs": [], "sources": [["DWH", "Staging__CMIS_dbo_OpportunityStatus"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_OpportunityStatus"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_opportunitystatus.sql", "compiled": true, "compiled_code": "select * from \"DWH\".\"dbo\".\"Staging__CMIS_dbo_OpportunityStatus\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_orderdetails": {"database": "DWH", "schema": "dbo", "name": "stg__cmis_dbo_orderdetails", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_orderdetails.sql", "original_file_path": "models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_orderdetails.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_orderdetails", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "11_staging", "cmis", "stg__cmis_dbo_orderdetails"], "alias": "stg__cmis_dbo_orderdetails", "checksum": {"name": "sha256", "checksum": "1c47c25df24dbe5129b29b31221f25513b5a3f4a187ef3b92363aee4e3c52edb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_orderdetails.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.3551688, "relation_name": "\"DWH\".\"dbo\".\"stg__cmis_dbo_orderdetails\"", "raw_code": "with source as (\n      select * from {{ source('DWH', 'Staging__CMIS_dbo_OrderDetails') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"ID\") }},\n        {{ adapter.quote(\"Code\") }},\n        {{ adapter.quote(\"OrderID\") }},\n        {{ adapter.quote(\"OrderCode\") }},\n        {{ adapter.quote(\"SolutionBranchID\") }},\n        {{ adapter.quote(\"SolutionBranchNameID\") }},\n        {{ adapter.quote(\"ProductBranchID\") }},\n        {{ adapter.quote(\"VendorBranchID\") }},\n        {{ adapter.quote(\"ProductName\") }},\n        {{ adapter.quote(\"VATTypeID\") }},\n        {{ adapter.quote(\"PartNumber\") }},\n        {{ adapter.quote(\"Warranty\") }},\n        {{ adapter.quote(\"BeginDateWarranty\") }},\n        {{ adapter.quote(\"EndDateWarranty\") }},\n        {{ adapter.quote(\"Description\") }},\n        {{ adapter.quote(\"UnitName\") }},\n        {{ adapter.quote(\"Quantity\") }},\n        {{ adapter.quote(\"Tax\") }},\n        {{ adapter.quote(\"Price\") }},\n        {{ adapter.quote(\"TotalBeforeVAT\") }},\n        {{ adapter.quote(\"TotalVAT\") }},\n        {{ adapter.quote(\"TotalAfterVAT\") }},\n        {{ adapter.quote(\"CreatedDate\") }},\n        {{ adapter.quote(\"NameSolutionBranchID\") }},\n        {{ adapter.quote(\"NameSolutionBranchNameID\") }},\n        {{ adapter.quote(\"NameProductBranchID\") }},\n        {{ adapter.quote(\"NameVendorBranchID\") }},\n        {{ adapter.quote(\"NameVATTypeID\") }},\n        {{ adapter.quote(\"RetailTypeID\") }},\n        {{ adapter.quote(\"RetailConfigID\") }},\n        {{ adapter.quote(\"IsService\") }},\n        {{ adapter.quote(\"IsHardware\") }},\n        {{ adapter.quote(\"STTMis\") }},\n        {{ adapter.quote(\"GroupID\") }},\n        {{ adapter.quote(\"IsMain\") }},\n        {{ adapter.quote(\"ParentID\") }},\n        {{ adapter.quote(\"DV_RECORD_SOURCE\") }},\n        {{ adapter.quote(\"DV_APPLIED_DATE\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["DWH", "Staging__CMIS_dbo_OrderDetails"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_OrderDetails"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_orderdetails.sql", "compiled": true, "compiled_code": "with source as (\n      select * from \"DWH\".\"dbo\".\"Staging__CMIS_dbo_OrderDetails\"\n),\nrenamed as (\n    select\n        \"ID\",\n        \"Code\",\n        \"OrderID\",\n        \"OrderCode\",\n        \"SolutionBranchID\",\n        \"SolutionBranchNameID\",\n        \"ProductBranchID\",\n        \"VendorBranchID\",\n        \"ProductName\",\n        \"VATTypeID\",\n        \"PartNumber\",\n        \"Warranty\",\n        \"BeginDateWarranty\",\n        \"EndDateWarranty\",\n        \"Description\",\n        \"UnitName\",\n        \"Quantity\",\n        \"Tax\",\n        \"Price\",\n        \"TotalBeforeVAT\",\n        \"TotalVAT\",\n        \"TotalAfterVAT\",\n        \"CreatedDate\",\n        \"NameSolutionBranchID\",\n        \"NameSolutionBranchNameID\",\n        \"NameProductBranchID\",\n        \"NameVendorBranchID\",\n        \"NameVATTypeID\",\n        \"RetailTypeID\",\n        \"RetailConfigID\",\n        \"IsService\",\n        \"IsHardware\",\n        \"STTMis\",\n        \"GroupID\",\n        \"IsMain\",\n        \"ParentID\",\n        \"DV_RECORD_SOURCE\",\n        \"DV_APPLIED_DATE\"\n\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_orders": {"database": "DWH", "schema": "dbo", "name": "stg__cmis_dbo_orders", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_orders.sql", "original_file_path": "models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_orders.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_orders", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "11_staging", "cmis", "stg__cmis_dbo_orders"], "alias": "stg__cmis_dbo_orders", "checksum": {"name": "sha256", "checksum": "cebc2e707225cd3253f80f76525b062f305742576993faa31de228353b31ab8a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_orders.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.3711696, "relation_name": "\"DWH\".\"dbo\".\"stg__cmis_dbo_orders\"", "raw_code": "with source as (\n      select * from {{ source('DWH', 'Staging__CMIS_dbo_Orders') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"ID\") }},\n        {{ adapter.quote(\"Code\") }},\n        {{ adapter.quote(\"Tag\") }},\n        {{ adapter.quote(\"CustomerID\") }},\n        {{ adapter.quote(\"TotalBeforeVAT\") }},\n        {{ adapter.quote(\"ValueHardware\") }},\n        {{ adapter.quote(\"TotalVAT\") }},\n        {{ adapter.quote(\"TotalAfterVAT\") }},\n        {{ adapter.quote(\"FileAttachments\") }},\n        {{ adapter.quote(\"PublishType\") }},\n        {{ adapter.quote(\"CreatedDate\") }},\n        {{ adapter.quote(\"CreatedByID\") }},\n        {{ adapter.quote(\"CreatedByName\") }},\n        {{ adapter.quote(\"ModifiedDate\") }},\n        {{ adapter.quote(\"ModifiedByID\") }},\n        {{ adapter.quote(\"ModifiedByName\") }},\n        {{ adapter.quote(\"IsPaymentGuarantee\") }},\n        {{ adapter.quote(\"Activate\") }},\n        {{ adapter.quote(\"RevenueSerial\") }},\n        {{ adapter.quote(\"TimeContractSerial\") }},\n        {{ adapter.quote(\"ProductName\") }},\n        {{ adapter.quote(\"OpportunityID\") }},\n        {{ adapter.quote(\"BOKinds\") }},\n        {{ adapter.quote(\"RetailTypeID\") }},\n        {{ adapter.quote(\"WarrantyID\") }},\n        {{ adapter.quote(\"DV_RECORD_SOURCE\") }},\n        {{ adapter.quote(\"DV_APPLIED_DATE\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["DWH", "Staging__CMIS_dbo_Orders"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Orders"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_orders.sql", "compiled": true, "compiled_code": "with source as (\n      select * from \"DWH\".\"dbo\".\"Staging__CMIS_dbo_Orders\"\n),\nrenamed as (\n    select\n        \"ID\",\n        \"Code\",\n        \"Tag\",\n        \"CustomerID\",\n        \"TotalBeforeVAT\",\n        \"ValueHardware\",\n        \"TotalVAT\",\n        \"TotalAfterVAT\",\n        \"FileAttachments\",\n        \"PublishType\",\n        \"CreatedDate\",\n        \"CreatedByID\",\n        \"CreatedByName\",\n        \"ModifiedDate\",\n        \"ModifiedByID\",\n        \"ModifiedByName\",\n        \"IsPaymentGuarantee\",\n        \"Activate\",\n        \"RevenueSerial\",\n        \"TimeContractSerial\",\n        \"ProductName\",\n        \"OpportunityID\",\n        \"BOKinds\",\n        \"RetailTypeID\",\n        \"WarrantyID\",\n        \"DV_RECORD_SOURCE\",\n        \"DV_APPLIED_DATE\"\n\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_titles": {"database": "DWH", "schema": "dbo", "name": "stg__cmis_dbo_titles", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_titles.sql", "original_file_path": "models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_titles.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_titles", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "11_staging", "cmis", "stg__cmis_dbo_titles"], "alias": "stg__cmis_dbo_titles", "checksum": {"name": "sha256", "checksum": "87c493f87f8069b6f38fcb6f4827682b6f35eb9f0508f87ac3b30d443efca905"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_titles.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.38317, "relation_name": "\"DWH\".\"dbo\".\"stg__cmis_dbo_titles\"", "raw_code": "select\r\n    *\r\nfrom  {{ source('DWH', 'Staging__CMIS_dbo_Titles') }}", "language": "sql", "refs": [], "sources": [["DWH", "Staging__CMIS_dbo_Titles"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Titles"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_titles.sql", "compiled": true, "compiled_code": "select\n    *\nfrom  \"DWH\".\"dbo\".\"Staging__CMIS_dbo_Titles\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_usercustomers": {"database": "DWH", "schema": "dbo", "name": "stg__cmis_dbo_usercustomers", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_usercustomers.sql", "original_file_path": "models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_usercustomers.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_usercustomers", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "11_staging", "cmis", "stg__cmis_dbo_usercustomers"], "alias": "stg__cmis_dbo_usercustomers", "checksum": {"name": "sha256", "checksum": "2c0d7b14959454d19fa80a780e71fa97129076b613991104081c79b627d36a5a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_usercustomers.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.388171, "relation_name": "\"DWH\".\"dbo\".\"stg__cmis_dbo_usercustomers\"", "raw_code": "select\r\n    *\r\nfrom  {{ source('DWH', 'Staging__CMIS_dbo_UserCustomers') }}", "language": "sql", "refs": [], "sources": [["DWH", "Staging__CMIS_dbo_UserCustomers"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_UserCustomers"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_usercustomers.sql", "compiled": true, "compiled_code": "select\n    *\nfrom  \"DWH\".\"dbo\".\"Staging__CMIS_dbo_UserCustomers\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_users": {"database": "DWH", "schema": "dbo", "name": "stg__cmis_dbo_users", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_users.sql", "original_file_path": "models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_users.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_users", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "11_staging", "cmis", "stg__cmis_dbo_users"], "alias": "stg__cmis_dbo_users", "checksum": {"name": "sha256", "checksum": "de74937ece03da436237016c7c89bf9270af074f3921a58cb79907c5a67f9051"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_users.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.3921702, "relation_name": "\"DWH\".\"dbo\".\"stg__cmis_dbo_users\"", "raw_code": "with source as (\r\n      select * from {{ source('DWH', 'Staging__CMIS_dbo_Users') }}\r\n),\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"ID\") }},\r\n        {{ adapter.quote(\"Email\") }},\r\n        {{ adapter.quote(\"Password\") }},\r\n        {{ adapter.quote(\"FirstName\") }},\r\n        {{ adapter.quote(\"LastName\") }},\r\n        {{ adapter.quote(\"EmployeeCode\") }},\r\n        {{ adapter.quote(\"Image\") }},\r\n        {{ adapter.quote(\"Thumb\") }},\r\n        {{ adapter.quote(\"DOB\") }},\r\n        {{ adapter.quote(\"Gender\") }},\r\n        {{ adapter.quote(\"Address\") }},\r\n        {{ adapter.quote(\"Phone\") }},\r\n        {{ adapter.quote(\"Active\") }},\r\n        {{ adapter.quote(\"Display\") }},\r\n        {{ adapter.quote(\"CreatedDate\") }},\r\n        {{ adapter.quote(\"CreatedByName\") }},\r\n        {{ adapter.quote(\"CreatedByID\") }},\r\n        {{ adapter.quote(\"TitleID\") }},\r\n        {{ adapter.quote(\"UserName\") }},\r\n        {{ adapter.quote(\"ContractDate\") }},\r\n        {{ adapter.quote(\"BeginWorkDate\") }},\r\n        {{ adapter.quote(\"LoyaltyYear\") }},\r\n      \r\n        {{ adapter.quote(\"ModifiedDate\") }},\r\n        {{ adapter.quote(\"ModifiedByID\") }},\r\n        {{ adapter.quote(\"ModifiedByName\") }},\r\n        {{ adapter.quote(\"IsIntership\") }},\r\n        {{ adapter.quote(\"TitleText\") }},\r\n        {{ adapter.quote(\"WeightUser\") }},\r\n        {{ adapter.quote(\"EmployeeTypeID\") }},\r\n        {{ adapter.quote(\"About\") }},\r\n        {{ adapter.quote(\"Facebook\") }},\r\n        {{ adapter.quote(\"Twitter\") }},\r\n        {{ adapter.quote(\"GooglePlus\") }},\r\n        {{ adapter.quote(\"History\") }},\r\n        {{ adapter.quote(\"IsShowContact\") }},\r\n        {{ adapter.quote(\"KPIEmployeeTypeID\") }},\r\n        {{ adapter.quote(\"QuitDate\") }},\r\n        {{ adapter.quote(\"IsExternal\") }},\r\n        {{ adapter.quote(\"UserType\") }},\r\n        {{ adapter.quote(\"TokenKey\") }},\r\n        {{ adapter.quote(\"EndContractDate\") }},\r\n        {{ adapter.quote(\"HRCandidateID\") }},\r\n        {{ adapter.quote(\"AltEmail\") }},\r\n        {{ adapter.quote(\"AltPassword\") }},\r\n        {{ adapter.quote(\"AltUserName\") }},\r\n        {{ adapter.quote(\"SocialInsuranceNumber\") }},\r\n        {{ adapter.quote(\"Certificate\") }},\r\n        {{ adapter.quote(\"IdentityCardNumber\") }},\r\n        {{ adapter.quote(\"IdentityCardDate\") }},\r\n        {{ adapter.quote(\"IdentityCardPlace\") }},\r\n        {{ adapter.quote(\"CompanyID\") }},\r\n        {{ adapter.quote(\"LocationID\") }},\r\n        {{ adapter.quote(\"WorkTime\") }},\r\n        {{ adapter.quote(\"LevelText\") }},\r\n        {{ adapter.quote(\"Major\") }},\r\n        {{ adapter.quote(\"School\") }},\r\n        {{ adapter.quote(\"CurrentAdress\") }},\r\n        {{ adapter.quote(\"GroupTypeID\") }},\r\n        {{ adapter.quote(\"NextTokenKey\") }},\r\n        {{ adapter.quote(\"TokenExpiredDate\") }},\r\n        {{ adapter.quote(\"StatusSync\") }},\r\n        {{ adapter.quote(\"TimeSync\") }},\r\n        {{ adapter.quote(\"CountSync\") }},\r\n        {{ adapter.quote(\"CurrentURL\") }},\r\n        {{ adapter.quote(\"RoleID\") }},\r\n        {{ adapter.quote(\"GroupID\") }},\r\n        {{ adapter.quote(\"IsEmpNoMax\") }},\r\n        {{ adapter.quote(\"DV_RECORD_SOURCE\") }},\r\n        {{ adapter.quote(\"DV_APPLIED_DATE\") }}\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["DWH", "Staging__CMIS_dbo_Users"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Users"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\11_staging\\cmis\\stg__cmis_dbo_users.sql", "compiled": true, "compiled_code": "with source as (\n      select * from \"DWH\".\"dbo\".\"Staging__CMIS_dbo_Users\"\n),\nrenamed as (\n    select\n        \"ID\",\n        \"Email\",\n        \"Password\",\n        \"FirstName\",\n        \"LastName\",\n        \"EmployeeCode\",\n        \"Image\",\n        \"Thumb\",\n        \"DOB\",\n        \"Gender\",\n        \"Address\",\n        \"Phone\",\n        \"Active\",\n        \"Display\",\n        \"CreatedDate\",\n        \"CreatedByName\",\n        \"CreatedByID\",\n        \"TitleID\",\n        \"UserName\",\n        \"ContractDate\",\n        \"BeginWorkDate\",\n        \"LoyaltyYear\",\n      \n        \"ModifiedDate\",\n        \"ModifiedByID\",\n        \"ModifiedByName\",\n        \"IsIntership\",\n        \"TitleText\",\n        \"WeightUser\",\n        \"EmployeeTypeID\",\n        \"About\",\n        \"Facebook\",\n        \"Twitter\",\n        \"GooglePlus\",\n        \"History\",\n        \"IsShowContact\",\n        \"KPIEmployeeTypeID\",\n        \"QuitDate\",\n        \"IsExternal\",\n        \"UserType\",\n        \"TokenKey\",\n        \"EndContractDate\",\n        \"HRCandidateID\",\n        \"AltEmail\",\n        \"AltPassword\",\n        \"AltUserName\",\n        \"SocialInsuranceNumber\",\n        \"Certificate\",\n        \"IdentityCardNumber\",\n        \"IdentityCardDate\",\n        \"IdentityCardPlace\",\n        \"CompanyID\",\n        \"LocationID\",\n        \"WorkTime\",\n        \"LevelText\",\n        \"Major\",\n        \"School\",\n        \"CurrentAdress\",\n        \"GroupTypeID\",\n        \"NextTokenKey\",\n        \"TokenExpiredDate\",\n        \"StatusSync\",\n        \"TimeSync\",\n        \"CountSync\",\n        \"CurrentURL\",\n        \"RoleID\",\n        \"GroupID\",\n        \"IsEmpNoMax\",\n        \"DV_RECORD_SOURCE\",\n        \"DV_APPLIED_DATE\"\n\n    from source\n)\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_branches": {"database": "DWH", "schema": "dbo", "name": "hash__cmis_dbo_branches", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_branches.sql", "original_file_path": "models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_branches.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_branches", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "12_hash", "cmis", "hash__cmis_dbo_branches"], "alias": "hash__cmis_dbo_branches", "checksum": {"name": "sha256", "checksum": "106f91f077e2ba1442e77f256c76947278142d7f80241b98f60e9ce08798a656"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_branches.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.4141676, "relation_name": "\"DWH\".\"dbo\".\"hash__cmis_dbo_branches\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"stg__cmis_dbo_branches\"\r\nderived_columns:\r\n  dv_recordsource: \"DV_RECORD_SOURCE\"\r\n  dv_load_timestamp: cast( DV_APPLIED_DATE as DATETIME2(6))\r\n  product_code: cast([ID] as VARCHAR(8000))\r\n  dv_tenant_id: '!default'\r\n  dv_collisioncode: '!default'\r\nhashed_columns: \r\n    dv_hash_key_h_product:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"product_code\"\r\n    dv_hashdiff_s_h_product:\r\n      is_hashdiff: true\r\n      columns:\r\n        - \"[Code]\"\r\n        - \"[Name]\"\r\n        - \"[Description]\"\r\n        - \"[Activate]\"\r\n        - \"[IsDeleted]\"\r\n        - \"[ParentID]\"\r\n        - \"[ADN]\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.stage(include_source_columns=true,\r\n                  source_model=metadata_dict['source_model'],\r\n                  derived_columns=metadata_dict['derived_columns'],\r\n                  hashed_columns=metadata_dict['hashed_columns'],\r\n                  ranked_columns=none) }}", "language": "sql", "refs": [["stg__cmis_dbo_branches"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_branches"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_branches.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n\n    SELECT\n\n    ID,\n    Code,\n    Name,\n    Description,\n    PublishType,\n    Activate,\n    IsDeleted,\n    CreatedDate,\n    ParentID,\n    ADN,\n    LastChildADN,\n    BaseSource,\n    LastUpdateBase,\n    PercentProfit,\n    IsDisplay,\n    Color,\n    IsSBAService,\n    IsSBARetail,\n    IsSBALicense,\n    IsSBAServiceRetail,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE\n\n    FROM \"DWH\".\"dbo\".\"stg__cmis_dbo_branches\"\n),\n\nderived_columns AS (\n\n    SELECT\n\n    ID,\n    Code,\n    Name,\n    Description,\n    PublishType,\n    Activate,\n    IsDeleted,\n    CreatedDate,\n    ParentID,\n    ADN,\n    LastChildADN,\n    BaseSource,\n    LastUpdateBase,\n    PercentProfit,\n    IsDisplay,\n    Color,\n    IsSBAService,\n    IsSBARetail,\n    IsSBALicense,\n    IsSBAServiceRetail,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    DV_RECORD_SOURCE AS dv_recordsource,\n    cast( DV_APPLIED_DATE as DATETIME2(6)) AS dv_load_timestamp,\n    cast([ID] as VARCHAR(8000)) AS product_code,\n    'default' AS dv_tenant_id,\n    'default' AS dv_collisioncode\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    ID,\n    Code,\n    Name,\n    Description,\n    PublishType,\n    Activate,\n    IsDeleted,\n    CreatedDate,\n    ParentID,\n    ADN,\n    LastChildADN,\n    BaseSource,\n    LastUpdateBase,\n    PercentProfit,\n    IsDisplay,\n    Color,\n    IsSBAService,\n    IsSBARetail,\n    IsSBALicense,\n    IsSBAServiceRetail,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    product_code,\n    dv_tenant_id,\n    dv_collisioncode,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(product_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_product,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST([Activate] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([ADN] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([Code] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([Description] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([IsDeleted] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([Name] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([ParentID] AS VARCHAR(MAX)))), ''), '^^')\n    )), 2) AS dv_hashdiff_s_h_product\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    ID,\n    Code,\n    Name,\n    Description,\n    PublishType,\n    Activate,\n    IsDeleted,\n    CreatedDate,\n    ParentID,\n    ADN,\n    LastChildADN,\n    BaseSource,\n    LastUpdateBase,\n    PercentProfit,\n    IsDisplay,\n    Color,\n    IsSBAService,\n    IsSBARetail,\n    IsSBALicense,\n    IsSBAServiceRetail,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    product_code,\n    dv_tenant_id,\n    dv_collisioncode,\n    dv_hash_key_h_product,\n    dv_hashdiff_s_h_product\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_businessplans": {"database": "DWH", "schema": "dbo", "name": "hash__cmis_dbo_businessplans", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_businessplans.sql", "original_file_path": "models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_businessplans.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_businessplans", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "12_hash", "cmis", "hash__cmis_dbo_businessplans"], "alias": "hash__cmis_dbo_businessplans", "checksum": {"name": "sha256", "checksum": "b6e608c5e3c194950a61a6836b35dd958106c8aacd5024177a994fa1e348bdc9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_businessplans.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.6561682, "relation_name": "\"DWH\".\"dbo\".\"hash__cmis_dbo_businessplans\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"stg__cmis_dbo_businessplans\"\r\nderived_columns:\r\n  dv_recordsource: \"DV_RECORD_SOURCE\"\r\n  dv_load_timestamp: cast( DV_APPLIED_DATE as DATETIME2(6))\r\n  opportunity_code: cast([OpportunityID] as VARCHAR(8000))\r\n  businessplan_code: cast([ID] as VARCHAR(8000))\r\n  dv_tenant_id: '!default'\r\n  dv_collisioncode: '!default'\r\nhashed_columns: \r\n    dv_hash_key_h_opportunity:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"opportunity_code\"\r\n    dv_hash_key_h_businessplan:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"businessplan_code\"\r\n    dv_hash_key_l_opportunity_businessplan:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"opportunity_code\"\r\n    - \"businessplan_code\"\r\n    dv_hashdiff_s_h_businessplan:\r\n      is_hashdiff: true\r\n      columns:\r\n        - \"[Profit]\"\r\n        - \"[Activate]\"\r\n        - \"[PublishType]\"\r\n        - \"[WFIsFinish]\"\r\n        - \"[IsDeleted]\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.stage(include_source_columns=true,\r\n                  source_model=metadata_dict['source_model'],\r\n                  derived_columns=metadata_dict['derived_columns'],\r\n                  hashed_columns=metadata_dict['hashed_columns'],\r\n                  ranked_columns=none) }}", "language": "sql", "refs": [["stg__cmis_dbo_businessplans"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_businessplans"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_businessplans.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n\n    SELECT\n\n    ID,\n    OpportunityID,\n    Code,\n    Description,\n    Activate,\n    IsDeleted,\n    PublishType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    FileAttachments,\n    GroupID,\n    UserID,\n    PaymentType,\n    RevenueNow,\n    RevenueDebt,\n    RewardFromSupplier,\n    ProductPrice,\n    RentPrice,\n    WarrantyVATPrice,\n    WarrantyExtPrice,\n    SupplierPrice,\n    LicensePrice,\n    MaterialPrice,\n    MaterialOtherPrice,\n    ConsultantPrice,\n    DeploymentPrice,\n    WarrantyPaymentPrice,\n    ProfitLender,\n    FinancialIncome,\n    ConsultantManday,\n    DeloymentManday,\n    MarketingPrice,\n    OtherPrice,\n    Revenue,\n    VariableCost,\n    Cost,\n    TotalMaterialCost,\n    TotalOtherMaterialCost,\n    CostByMoney,\n    WarrantyDetailCost,\n    TotalWarrantyPaymentPrice,\n    Profit,\n    TotalPrice,\n    TotalFinancial,\n    TotalManday,\n    TotalMarketing,\n    TotalOhters,\n    TotalProfit,\n    ProviderReward,\n    WFIsFinish,\n    WFStatusName,\n    WFProcessByID,\n    WFProcessByName,\n    Version,\n    BaseSource,\n    LastUpdateBase,\n    IsConfirmFile,\n    LeaseServiceCost,\n    TotalLeaseServiceCost,\n    IsCustomerPeersSI,\n    TotalWarrantyBHUQPrice,\n    WarrantyPaymentPrice8x5,\n    WarrantyPaymentPrice24x7,\n    WarrantyPriceIncrease,\n    WarrantyPriceExtend,\n    WFFinishDate,\n    DeadlineDate,\n    ProductPriceDomestic,\n    ProductPriceForeign,\n    RateRisk,\n    OpportunityCode,\n    IsITSOrBSGB,\n    IsRetail,\n    OrtherOpportunityType,\n    GroupADN,\n    ProductTotalBeforeVAT,\n    ProductTotalVAT,\n    ProductTotalAfterVAT,\n    HaveProduct,\n    HaveAdvancePayment,\n    HaveDeployDelivery,\n    RetailTypeID,\n    TechnologicalCapability,\n    ProjectReward,\n    Url,\n    IsSync,\n    DateSync,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE\n\n    FROM \"DWH\".\"dbo\".\"stg__cmis_dbo_businessplans\"\n),\n\nderived_columns AS (\n\n    SELECT\n\n    ID,\n    OpportunityID,\n    Code,\n    Description,\n    Activate,\n    IsDeleted,\n    PublishType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    FileAttachments,\n    GroupID,\n    UserID,\n    PaymentType,\n    RevenueNow,\n    RevenueDebt,\n    RewardFromSupplier,\n    ProductPrice,\n    RentPrice,\n    WarrantyVATPrice,\n    WarrantyExtPrice,\n    SupplierPrice,\n    LicensePrice,\n    MaterialPrice,\n    MaterialOtherPrice,\n    ConsultantPrice,\n    DeploymentPrice,\n    WarrantyPaymentPrice,\n    ProfitLender,\n    FinancialIncome,\n    ConsultantManday,\n    DeloymentManday,\n    MarketingPrice,\n    OtherPrice,\n    Revenue,\n    VariableCost,\n    Cost,\n    TotalMaterialCost,\n    TotalOtherMaterialCost,\n    CostByMoney,\n    WarrantyDetailCost,\n    TotalWarrantyPaymentPrice,\n    Profit,\n    TotalPrice,\n    TotalFinancial,\n    TotalManday,\n    TotalMarketing,\n    TotalOhters,\n    TotalProfit,\n    ProviderReward,\n    WFIsFinish,\n    WFStatusName,\n    WFProcessByID,\n    WFProcessByName,\n    Version,\n    BaseSource,\n    LastUpdateBase,\n    IsConfirmFile,\n    LeaseServiceCost,\n    TotalLeaseServiceCost,\n    IsCustomerPeersSI,\n    TotalWarrantyBHUQPrice,\n    WarrantyPaymentPrice8x5,\n    WarrantyPaymentPrice24x7,\n    WarrantyPriceIncrease,\n    WarrantyPriceExtend,\n    WFFinishDate,\n    DeadlineDate,\n    ProductPriceDomestic,\n    ProductPriceForeign,\n    RateRisk,\n    OpportunityCode,\n    IsITSOrBSGB,\n    IsRetail,\n    OrtherOpportunityType,\n    GroupADN,\n    ProductTotalBeforeVAT,\n    ProductTotalVAT,\n    ProductTotalAfterVAT,\n    HaveProduct,\n    HaveAdvancePayment,\n    HaveDeployDelivery,\n    RetailTypeID,\n    TechnologicalCapability,\n    ProjectReward,\n    Url,\n    IsSync,\n    DateSync,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    DV_RECORD_SOURCE AS dv_recordsource,\n    cast( DV_APPLIED_DATE as DATETIME2(6)) AS dv_load_timestamp,\n    cast([OpportunityID] as VARCHAR(8000)) AS opportunity_code,\n    cast([ID] as VARCHAR(8000)) AS businessplan_code,\n    'default' AS dv_tenant_id,\n    'default' AS dv_collisioncode\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    ID,\n    OpportunityID,\n    Code,\n    Description,\n    Activate,\n    IsDeleted,\n    PublishType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    FileAttachments,\n    GroupID,\n    UserID,\n    PaymentType,\n    RevenueNow,\n    RevenueDebt,\n    RewardFromSupplier,\n    ProductPrice,\n    RentPrice,\n    WarrantyVATPrice,\n    WarrantyExtPrice,\n    SupplierPrice,\n    LicensePrice,\n    MaterialPrice,\n    MaterialOtherPrice,\n    ConsultantPrice,\n    DeploymentPrice,\n    WarrantyPaymentPrice,\n    ProfitLender,\n    FinancialIncome,\n    ConsultantManday,\n    DeloymentManday,\n    MarketingPrice,\n    OtherPrice,\n    Revenue,\n    VariableCost,\n    Cost,\n    TotalMaterialCost,\n    TotalOtherMaterialCost,\n    CostByMoney,\n    WarrantyDetailCost,\n    TotalWarrantyPaymentPrice,\n    Profit,\n    TotalPrice,\n    TotalFinancial,\n    TotalManday,\n    TotalMarketing,\n    TotalOhters,\n    TotalProfit,\n    ProviderReward,\n    WFIsFinish,\n    WFStatusName,\n    WFProcessByID,\n    WFProcessByName,\n    Version,\n    BaseSource,\n    LastUpdateBase,\n    IsConfirmFile,\n    LeaseServiceCost,\n    TotalLeaseServiceCost,\n    IsCustomerPeersSI,\n    TotalWarrantyBHUQPrice,\n    WarrantyPaymentPrice8x5,\n    WarrantyPaymentPrice24x7,\n    WarrantyPriceIncrease,\n    WarrantyPriceExtend,\n    WFFinishDate,\n    DeadlineDate,\n    ProductPriceDomestic,\n    ProductPriceForeign,\n    RateRisk,\n    OpportunityCode,\n    IsITSOrBSGB,\n    IsRetail,\n    OrtherOpportunityType,\n    GroupADN,\n    ProductTotalBeforeVAT,\n    ProductTotalVAT,\n    ProductTotalAfterVAT,\n    HaveProduct,\n    HaveAdvancePayment,\n    HaveDeployDelivery,\n    RetailTypeID,\n    TechnologicalCapability,\n    ProjectReward,\n    Url,\n    IsSync,\n    DateSync,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    opportunity_code,\n    businessplan_code,\n    dv_tenant_id,\n    dv_collisioncode,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(opportunity_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_opportunity,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(businessplan_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_businessplan,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(opportunity_code AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(businessplan_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^||^^')), 2) AS dv_hash_key_l_opportunity_businessplan,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST([Activate] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([IsDeleted] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([Profit] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([PublishType] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([WFIsFinish] AS VARCHAR(MAX)))), ''), '^^')\n    )), 2) AS dv_hashdiff_s_h_businessplan\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    ID,\n    OpportunityID,\n    Code,\n    Description,\n    Activate,\n    IsDeleted,\n    PublishType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    FileAttachments,\n    GroupID,\n    UserID,\n    PaymentType,\n    RevenueNow,\n    RevenueDebt,\n    RewardFromSupplier,\n    ProductPrice,\n    RentPrice,\n    WarrantyVATPrice,\n    WarrantyExtPrice,\n    SupplierPrice,\n    LicensePrice,\n    MaterialPrice,\n    MaterialOtherPrice,\n    ConsultantPrice,\n    DeploymentPrice,\n    WarrantyPaymentPrice,\n    ProfitLender,\n    FinancialIncome,\n    ConsultantManday,\n    DeloymentManday,\n    MarketingPrice,\n    OtherPrice,\n    Revenue,\n    VariableCost,\n    Cost,\n    TotalMaterialCost,\n    TotalOtherMaterialCost,\n    CostByMoney,\n    WarrantyDetailCost,\n    TotalWarrantyPaymentPrice,\n    Profit,\n    TotalPrice,\n    TotalFinancial,\n    TotalManday,\n    TotalMarketing,\n    TotalOhters,\n    TotalProfit,\n    ProviderReward,\n    WFIsFinish,\n    WFStatusName,\n    WFProcessByID,\n    WFProcessByName,\n    Version,\n    BaseSource,\n    LastUpdateBase,\n    IsConfirmFile,\n    LeaseServiceCost,\n    TotalLeaseServiceCost,\n    IsCustomerPeersSI,\n    TotalWarrantyBHUQPrice,\n    WarrantyPaymentPrice8x5,\n    WarrantyPaymentPrice24x7,\n    WarrantyPriceIncrease,\n    WarrantyPriceExtend,\n    WFFinishDate,\n    DeadlineDate,\n    ProductPriceDomestic,\n    ProductPriceForeign,\n    RateRisk,\n    OpportunityCode,\n    IsITSOrBSGB,\n    IsRetail,\n    OrtherOpportunityType,\n    GroupADN,\n    ProductTotalBeforeVAT,\n    ProductTotalVAT,\n    ProductTotalAfterVAT,\n    HaveProduct,\n    HaveAdvancePayment,\n    HaveDeployDelivery,\n    RetailTypeID,\n    TechnologicalCapability,\n    ProjectReward,\n    Url,\n    IsSync,\n    DateSync,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    opportunity_code,\n    businessplan_code,\n    dv_tenant_id,\n    dv_collisioncode,\n    dv_hash_key_h_opportunity,\n    dv_hash_key_h_businessplan,\n    dv_hash_key_l_opportunity_businessplan,\n    dv_hashdiff_s_h_businessplan\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_contractlockstatus": {"database": "DWH", "schema": "dbo", "name": "hash__cmis_dbo_contractlockstatus", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_contractlockstatus.sql", "original_file_path": "models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_contractlockstatus.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_contractlockstatus", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "12_hash", "cmis", "hash__cmis_dbo_contractlockstatus"], "alias": "hash__cmis_dbo_contractlockstatus", "checksum": {"name": "sha256", "checksum": "8d3a6fac384d017e7d30bbb215fd9ddc8379dce4dd19ddb50c3fe5a559c679b2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_contractlockstatus.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.7066483, "relation_name": "\"DWH\".\"dbo\".\"hash__cmis_dbo_contractlockstatus\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"stg__cmis_dbo_contractlockstatus\"\r\nderived_columns:\r\n  dv_recordsource: \"DV_RECORD_SOURCE\"\r\n  dv_load_timestamp: cast( DV_APPLIED_DATE as DATETIME2(6))\r\n  contract_code: cast([ContractID] as VARCHAR(8000))\r\n  dv_cdk_s_l_contract_lockstatus: cast([ID] as VARCHAR(8000))\r\n  dv_tenant_id: '!default'\r\n  dv_collisioncode: '!default'\r\nhashed_columns: \r\n    dv_hash_key_h_contract:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"contract_code\"\r\n    dv_hash_key_l_contract_lockstatus:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"contract_code\"\r\n    - \"dv_cdk_s_l_contract_lockstatus\"\r\n    dv_hashdiff_s_l_contract_lockstatus:\r\n      is_hashdiff: true\r\n      columns:\r\n        - \"[IsLock]\"\r\n        - \"[LockDate]\"\r\n        - \"[ID]\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.stage(include_source_columns=true,\r\n                  source_model=metadata_dict['source_model'],\r\n                  derived_columns=metadata_dict['derived_columns'],\r\n                  hashed_columns=metadata_dict['hashed_columns'],\r\n                  ranked_columns=none) }}", "language": "sql", "refs": [["stg__cmis_dbo_contractlockstatus"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_contractlockstatus"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_contractlockstatus.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n\n    SELECT\n\n    ID,\n    ContractID,\n    TotalBeforeVAT,\n    TotalVAT,\n    TotalAfterVAT,\n    Content,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    Total,\n    LockType,\n    LockDate,\n    LockTypeName,\n    Nam_TC,\n    IsLock,\n    LockUserName,\n    AdditionalTerm,\n    TotalLockVAT,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE\n\n    FROM \"DWH\".\"dbo\".\"stg__cmis_dbo_contractlockstatus\"\n),\n\nderived_columns AS (\n\n    SELECT\n\n    ID,\n    ContractID,\n    TotalBeforeVAT,\n    TotalVAT,\n    TotalAfterVAT,\n    Content,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    Total,\n    LockType,\n    LockDate,\n    LockTypeName,\n    Nam_TC,\n    IsLock,\n    LockUserName,\n    AdditionalTerm,\n    TotalLockVAT,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    DV_RECORD_SOURCE AS dv_recordsource,\n    cast( DV_APPLIED_DATE as DATETIME2(6)) AS dv_load_timestamp,\n    cast([ContractID] as VARCHAR(8000)) AS contract_code,\n    cast([ID] as VARCHAR(8000)) AS dv_cdk_s_l_contract_lockstatus,\n    'default' AS dv_tenant_id,\n    'default' AS dv_collisioncode\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    ID,\n    ContractID,\n    TotalBeforeVAT,\n    TotalVAT,\n    TotalAfterVAT,\n    Content,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    Total,\n    LockType,\n    LockDate,\n    LockTypeName,\n    Nam_TC,\n    IsLock,\n    LockUserName,\n    AdditionalTerm,\n    TotalLockVAT,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    contract_code,\n    dv_cdk_s_l_contract_lockstatus,\n    dv_tenant_id,\n    dv_collisioncode,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(contract_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_contract,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(contract_code AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_cdk_s_l_contract_lockstatus AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^||^^')), 2) AS dv_hash_key_l_contract_lockstatus,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST([ID] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([IsLock] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([LockDate] AS VARCHAR(MAX)))), ''), '^^')\n    )), 2) AS dv_hashdiff_s_l_contract_lockstatus\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    ID,\n    ContractID,\n    TotalBeforeVAT,\n    TotalVAT,\n    TotalAfterVAT,\n    Content,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    Total,\n    LockType,\n    LockDate,\n    LockTypeName,\n    Nam_TC,\n    IsLock,\n    LockUserName,\n    AdditionalTerm,\n    TotalLockVAT,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    contract_code,\n    dv_cdk_s_l_contract_lockstatus,\n    dv_tenant_id,\n    dv_collisioncode,\n    dv_hash_key_h_contract,\n    dv_hash_key_l_contract_lockstatus,\n    dv_hashdiff_s_l_contract_lockstatus\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_contracts": {"database": "DWH", "schema": "dbo", "name": "hash__cmis_dbo_contracts", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_contracts.sql", "original_file_path": "models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_contracts.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_contracts", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "12_hash", "cmis", "hash__cmis_dbo_contracts"], "alias": "hash__cmis_dbo_contracts", "checksum": {"name": "sha256", "checksum": "d5881d24d658062a68b75b7bc6c08522b08629aaa4e5d4275066902bef44fb8c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_contracts.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.7456481, "relation_name": "\"DWH\".\"dbo\".\"hash__cmis_dbo_contracts\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"stg__cmis_dbo_contracts\"\r\nderived_columns:\r\n  dv_recordsource: \"DV_RECORD_SOURCE\"\r\n  dv_load_timestamp: cast( DV_APPLIED_DATE as DATETIME2(6))\r\n  opportunity_code: cast([OpportunityID] as VARCHAR(8000))\r\n  contract_code: cast([ID] as VARCHAR(8000))\r\n  dv_tenant_id: '!default'\r\n  dv_collisioncode: '!default'\r\nhashed_columns: \r\n    dv_hash_key_h_contract:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"contract_code\"\r\n    dv_hash_key_h_opportunity:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"opportunity_code\"\r\n    dv_hash_key_l_opportunity_contract:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"opportunity_code\"\r\n    - \"contract_code\"\r\n    dv_hashdiff_s_h_contract:\r\n      is_hashdiff: true\r\n      columns:\r\n        - \"[Activate]\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.stage(include_source_columns=true,\r\n                  source_model=metadata_dict['source_model'],\r\n                  derived_columns=metadata_dict['derived_columns'],\r\n                  hashed_columns=metadata_dict['hashed_columns'],\r\n                  ranked_columns=none) }}", "language": "sql", "refs": [["stg__cmis_dbo_contracts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_contracts"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_contracts.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n\n    SELECT\n\n    ID,\n    Code,\n    Tag,\n    OpportunityID,\n    SignedDate,\n    CorporationID,\n    ContractTypeID,\n    Content,\n    IsMaster,\n    TotalBeforeVAT,\n    TotalVAT,\n    TotalAfterVAT,\n    WarrantyLocationType,\n    WarrantyApplicationType,\n    WarrantyType,\n    WarrantyProcessingType,\n    WarrantyReturnType,\n    WarrantyOtherLocationType,\n    WarrantyCommitmentType,\n    FileAttachments,\n    PublishType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    IsLockContract,\n    NumberOfSBA,\n    SBA,\n    ProductName,\n    BeginDateWarranty,\n    EndDateWarranty,\n    ParentID,\n    BaseSource,\n    LastUpdateBase,\n    Activate,\n    RevenueSerial,\n    TimeContractSerial,\n    UserShareID,\n    UserActionID,\n    SubUserID,\n    GroupID,\n    NumberShare,\n    NumberAction,\n    NumberGroupShare,\n    CheckSparePart,\n    UserShareActivity,\n    UserActionActivity,\n    SubUserActivity,\n    LockDate,\n    ValueHardware,\n    ValueLock,\n    CustomerID,\n    IsUseBHMR,\n    ValueBHMR,\n    ProjectEndDate,\n    LockTypeName,\n    AdditionalTerm,\n    LockType,\n    Explanation,\n    RequestCommerce,\n    ValueVATLock,\n    WarrantyDescription,\n    ManagedServicesFrom,\n    ManagedServicesTo,\n    UpgradeSoftwareFrom,\n    UpgradeSoftwareTo,\n    SupportSoftwareFrom,\n    SupportSoftwareTo,\n    RegularMaintenanceFrom,\n    RegularMaintenanceTo,\n    IsPaymentGuarantee,\n    SubSupportUserID,\n    ManagedServices,\n    UpgradeSoftware,\n    SupportSoftware,\n    RegularMaintenance,\n    CustomerTag,\n    Url,\n    IsSync,\n    DateSync,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE\n\n    FROM \"DWH\".\"dbo\".\"stg__cmis_dbo_contracts\"\n),\n\nderived_columns AS (\n\n    SELECT\n\n    ID,\n    Code,\n    Tag,\n    OpportunityID,\n    SignedDate,\n    CorporationID,\n    ContractTypeID,\n    Content,\n    IsMaster,\n    TotalBeforeVAT,\n    TotalVAT,\n    TotalAfterVAT,\n    WarrantyLocationType,\n    WarrantyApplicationType,\n    WarrantyType,\n    WarrantyProcessingType,\n    WarrantyReturnType,\n    WarrantyOtherLocationType,\n    WarrantyCommitmentType,\n    FileAttachments,\n    PublishType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    IsLockContract,\n    NumberOfSBA,\n    SBA,\n    ProductName,\n    BeginDateWarranty,\n    EndDateWarranty,\n    ParentID,\n    BaseSource,\n    LastUpdateBase,\n    Activate,\n    RevenueSerial,\n    TimeContractSerial,\n    UserShareID,\n    UserActionID,\n    SubUserID,\n    GroupID,\n    NumberShare,\n    NumberAction,\n    NumberGroupShare,\n    CheckSparePart,\n    UserShareActivity,\n    UserActionActivity,\n    SubUserActivity,\n    LockDate,\n    ValueHardware,\n    ValueLock,\n    CustomerID,\n    IsUseBHMR,\n    ValueBHMR,\n    ProjectEndDate,\n    LockTypeName,\n    AdditionalTerm,\n    LockType,\n    Explanation,\n    RequestCommerce,\n    ValueVATLock,\n    WarrantyDescription,\n    ManagedServicesFrom,\n    ManagedServicesTo,\n    UpgradeSoftwareFrom,\n    UpgradeSoftwareTo,\n    SupportSoftwareFrom,\n    SupportSoftwareTo,\n    RegularMaintenanceFrom,\n    RegularMaintenanceTo,\n    IsPaymentGuarantee,\n    SubSupportUserID,\n    ManagedServices,\n    UpgradeSoftware,\n    SupportSoftware,\n    RegularMaintenance,\n    CustomerTag,\n    Url,\n    IsSync,\n    DateSync,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    DV_RECORD_SOURCE AS dv_recordsource,\n    cast( DV_APPLIED_DATE as DATETIME2(6)) AS dv_load_timestamp,\n    cast([OpportunityID] as VARCHAR(8000)) AS opportunity_code,\n    cast([ID] as VARCHAR(8000)) AS contract_code,\n    'default' AS dv_tenant_id,\n    'default' AS dv_collisioncode\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    ID,\n    Code,\n    Tag,\n    OpportunityID,\n    SignedDate,\n    CorporationID,\n    ContractTypeID,\n    Content,\n    IsMaster,\n    TotalBeforeVAT,\n    TotalVAT,\n    TotalAfterVAT,\n    WarrantyLocationType,\n    WarrantyApplicationType,\n    WarrantyType,\n    WarrantyProcessingType,\n    WarrantyReturnType,\n    WarrantyOtherLocationType,\n    WarrantyCommitmentType,\n    FileAttachments,\n    PublishType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    IsLockContract,\n    NumberOfSBA,\n    SBA,\n    ProductName,\n    BeginDateWarranty,\n    EndDateWarranty,\n    ParentID,\n    BaseSource,\n    LastUpdateBase,\n    Activate,\n    RevenueSerial,\n    TimeContractSerial,\n    UserShareID,\n    UserActionID,\n    SubUserID,\n    GroupID,\n    NumberShare,\n    NumberAction,\n    NumberGroupShare,\n    CheckSparePart,\n    UserShareActivity,\n    UserActionActivity,\n    SubUserActivity,\n    LockDate,\n    ValueHardware,\n    ValueLock,\n    CustomerID,\n    IsUseBHMR,\n    ValueBHMR,\n    ProjectEndDate,\n    LockTypeName,\n    AdditionalTerm,\n    LockType,\n    Explanation,\n    RequestCommerce,\n    ValueVATLock,\n    WarrantyDescription,\n    ManagedServicesFrom,\n    ManagedServicesTo,\n    UpgradeSoftwareFrom,\n    UpgradeSoftwareTo,\n    SupportSoftwareFrom,\n    SupportSoftwareTo,\n    RegularMaintenanceFrom,\n    RegularMaintenanceTo,\n    IsPaymentGuarantee,\n    SubSupportUserID,\n    ManagedServices,\n    UpgradeSoftware,\n    SupportSoftware,\n    RegularMaintenance,\n    CustomerTag,\n    Url,\n    IsSync,\n    DateSync,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    opportunity_code,\n    contract_code,\n    dv_tenant_id,\n    dv_collisioncode,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(contract_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_contract,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(opportunity_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_opportunity,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(opportunity_code AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(contract_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^||^^')), 2) AS dv_hash_key_l_opportunity_contract,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', ISNULL(NULLIF(UPPER(TRIM(CAST([Activate] AS VARCHAR(MAX)))), ''), '^^')), 2) AS dv_hashdiff_s_h_contract\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    ID,\n    Code,\n    Tag,\n    OpportunityID,\n    SignedDate,\n    CorporationID,\n    ContractTypeID,\n    Content,\n    IsMaster,\n    TotalBeforeVAT,\n    TotalVAT,\n    TotalAfterVAT,\n    WarrantyLocationType,\n    WarrantyApplicationType,\n    WarrantyType,\n    WarrantyProcessingType,\n    WarrantyReturnType,\n    WarrantyOtherLocationType,\n    WarrantyCommitmentType,\n    FileAttachments,\n    PublishType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    IsLockContract,\n    NumberOfSBA,\n    SBA,\n    ProductName,\n    BeginDateWarranty,\n    EndDateWarranty,\n    ParentID,\n    BaseSource,\n    LastUpdateBase,\n    Activate,\n    RevenueSerial,\n    TimeContractSerial,\n    UserShareID,\n    UserActionID,\n    SubUserID,\n    GroupID,\n    NumberShare,\n    NumberAction,\n    NumberGroupShare,\n    CheckSparePart,\n    UserShareActivity,\n    UserActionActivity,\n    SubUserActivity,\n    LockDate,\n    ValueHardware,\n    ValueLock,\n    CustomerID,\n    IsUseBHMR,\n    ValueBHMR,\n    ProjectEndDate,\n    LockTypeName,\n    AdditionalTerm,\n    LockType,\n    Explanation,\n    RequestCommerce,\n    ValueVATLock,\n    WarrantyDescription,\n    ManagedServicesFrom,\n    ManagedServicesTo,\n    UpgradeSoftwareFrom,\n    UpgradeSoftwareTo,\n    SupportSoftwareFrom,\n    SupportSoftwareTo,\n    RegularMaintenanceFrom,\n    RegularMaintenanceTo,\n    IsPaymentGuarantee,\n    SubSupportUserID,\n    ManagedServices,\n    UpgradeSoftware,\n    SupportSoftware,\n    RegularMaintenance,\n    CustomerTag,\n    Url,\n    IsSync,\n    DateSync,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    opportunity_code,\n    contract_code,\n    dv_tenant_id,\n    dv_collisioncode,\n    dv_hash_key_h_contract,\n    dv_hash_key_h_opportunity,\n    dv_hash_key_l_opportunity_contract,\n    dv_hashdiff_s_h_contract\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_ct00": {"database": "DWH", "schema": "dbo", "name": "hash__cmis_dbo_ct00", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_ct00.sql", "original_file_path": "models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_ct00.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_ct00", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "12_hash", "cmis", "hash__cmis_dbo_ct00"], "alias": "hash__cmis_dbo_ct00", "checksum": {"name": "sha256", "checksum": "44be6f49d1b6d5c3dc1d0aacbe1d82bee60265e11f040bfe02dff16bb2b5ba44"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_ct00.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.7886682, "relation_name": "\"DWH\".\"dbo\".\"hash__cmis_dbo_ct00\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"stg__cmis_dbo_ct00\"\r\nderived_columns:\r\n  dv_recordsource: \"DV_RECORD_SOURCE\"\r\n  dv_load_timestamp: cast( DV_APPLIED_DATE as DATETIME2(6))\r\n  opportunity_code: \"ma_vv\" \r\n  invoice_code: \"stt_rec\" \r\n  dv_cdk_l_opportunity_invoice: \"line_nbr\"\r\n  dv_tenant_id: '!default'\r\n  dv_collisioncode: '!default'\r\nhashed_columns: \r\n    dv_hash_key_h_opportunity:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"opportunity_code\"\r\n    dv_hash_key_h_invoice:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"invoice_code\"\r\n    dv_hash_key_l_opportunity_invoice:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"invoice_code\"\r\n    - \"opportunity_code\"\r\n    - \"dv_cdk_l_opportunity_invoice\"\r\n    dv_hashdiff_s_l_opportunity_invoice:\r\n      is_hashdiff: true\r\n      columns:\r\n        - \"[ngay_ct]\"\r\n        - \"[ps_co]\"\r\n        - \"[ps_no]\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.stage(include_source_columns=true,\r\n                  source_model=metadata_dict['source_model'],\r\n                  derived_columns=metadata_dict['derived_columns'],\r\n                  hashed_columns=metadata_dict['hashed_columns'],\r\n                  ranked_columns=none) }}", "language": "sql", "refs": [["stg__cmis_dbo_ct00"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_ct00"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_ct00.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n\n    SELECT\n\n    stt_rec,\n    ma_dvcs,\n    loai_ct,\n    ma_ct,\n    ngay_ct,\n    ngay_lct,\n    so_ct,\n    so_ctgs,\n    ngay_ctgs,\n    so_lo,\n    ngay_lo,\n    ong_ba,\n    head_item,\n    dien_giai_h,\n    dien_giai,\n    nh_dk,\n    tk,\n    tk_du,\n    ps_no_nt,\n    ps_co_nt,\n    ma_nt,\n    ty_gia,\n    ps_no,\n    ps_co,\n    ma_kh,\n    ma_vv,\n    ma_nk,\n    ma_sp,\n    ma_bp,\n    so_lsx,\n    so_ct0,\n    ngay_ct0,\n    ct_nxt,\n    ma_gd,\n    nam,\n    ky,\n    gt_no,\n    gt_co,\n    gt_tinh,\n    gt_dd,\n    sua_tg_yn,\n    line_nbr,\n    status,\n    datetime0,\n    datetime2,\n    user_id0,\n    user_id2,\n    ma_hd,\n    ma_ku,\n    ma_phi,\n    so_dh,\n    ma_td1,\n    ma_td2,\n    ma_td3,\n    sl_td1,\n    sl_td2,\n    sl_td3,\n    ngay_td1,\n    ngay_td2,\n    ngay_td3,\n    gc_td1,\n    gc_td2,\n    gc_td3,\n    s1,\n    s2,\n    s3,\n    s4,\n    s5,\n    s6,\n    s7,\n    s8,\n    s9,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE\n\n    FROM \"DWH\".\"dbo\".\"stg__cmis_dbo_ct00\"\n),\n\nderived_columns AS (\n\n    SELECT\n\n    stt_rec,\n    ma_dvcs,\n    loai_ct,\n    ma_ct,\n    ngay_ct,\n    ngay_lct,\n    so_ct,\n    so_ctgs,\n    ngay_ctgs,\n    so_lo,\n    ngay_lo,\n    ong_ba,\n    head_item,\n    dien_giai_h,\n    dien_giai,\n    nh_dk,\n    tk,\n    tk_du,\n    ps_no_nt,\n    ps_co_nt,\n    ma_nt,\n    ty_gia,\n    ps_no,\n    ps_co,\n    ma_kh,\n    ma_vv,\n    ma_nk,\n    ma_sp,\n    ma_bp,\n    so_lsx,\n    so_ct0,\n    ngay_ct0,\n    ct_nxt,\n    ma_gd,\n    nam,\n    ky,\n    gt_no,\n    gt_co,\n    gt_tinh,\n    gt_dd,\n    sua_tg_yn,\n    line_nbr,\n    status,\n    datetime0,\n    datetime2,\n    user_id0,\n    user_id2,\n    ma_hd,\n    ma_ku,\n    ma_phi,\n    so_dh,\n    ma_td1,\n    ma_td2,\n    ma_td3,\n    sl_td1,\n    sl_td2,\n    sl_td3,\n    ngay_td1,\n    ngay_td2,\n    ngay_td3,\n    gc_td1,\n    gc_td2,\n    gc_td3,\n    s1,\n    s2,\n    s3,\n    s4,\n    s5,\n    s6,\n    s7,\n    s8,\n    s9,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    DV_RECORD_SOURCE AS dv_recordsource,\n    cast( DV_APPLIED_DATE as DATETIME2(6)) AS dv_load_timestamp,\n    ma_vv AS opportunity_code,\n    stt_rec AS invoice_code,\n    line_nbr AS dv_cdk_l_opportunity_invoice,\n    'default' AS dv_tenant_id,\n    'default' AS dv_collisioncode\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    stt_rec,\n    ma_dvcs,\n    loai_ct,\n    ma_ct,\n    ngay_ct,\n    ngay_lct,\n    so_ct,\n    so_ctgs,\n    ngay_ctgs,\n    so_lo,\n    ngay_lo,\n    ong_ba,\n    head_item,\n    dien_giai_h,\n    dien_giai,\n    nh_dk,\n    tk,\n    tk_du,\n    ps_no_nt,\n    ps_co_nt,\n    ma_nt,\n    ty_gia,\n    ps_no,\n    ps_co,\n    ma_kh,\n    ma_vv,\n    ma_nk,\n    ma_sp,\n    ma_bp,\n    so_lsx,\n    so_ct0,\n    ngay_ct0,\n    ct_nxt,\n    ma_gd,\n    nam,\n    ky,\n    gt_no,\n    gt_co,\n    gt_tinh,\n    gt_dd,\n    sua_tg_yn,\n    line_nbr,\n    status,\n    datetime0,\n    datetime2,\n    user_id0,\n    user_id2,\n    ma_hd,\n    ma_ku,\n    ma_phi,\n    so_dh,\n    ma_td1,\n    ma_td2,\n    ma_td3,\n    sl_td1,\n    sl_td2,\n    sl_td3,\n    ngay_td1,\n    ngay_td2,\n    ngay_td3,\n    gc_td1,\n    gc_td2,\n    gc_td3,\n    s1,\n    s2,\n    s3,\n    s4,\n    s5,\n    s6,\n    s7,\n    s8,\n    s9,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    opportunity_code,\n    invoice_code,\n    dv_cdk_l_opportunity_invoice,\n    dv_tenant_id,\n    dv_collisioncode,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(opportunity_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_opportunity,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(invoice_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_invoice,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(invoice_code AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(opportunity_code AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_cdk_l_opportunity_invoice AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^||^^||^^')), 2) AS dv_hash_key_l_opportunity_invoice,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST([ngay_ct] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([ps_co] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([ps_no] AS VARCHAR(MAX)))), ''), '^^')\n    )), 2) AS dv_hashdiff_s_l_opportunity_invoice\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    stt_rec,\n    ma_dvcs,\n    loai_ct,\n    ma_ct,\n    ngay_ct,\n    ngay_lct,\n    so_ct,\n    so_ctgs,\n    ngay_ctgs,\n    so_lo,\n    ngay_lo,\n    ong_ba,\n    head_item,\n    dien_giai_h,\n    dien_giai,\n    nh_dk,\n    tk,\n    tk_du,\n    ps_no_nt,\n    ps_co_nt,\n    ma_nt,\n    ty_gia,\n    ps_no,\n    ps_co,\n    ma_kh,\n    ma_vv,\n    ma_nk,\n    ma_sp,\n    ma_bp,\n    so_lsx,\n    so_ct0,\n    ngay_ct0,\n    ct_nxt,\n    ma_gd,\n    nam,\n    ky,\n    gt_no,\n    gt_co,\n    gt_tinh,\n    gt_dd,\n    sua_tg_yn,\n    line_nbr,\n    status,\n    datetime0,\n    datetime2,\n    user_id0,\n    user_id2,\n    ma_hd,\n    ma_ku,\n    ma_phi,\n    so_dh,\n    ma_td1,\n    ma_td2,\n    ma_td3,\n    sl_td1,\n    sl_td2,\n    sl_td3,\n    ngay_td1,\n    ngay_td2,\n    ngay_td3,\n    gc_td1,\n    gc_td2,\n    gc_td3,\n    s1,\n    s2,\n    s3,\n    s4,\n    s5,\n    s6,\n    s7,\n    s8,\n    s9,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    opportunity_code,\n    invoice_code,\n    dv_cdk_l_opportunity_invoice,\n    dv_tenant_id,\n    dv_collisioncode,\n    dv_hash_key_h_opportunity,\n    dv_hash_key_h_invoice,\n    dv_hash_key_l_opportunity_invoice,\n    dv_hashdiff_s_l_opportunity_invoice\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_customers": {"database": "DWH", "schema": "dbo", "name": "hash__cmis_dbo_customers", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_customers.sql", "original_file_path": "models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_customers.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_customers", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "12_hash", "cmis", "hash__cmis_dbo_customers"], "alias": "hash__cmis_dbo_customers", "checksum": {"name": "sha256", "checksum": "a668cfd60ce80a110dac1c68eba6a3ed318f8c02e24a1eefb7ee675d47e1ac57"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_customers.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.8336484, "relation_name": "\"DWH\".\"dbo\".\"hash__cmis_dbo_customers\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"stg__cmis_dbo_customers\"\r\nderived_columns:\r\n  dv_recordsource: \"DV_RECORD_SOURCE\"\r\n  dv_load_timestamp: cast( DV_APPLIED_DATE as DATETIME2(6))\r\n  customer_code: cast(ID as VARCHAR(8000))\r\n  customer_code2: cast(Code as VARCHAR(8000))\r\n  dv_tenant_id: '!default'\r\n  dv_collisioncode: '!default'\r\nhashed_columns: \r\n    dv_hash_key_h_customer:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"customer_code\"\r\n    dv_hash_key_h_customer2:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"customer_code2\"\r\n    dv_hashdiff_s_h_customer:\r\n      is_hashdiff: true\r\n      columns:\r\n        - \"Name\"\r\n        - \"Address\"\r\n        - \"Phone\"\r\n        - \"Email\"\r\n        - \"CustomerTypeID\"\r\n        - \"IndustryTypeID\"\r\n        - \"EnvironmentTypeID\"\r\n        - \"ParentID\"\r\n    dv_hashdiff_s_h_customer_rt:\r\n      is_hashdiff: true\r\n      columns:\r\n        - \"DV_APPLIED_DATE\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.stage(include_source_columns=true,\r\n                  source_model=metadata_dict['source_model'],\r\n                  derived_columns=metadata_dict['derived_columns'],\r\n                  hashed_columns=metadata_dict['hashed_columns'],\r\n                  ranked_columns=none) }}", "language": "sql", "refs": [["stg__cmis_dbo_customers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_customers"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_customers.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n\n    SELECT\n\n    ID,\n    Code,\n    TaxCode,\n    Name,\n    Address,\n    Phone,\n    Fax,\n    Email,\n    Website,\n    Description,\n    PublishType,\n    Activate,\n    IsDeleted,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    BaseSource,\n    LastUpdateBase,\n    CustomerTypeID,\n    HasCredit,\n    CreditLimited,\n    IndustryTypeID,\n    DepartmentID,\n    EnvironmentTypeID,\n    ReasonsRefusal,\n    Image,\n    Thumb,\n    AccountHolder,\n    AccountNmuber,\n    Bank,\n    IsVip,\n    IsPeersSI,\n    IsCustomer,\n    IsProvided,\n    UserTAMID,\n    IsHidden,\n    PunishRatio,\n    NameEng,\n    AddressEng,\n    ParentID,\n    ParentCode,\n    ADN,\n    LastChildADN,\n    AmIDs,\n    Ams,\n    SubIDs,\n    Subs,\n    ChildCompanies,\n    CustomerTypeName,\n    AccountGroupID,\n    PartnerID,\n    CountryID,\n    CurrentURL,\n    TimeSync,\n    StatusSync,\n    CountSync,\n    DateGetData,\n    CompanyCode,\n    AccountGroupsCode,\n    EnvironmentTypesCode,\n    IndustryTypesCode,\n    PartnerCode,\n    CountryCode,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE\n\n    FROM \"DWH\".\"dbo\".\"stg__cmis_dbo_customers\"\n),\n\nderived_columns AS (\n\n    SELECT\n\n    ID,\n    Code,\n    TaxCode,\n    Name,\n    Address,\n    Phone,\n    Fax,\n    Email,\n    Website,\n    Description,\n    PublishType,\n    Activate,\n    IsDeleted,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    BaseSource,\n    LastUpdateBase,\n    CustomerTypeID,\n    HasCredit,\n    CreditLimited,\n    IndustryTypeID,\n    DepartmentID,\n    EnvironmentTypeID,\n    ReasonsRefusal,\n    Image,\n    Thumb,\n    AccountHolder,\n    AccountNmuber,\n    Bank,\n    IsVip,\n    IsPeersSI,\n    IsCustomer,\n    IsProvided,\n    UserTAMID,\n    IsHidden,\n    PunishRatio,\n    NameEng,\n    AddressEng,\n    ParentID,\n    ParentCode,\n    ADN,\n    LastChildADN,\n    AmIDs,\n    Ams,\n    SubIDs,\n    Subs,\n    ChildCompanies,\n    CustomerTypeName,\n    AccountGroupID,\n    PartnerID,\n    CountryID,\n    CurrentURL,\n    TimeSync,\n    StatusSync,\n    CountSync,\n    DateGetData,\n    CompanyCode,\n    AccountGroupsCode,\n    EnvironmentTypesCode,\n    IndustryTypesCode,\n    PartnerCode,\n    CountryCode,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    DV_RECORD_SOURCE AS dv_recordsource,\n    cast( DV_APPLIED_DATE as DATETIME2(6)) AS dv_load_timestamp,\n    cast(ID as VARCHAR(8000)) AS customer_code,\n    cast(Code as VARCHAR(8000)) AS customer_code2,\n    'default' AS dv_tenant_id,\n    'default' AS dv_collisioncode\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    ID,\n    Code,\n    TaxCode,\n    Name,\n    Address,\n    Phone,\n    Fax,\n    Email,\n    Website,\n    Description,\n    PublishType,\n    Activate,\n    IsDeleted,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    BaseSource,\n    LastUpdateBase,\n    CustomerTypeID,\n    HasCredit,\n    CreditLimited,\n    IndustryTypeID,\n    DepartmentID,\n    EnvironmentTypeID,\n    ReasonsRefusal,\n    Image,\n    Thumb,\n    AccountHolder,\n    AccountNmuber,\n    Bank,\n    IsVip,\n    IsPeersSI,\n    IsCustomer,\n    IsProvided,\n    UserTAMID,\n    IsHidden,\n    PunishRatio,\n    NameEng,\n    AddressEng,\n    ParentID,\n    ParentCode,\n    ADN,\n    LastChildADN,\n    AmIDs,\n    Ams,\n    SubIDs,\n    Subs,\n    ChildCompanies,\n    CustomerTypeName,\n    AccountGroupID,\n    PartnerID,\n    CountryID,\n    CurrentURL,\n    TimeSync,\n    StatusSync,\n    CountSync,\n    DateGetData,\n    CompanyCode,\n    AccountGroupsCode,\n    EnvironmentTypesCode,\n    IndustryTypesCode,\n    PartnerCode,\n    CountryCode,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    customer_code,\n    customer_code2,\n    dv_tenant_id,\n    dv_collisioncode,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(customer_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_customer,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(customer_code2 AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_customer2,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(Address AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(CustomerTypeID AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(Email AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(EnvironmentTypeID AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(IndustryTypeID AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(Name AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(ParentID AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(Phone AS VARCHAR(MAX)))), ''), '^^')\n    )), 2) AS dv_hashdiff_s_h_customer,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', ISNULL(NULLIF(UPPER(TRIM(CAST(DV_APPLIED_DATE AS VARCHAR(MAX)))), ''), '^^')), 2) AS dv_hashdiff_s_h_customer_rt\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    ID,\n    Code,\n    TaxCode,\n    Name,\n    Address,\n    Phone,\n    Fax,\n    Email,\n    Website,\n    Description,\n    PublishType,\n    Activate,\n    IsDeleted,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    BaseSource,\n    LastUpdateBase,\n    CustomerTypeID,\n    HasCredit,\n    CreditLimited,\n    IndustryTypeID,\n    DepartmentID,\n    EnvironmentTypeID,\n    ReasonsRefusal,\n    Image,\n    Thumb,\n    AccountHolder,\n    AccountNmuber,\n    Bank,\n    IsVip,\n    IsPeersSI,\n    IsCustomer,\n    IsProvided,\n    UserTAMID,\n    IsHidden,\n    PunishRatio,\n    NameEng,\n    AddressEng,\n    ParentID,\n    ParentCode,\n    ADN,\n    LastChildADN,\n    AmIDs,\n    Ams,\n    SubIDs,\n    Subs,\n    ChildCompanies,\n    CustomerTypeName,\n    AccountGroupID,\n    PartnerID,\n    CountryID,\n    CurrentURL,\n    TimeSync,\n    StatusSync,\n    CountSync,\n    DateGetData,\n    CompanyCode,\n    AccountGroupsCode,\n    EnvironmentTypesCode,\n    IndustryTypesCode,\n    PartnerCode,\n    CountryCode,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    customer_code,\n    customer_code2,\n    dv_tenant_id,\n    dv_collisioncode,\n    dv_hash_key_h_customer,\n    dv_hash_key_h_customer2,\n    dv_hashdiff_s_h_customer,\n    dv_hashdiff_s_h_customer_rt\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_estimatecontracts": {"database": "DWH", "schema": "dbo", "name": "hash__cmis_dbo_estimatecontracts", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_estimatecontracts.sql", "original_file_path": "models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_estimatecontracts.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_estimatecontracts", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "12_hash", "cmis", "hash__cmis_dbo_estimatecontracts"], "alias": "hash__cmis_dbo_estimatecontracts", "checksum": {"name": "sha256", "checksum": "e778a5c483d88e1fe776868776c9fb30e5c3b18f36b7fa6ec544b4b71675729b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_estimatecontracts.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.8816497, "relation_name": "\"DWH\".\"dbo\".\"hash__cmis_dbo_estimatecontracts\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"stg__cmis_dbo_estimatecontracts\"\r\nderived_columns:\r\n  dv_recordsource: \"DV_RECORD_SOURCE\"\r\n  dv_load_timestamp: cast( DV_APPLIED_DATE as DATETIME2(6))\r\n  opportunity_code: cast([OpportunityID] as VARCHAR(8000))\r\n  estimatecontract_code: cast([ID] as VARCHAR(8000))\r\n  dv_tenant_id: '!default'\r\n  dv_collisioncode: '!default'\r\nhashed_columns: \r\n    dv_hash_key_h_opportunity:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"opportunity_code\"\r\n    dv_hash_key_h_estimatecontract:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"estimatecontract_code\"\r\n    dv_hash_key_l_opportunity_estimatecontract:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"opportunity_code\"\r\n    - \"estimatecontract_code\"\r\n    dv_hashdiff_s_h_estimatecontract:\r\n      is_hashdiff: true\r\n      columns:\r\n        - \"[Profit]\"\r\n        - \"[Status]\"\r\n        - \"[Activate]\"\r\n        - \"[IsDeleted]\"\r\n        - \"[PublishType]\"\r\n        - \"[WFIsFinish]\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.stage(include_source_columns=true,\r\n                  source_model=metadata_dict['source_model'],\r\n                  derived_columns=metadata_dict['derived_columns'],\r\n                  hashed_columns=metadata_dict['hashed_columns'],\r\n                  ranked_columns=none) }}", "language": "sql", "refs": [["stg__cmis_dbo_estimatecontracts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_estimatecontracts"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_estimatecontracts.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n\n    SELECT\n\n    ID,\n    OpportunityID,\n    Code,\n    UserID,\n    GroupID,\n    Description,\n    Status,\n    Activate,\n    IsDeleted,\n    PublishType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    FileAttachments,\n    PaymentType,\n    RevenueNow,\n    RevenueDebt,\n    RewardFromSupplier,\n    ProductPrice,\n    RentPrice,\n    WarrantyVATPrice,\n    WarrantyExtPrice,\n    SupplierPrice,\n    LicensePrice,\n    MaterialPrice,\n    MaterialOtherPrice,\n    ConsultantPrice,\n    DeploymentPrice,\n    ProfitLender,\n    FinancialIncome,\n    ConsultantManday,\n    DeloymentManday,\n    MarketingPrice,\n    OtherPrice,\n    Revenue,\n    VariableCost,\n    Cost,\n    TotalMaterialCost,\n    TotalOtherMaterialCost,\n    CostByMoney,\n    WarrantyDetailCost,\n    TotalWarrantyPaymentPrice,\n    Profit,\n    TotalPrice,\n    TotalFinancial,\n    TotalManday,\n    TotalMarketing,\n    TotalOhters,\n    TotalProfit,\n    ProviderReward,\n    WFIsFinish,\n    WFStatusName,\n    WFProcessByID,\n    WFProcessByName,\n    Version,\n    OpportunityCode,\n    ContractID,\n    ContractCode,\n    BaseSource,\n    LastUpdateBase,\n    IsCustomerPeersSI,\n    WarrantyBHUQPrice,\n    TotalWarrantyBHUQPrice,\n    WarrantyPaymentPrice8x5,\n    WarrantyPaymentPrice24x7,\n    WarrantyPriceIncrease,\n    WarrantyPriceExtend,\n    WFFinishDate,\n    DeadlineDate,\n    ProductPriceDomestic,\n    ProductPriceForeign,\n    RateRisk,\n    IsITSOrBSGB,\n    IsRetail,\n    PercentBudgetRate,\n    IsSchedulePayment,\n    AcceptSchedulePayment,\n    SchedulePaymentDescription,\n    AcceptSPDate,\n    AcceptSPByID,\n    AcceptSPByName,\n    GroupADN,\n    TechnologicalCapability,\n    ProjectReward,\n    Url,\n    IsSync,\n    DateSync,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE\n\n    FROM \"DWH\".\"dbo\".\"stg__cmis_dbo_estimatecontracts\"\n),\n\nderived_columns AS (\n\n    SELECT\n\n    ID,\n    OpportunityID,\n    Code,\n    UserID,\n    GroupID,\n    Description,\n    Status,\n    Activate,\n    IsDeleted,\n    PublishType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    FileAttachments,\n    PaymentType,\n    RevenueNow,\n    RevenueDebt,\n    RewardFromSupplier,\n    ProductPrice,\n    RentPrice,\n    WarrantyVATPrice,\n    WarrantyExtPrice,\n    SupplierPrice,\n    LicensePrice,\n    MaterialPrice,\n    MaterialOtherPrice,\n    ConsultantPrice,\n    DeploymentPrice,\n    ProfitLender,\n    FinancialIncome,\n    ConsultantManday,\n    DeloymentManday,\n    MarketingPrice,\n    OtherPrice,\n    Revenue,\n    VariableCost,\n    Cost,\n    TotalMaterialCost,\n    TotalOtherMaterialCost,\n    CostByMoney,\n    WarrantyDetailCost,\n    TotalWarrantyPaymentPrice,\n    Profit,\n    TotalPrice,\n    TotalFinancial,\n    TotalManday,\n    TotalMarketing,\n    TotalOhters,\n    TotalProfit,\n    ProviderReward,\n    WFIsFinish,\n    WFStatusName,\n    WFProcessByID,\n    WFProcessByName,\n    Version,\n    OpportunityCode,\n    ContractID,\n    ContractCode,\n    BaseSource,\n    LastUpdateBase,\n    IsCustomerPeersSI,\n    WarrantyBHUQPrice,\n    TotalWarrantyBHUQPrice,\n    WarrantyPaymentPrice8x5,\n    WarrantyPaymentPrice24x7,\n    WarrantyPriceIncrease,\n    WarrantyPriceExtend,\n    WFFinishDate,\n    DeadlineDate,\n    ProductPriceDomestic,\n    ProductPriceForeign,\n    RateRisk,\n    IsITSOrBSGB,\n    IsRetail,\n    PercentBudgetRate,\n    IsSchedulePayment,\n    AcceptSchedulePayment,\n    SchedulePaymentDescription,\n    AcceptSPDate,\n    AcceptSPByID,\n    AcceptSPByName,\n    GroupADN,\n    TechnologicalCapability,\n    ProjectReward,\n    Url,\n    IsSync,\n    DateSync,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    DV_RECORD_SOURCE AS dv_recordsource,\n    cast( DV_APPLIED_DATE as DATETIME2(6)) AS dv_load_timestamp,\n    cast([OpportunityID] as VARCHAR(8000)) AS opportunity_code,\n    cast([ID] as VARCHAR(8000)) AS estimatecontract_code,\n    'default' AS dv_tenant_id,\n    'default' AS dv_collisioncode\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    ID,\n    OpportunityID,\n    Code,\n    UserID,\n    GroupID,\n    Description,\n    Status,\n    Activate,\n    IsDeleted,\n    PublishType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    FileAttachments,\n    PaymentType,\n    RevenueNow,\n    RevenueDebt,\n    RewardFromSupplier,\n    ProductPrice,\n    RentPrice,\n    WarrantyVATPrice,\n    WarrantyExtPrice,\n    SupplierPrice,\n    LicensePrice,\n    MaterialPrice,\n    MaterialOtherPrice,\n    ConsultantPrice,\n    DeploymentPrice,\n    ProfitLender,\n    FinancialIncome,\n    ConsultantManday,\n    DeloymentManday,\n    MarketingPrice,\n    OtherPrice,\n    Revenue,\n    VariableCost,\n    Cost,\n    TotalMaterialCost,\n    TotalOtherMaterialCost,\n    CostByMoney,\n    WarrantyDetailCost,\n    TotalWarrantyPaymentPrice,\n    Profit,\n    TotalPrice,\n    TotalFinancial,\n    TotalManday,\n    TotalMarketing,\n    TotalOhters,\n    TotalProfit,\n    ProviderReward,\n    WFIsFinish,\n    WFStatusName,\n    WFProcessByID,\n    WFProcessByName,\n    Version,\n    OpportunityCode,\n    ContractID,\n    ContractCode,\n    BaseSource,\n    LastUpdateBase,\n    IsCustomerPeersSI,\n    WarrantyBHUQPrice,\n    TotalWarrantyBHUQPrice,\n    WarrantyPaymentPrice8x5,\n    WarrantyPaymentPrice24x7,\n    WarrantyPriceIncrease,\n    WarrantyPriceExtend,\n    WFFinishDate,\n    DeadlineDate,\n    ProductPriceDomestic,\n    ProductPriceForeign,\n    RateRisk,\n    IsITSOrBSGB,\n    IsRetail,\n    PercentBudgetRate,\n    IsSchedulePayment,\n    AcceptSchedulePayment,\n    SchedulePaymentDescription,\n    AcceptSPDate,\n    AcceptSPByID,\n    AcceptSPByName,\n    GroupADN,\n    TechnologicalCapability,\n    ProjectReward,\n    Url,\n    IsSync,\n    DateSync,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    opportunity_code,\n    estimatecontract_code,\n    dv_tenant_id,\n    dv_collisioncode,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(opportunity_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_opportunity,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(estimatecontract_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_estimatecontract,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(opportunity_code AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(estimatecontract_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^||^^')), 2) AS dv_hash_key_l_opportunity_estimatecontract,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST([Activate] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([IsDeleted] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([Profit] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([PublishType] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([Status] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([WFIsFinish] AS VARCHAR(MAX)))), ''), '^^')\n    )), 2) AS dv_hashdiff_s_h_estimatecontract\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    ID,\n    OpportunityID,\n    Code,\n    UserID,\n    GroupID,\n    Description,\n    Status,\n    Activate,\n    IsDeleted,\n    PublishType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    FileAttachments,\n    PaymentType,\n    RevenueNow,\n    RevenueDebt,\n    RewardFromSupplier,\n    ProductPrice,\n    RentPrice,\n    WarrantyVATPrice,\n    WarrantyExtPrice,\n    SupplierPrice,\n    LicensePrice,\n    MaterialPrice,\n    MaterialOtherPrice,\n    ConsultantPrice,\n    DeploymentPrice,\n    ProfitLender,\n    FinancialIncome,\n    ConsultantManday,\n    DeloymentManday,\n    MarketingPrice,\n    OtherPrice,\n    Revenue,\n    VariableCost,\n    Cost,\n    TotalMaterialCost,\n    TotalOtherMaterialCost,\n    CostByMoney,\n    WarrantyDetailCost,\n    TotalWarrantyPaymentPrice,\n    Profit,\n    TotalPrice,\n    TotalFinancial,\n    TotalManday,\n    TotalMarketing,\n    TotalOhters,\n    TotalProfit,\n    ProviderReward,\n    WFIsFinish,\n    WFStatusName,\n    WFProcessByID,\n    WFProcessByName,\n    Version,\n    OpportunityCode,\n    ContractID,\n    ContractCode,\n    BaseSource,\n    LastUpdateBase,\n    IsCustomerPeersSI,\n    WarrantyBHUQPrice,\n    TotalWarrantyBHUQPrice,\n    WarrantyPaymentPrice8x5,\n    WarrantyPaymentPrice24x7,\n    WarrantyPriceIncrease,\n    WarrantyPriceExtend,\n    WFFinishDate,\n    DeadlineDate,\n    ProductPriceDomestic,\n    ProductPriceForeign,\n    RateRisk,\n    IsITSOrBSGB,\n    IsRetail,\n    PercentBudgetRate,\n    IsSchedulePayment,\n    AcceptSchedulePayment,\n    SchedulePaymentDescription,\n    AcceptSPDate,\n    AcceptSPByID,\n    AcceptSPByName,\n    GroupADN,\n    TechnologicalCapability,\n    ProjectReward,\n    Url,\n    IsSync,\n    DateSync,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    opportunity_code,\n    estimatecontract_code,\n    dv_tenant_id,\n    dv_collisioncode,\n    dv_hash_key_h_opportunity,\n    dv_hash_key_h_estimatecontract,\n    dv_hash_key_l_opportunity_estimatecontract,\n    dv_hashdiff_s_h_estimatecontract\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_finalizationcontracts": {"database": "DWH", "schema": "dbo", "name": "hash__cmis_dbo_finalizationcontracts", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_finalizationcontracts.sql", "original_file_path": "models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_finalizationcontracts.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_finalizationcontracts", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "12_hash", "cmis", "hash__cmis_dbo_finalizationcontracts"], "alias": "hash__cmis_dbo_finalizationcontracts", "checksum": {"name": "sha256", "checksum": "f817690b7b584a3e0889871a4806a6263392167bc899017da6a8710abcddc2b1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_finalizationcontracts.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.9336507, "relation_name": "\"DWH\".\"dbo\".\"hash__cmis_dbo_finalizationcontracts\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"stg__cmis_dbo_finalizationcontracts\"\r\nderived_columns:\r\n  dv_recordsource: \"DV_RECORD_SOURCE\"\r\n  dv_load_timestamp: cast( DV_APPLIED_DATE as DATETIME2(6))\r\n  opportunity_code: cast([OpportunityID] as VARCHAR(8000))\r\n  finalizationcontract_code: cast([ID] as VARCHAR(8000))\r\n  dv_tenant_id: '!default'\r\n  dv_collisioncode: '!default'\r\nhashed_columns: \r\n    dv_hash_key_h_opportunity:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"opportunity_code\"\r\n    dv_hash_key_h_finalizationcontract:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"finalizationcontract_code\"\r\n    dv_hash_key_l_opportunity_finalizationcontract:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"opportunity_code\"\r\n    - \"finalizationcontract_code\"\r\n    dv_hashdiff_s_h_finalizationcontract:\r\n      is_hashdiff: true\r\n      columns:\r\n        - \"[Profit]\"\r\n        - \"[FinalizationContractType]\"\r\n        - \"[ModifiedDate]\"\r\n        - \"[WFIsFinish]\"\r\n        - \"[Activate]\"\r\n        - \"[IsDeleted]\"\r\n        - \"[PublishType]\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.stage(include_source_columns=true,\r\n                  source_model=metadata_dict['source_model'],\r\n                  derived_columns=metadata_dict['derived_columns'],\r\n                  hashed_columns=metadata_dict['hashed_columns'],\r\n                  ranked_columns=none) }}", "language": "sql", "refs": [["stg__cmis_dbo_finalizationcontracts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_finalizationcontracts"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_finalizationcontracts.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n\n    SELECT\n\n    ID,\n    OpportunityID,\n    Code,\n    UserID,\n    GroupID,\n    Description,\n    Activate,\n    IsDeleted,\n    PublishType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    FileAttachments,\n    BusinessPlanID,\n    EstimateContractID,\n    TotalPrice,\n    WFIsFinish,\n    WFStatusName,\n    WFProcessByID,\n    WFProcessByName,\n    Version,\n    BaseSource,\n    LastUpdateBase,\n    TotalPriceEstimate,\n    Revenue,\n    WareReturn,\n    RevenueProfit,\n    VariableCost,\n    Cost,\n    TotalWareReturn,\n    TotalMaterialCost,\n    TotalOtherMaterialCost,\n    CostByMoney,\n    WarrantyDetailCost,\n    TotalWarrantyPaymentPrice,\n    WarrantyBHUQ,\n    Profit,\n    TotalFinancial,\n    TotalManday,\n    TotalMarketing,\n    TotalOhters,\n    TotalProfit,\n    FinalizationContractType,\n    WFFinishDate,\n    DeadlineDate,\n    EstimateTotalPrice,\n    OpportunityCode,\n    GroupADN,\n    FinanceYear,\n    EnoughDate,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE\n\n    FROM \"DWH\".\"dbo\".\"stg__cmis_dbo_finalizationcontracts\"\n),\n\nderived_columns AS (\n\n    SELECT\n\n    ID,\n    OpportunityID,\n    Code,\n    UserID,\n    GroupID,\n    Description,\n    Activate,\n    IsDeleted,\n    PublishType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    FileAttachments,\n    BusinessPlanID,\n    EstimateContractID,\n    TotalPrice,\n    WFIsFinish,\n    WFStatusName,\n    WFProcessByID,\n    WFProcessByName,\n    Version,\n    BaseSource,\n    LastUpdateBase,\n    TotalPriceEstimate,\n    Revenue,\n    WareReturn,\n    RevenueProfit,\n    VariableCost,\n    Cost,\n    TotalWareReturn,\n    TotalMaterialCost,\n    TotalOtherMaterialCost,\n    CostByMoney,\n    WarrantyDetailCost,\n    TotalWarrantyPaymentPrice,\n    WarrantyBHUQ,\n    Profit,\n    TotalFinancial,\n    TotalManday,\n    TotalMarketing,\n    TotalOhters,\n    TotalProfit,\n    FinalizationContractType,\n    WFFinishDate,\n    DeadlineDate,\n    EstimateTotalPrice,\n    OpportunityCode,\n    GroupADN,\n    FinanceYear,\n    EnoughDate,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    DV_RECORD_SOURCE AS dv_recordsource,\n    cast( DV_APPLIED_DATE as DATETIME2(6)) AS dv_load_timestamp,\n    cast([OpportunityID] as VARCHAR(8000)) AS opportunity_code,\n    cast([ID] as VARCHAR(8000)) AS finalizationcontract_code,\n    'default' AS dv_tenant_id,\n    'default' AS dv_collisioncode\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    ID,\n    OpportunityID,\n    Code,\n    UserID,\n    GroupID,\n    Description,\n    Activate,\n    IsDeleted,\n    PublishType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    FileAttachments,\n    BusinessPlanID,\n    EstimateContractID,\n    TotalPrice,\n    WFIsFinish,\n    WFStatusName,\n    WFProcessByID,\n    WFProcessByName,\n    Version,\n    BaseSource,\n    LastUpdateBase,\n    TotalPriceEstimate,\n    Revenue,\n    WareReturn,\n    RevenueProfit,\n    VariableCost,\n    Cost,\n    TotalWareReturn,\n    TotalMaterialCost,\n    TotalOtherMaterialCost,\n    CostByMoney,\n    WarrantyDetailCost,\n    TotalWarrantyPaymentPrice,\n    WarrantyBHUQ,\n    Profit,\n    TotalFinancial,\n    TotalManday,\n    TotalMarketing,\n    TotalOhters,\n    TotalProfit,\n    FinalizationContractType,\n    WFFinishDate,\n    DeadlineDate,\n    EstimateTotalPrice,\n    OpportunityCode,\n    GroupADN,\n    FinanceYear,\n    EnoughDate,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    opportunity_code,\n    finalizationcontract_code,\n    dv_tenant_id,\n    dv_collisioncode,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(opportunity_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_opportunity,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(finalizationcontract_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_finalizationcontract,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(opportunity_code AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(finalizationcontract_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^||^^')), 2) AS dv_hash_key_l_opportunity_finalizationcontract,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST([Activate] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([FinalizationContractType] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([IsDeleted] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([ModifiedDate] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([Profit] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([PublishType] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([WFIsFinish] AS VARCHAR(MAX)))), ''), '^^')\n    )), 2) AS dv_hashdiff_s_h_finalizationcontract\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    ID,\n    OpportunityID,\n    Code,\n    UserID,\n    GroupID,\n    Description,\n    Activate,\n    IsDeleted,\n    PublishType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    FileAttachments,\n    BusinessPlanID,\n    EstimateContractID,\n    TotalPrice,\n    WFIsFinish,\n    WFStatusName,\n    WFProcessByID,\n    WFProcessByName,\n    Version,\n    BaseSource,\n    LastUpdateBase,\n    TotalPriceEstimate,\n    Revenue,\n    WareReturn,\n    RevenueProfit,\n    VariableCost,\n    Cost,\n    TotalWareReturn,\n    TotalMaterialCost,\n    TotalOtherMaterialCost,\n    CostByMoney,\n    WarrantyDetailCost,\n    TotalWarrantyPaymentPrice,\n    WarrantyBHUQ,\n    Profit,\n    TotalFinancial,\n    TotalManday,\n    TotalMarketing,\n    TotalOhters,\n    TotalProfit,\n    FinalizationContractType,\n    WFFinishDate,\n    DeadlineDate,\n    EstimateTotalPrice,\n    OpportunityCode,\n    GroupADN,\n    FinanceYear,\n    EnoughDate,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    opportunity_code,\n    finalizationcontract_code,\n    dv_tenant_id,\n    dv_collisioncode,\n    dv_hash_key_h_opportunity,\n    dv_hash_key_h_finalizationcontract,\n    dv_hash_key_l_opportunity_finalizationcontract,\n    dv_hashdiff_s_h_finalizationcontract\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_groups": {"database": "DWH", "schema": "dbo", "name": "hash__cmis_dbo_groups", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_groups.sql", "original_file_path": "models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_groups.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_groups", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "12_hash", "cmis", "hash__cmis_dbo_groups"], "alias": "hash__cmis_dbo_groups", "checksum": {"name": "sha256", "checksum": "ff2763b25b790b42e72de275b11fc411e31fbabd2855ca84c8cc82bf25079ed3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_groups.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307659.9846487, "relation_name": "\"DWH\".\"dbo\".\"hash__cmis_dbo_groups\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"stg__cmis_dbo_groups\"\r\nderived_columns:\r\n  dv_recordsource: \"DV_RECORD_SOURCE\"\r\n  dv_load_timestamp: cast( DV_APPLIED_DATE as DATETIME2(6))\r\n  department_code: cast(ID as VARCHAR(8000))\r\n  dv_tenant_id: '!default'\r\n  dv_collisioncode: '!default'\r\nhashed_columns: \r\n    dv_hash_key_h_department:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"department_code\"\r\n    dv_hashdiff_s_h_department:\r\n      is_hashdiff: true\r\n      columns:\r\n        - \"[ID]\"\r\n        - \"[GroupName]\"\r\n        - \"[GroupCode]\"\r\n        - \"[Year]\"\r\n        - \"[ParentID]\"\r\n        - \"[IsActive]\"\r\n        - \"[IsVirtual]\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.stage(include_source_columns=true,\r\n                  source_model=metadata_dict['source_model'],\r\n                  derived_columns=metadata_dict['derived_columns'],\r\n                  hashed_columns=metadata_dict['hashed_columns'],\r\n                  ranked_columns=none) }}", "language": "sql", "refs": [["stg__cmis_dbo_groups"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_groups"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_groups.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n\n    SELECT\n\n    ID,\n    GroupName,\n    GroupCode,\n    Description,\n    CreatedDate,\n    NumberIndex,\n    ParentID,\n    IsActive,\n    ADN,\n    LastChildADN,\n    GroupType,\n    CreatedByName,\n    CreatedByID,\n    PrefixCode,\n    Color,\n    ExtendParentID,\n    ExtendParentADN,\n    ExtendPrefixCode,\n    Year,\n    GroupTitleID,\n    Title,\n    IsVirtual,\n    AccountingNumber,\n    FastCode,\n    GroupNameEN,\n    MarketOffering,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE\n\n    FROM \"DWH\".\"dbo\".\"stg__cmis_dbo_groups\"\n),\n\nderived_columns AS (\n\n    SELECT\n\n    ID,\n    GroupName,\n    GroupCode,\n    Description,\n    CreatedDate,\n    NumberIndex,\n    ParentID,\n    IsActive,\n    ADN,\n    LastChildADN,\n    GroupType,\n    CreatedByName,\n    CreatedByID,\n    PrefixCode,\n    Color,\n    ExtendParentID,\n    ExtendParentADN,\n    ExtendPrefixCode,\n    Year,\n    GroupTitleID,\n    Title,\n    IsVirtual,\n    AccountingNumber,\n    FastCode,\n    GroupNameEN,\n    MarketOffering,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    DV_RECORD_SOURCE AS dv_recordsource,\n    cast( DV_APPLIED_DATE as DATETIME2(6)) AS dv_load_timestamp,\n    cast(ID as VARCHAR(8000)) AS department_code,\n    'default' AS dv_tenant_id,\n    'default' AS dv_collisioncode\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    ID,\n    GroupName,\n    GroupCode,\n    Description,\n    CreatedDate,\n    NumberIndex,\n    ParentID,\n    IsActive,\n    ADN,\n    LastChildADN,\n    GroupType,\n    CreatedByName,\n    CreatedByID,\n    PrefixCode,\n    Color,\n    ExtendParentID,\n    ExtendParentADN,\n    ExtendPrefixCode,\n    Year,\n    GroupTitleID,\n    Title,\n    IsVirtual,\n    AccountingNumber,\n    FastCode,\n    GroupNameEN,\n    MarketOffering,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    department_code,\n    dv_tenant_id,\n    dv_collisioncode,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(department_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_department,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST([GroupCode] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([GroupName] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([ID] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([IsActive] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([IsVirtual] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([ParentID] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([Year] AS VARCHAR(MAX)))), ''), '^^')\n    )), 2) AS dv_hashdiff_s_h_department\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    ID,\n    GroupName,\n    GroupCode,\n    Description,\n    CreatedDate,\n    NumberIndex,\n    ParentID,\n    IsActive,\n    ADN,\n    LastChildADN,\n    GroupType,\n    CreatedByName,\n    CreatedByID,\n    PrefixCode,\n    Color,\n    ExtendParentID,\n    ExtendParentADN,\n    ExtendPrefixCode,\n    Year,\n    GroupTitleID,\n    Title,\n    IsVirtual,\n    AccountingNumber,\n    FastCode,\n    GroupNameEN,\n    MarketOffering,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    department_code,\n    dv_tenant_id,\n    dv_collisioncode,\n    dv_hash_key_h_department,\n    dv_hashdiff_s_h_department\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_opportunities": {"database": "DWH", "schema": "dbo", "name": "hash__cmis_dbo_opportunities", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_opportunities.sql", "original_file_path": "models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_opportunities.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_opportunities", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "12_hash", "cmis", "hash__cmis_dbo_opportunities"], "alias": "hash__cmis_dbo_opportunities", "checksum": {"name": "sha256", "checksum": "b4ea835f06700e4f94b29a5e7cc052c4012b0cb40ab7785af6746ab79851c88a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_opportunities.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307660.0216498, "relation_name": "\"DWH\".\"dbo\".\"hash__cmis_dbo_opportunities\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"stg__cmis_dbo_opportunities\"\r\nderived_columns:\r\n  dv_recordsource: \"DV_RECORD_SOURCE\"\r\n  dv_load_timestamp: cast( DV_APPLIED_DATE as DATETIME2(6))\r\n  opportunity_code: cast(ID as VARCHAR(8000))\r\n  customer_code: cast(CustomerID as VARCHAR(8000))\r\n  user_code: cast(SaleManID as VARCHAR(8000))\r\n  department_code: cast(GroupID as VARCHAR(8000))\r\n  dv_tenant_id: '!default'\r\n  dv_collisioncode: '!default'\r\nhashed_columns: \r\n    dv_hash_key_h_opportunity:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"opportunity_code\"\r\n    dv_hash_key_h_customer:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"customer_code\"\r\n    dv_hash_key_h_user:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"user_code\"\r\n    dv_hash_key_h_department:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"department_code\"\r\n    dv_hash_key_l_opportunity_customer_user_department:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"opportunity_code\"\r\n    - \"customer_code\"\r\n    - \"user_code\"\r\n    - \"department_code\"\r\n    dv_hashdiff_s_h_opportunity:\r\n      is_hashdiff: true\r\n      columns:\r\n        - \"[OpportunityType]\"\r\n        - \"[EstimateRevenue]\"\r\n        - \"[StatusID]\"\r\n        - \"[PublishType]\"\r\n        - \"[Activate]\"\r\n        - \"[IsDeleted]\"\r\n        - \"[ParentID]\"\r\n        - \"[BusinessOpportunityID]\"\r\n        - \"[CreatedDate]\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.stage(include_source_columns=true,\r\n                  source_model=metadata_dict['source_model'],\r\n                  derived_columns=metadata_dict['derived_columns'],\r\n                  hashed_columns=metadata_dict['hashed_columns'],\r\n                  ranked_columns=none) }}", "language": "sql", "refs": [["stg__cmis_dbo_opportunities"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_opportunities"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_opportunities.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n\n    SELECT\n\n    ID,\n    Code,\n    CustomerID,\n    SaleManID,\n    OpportunityType,\n    GroupID,\n    EstimateRevenue,\n    Description,\n    StatusID,\n    PublishType,\n    Activate,\n    IsDeleted,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    ParentID,\n    BusinessOpportunityID,\n    CustomerName,\n    BaseSource,\n    LastUpdateBase,\n    ParentIndex,\n    IsParent,\n    IsLockFinance,\n    ExpiryDate,\n    FinancialYear,\n    CustomerCode,\n    SaleManUserName,\n    SaleManFullName,\n    GroupCode,\n    GroupName,\n    EstimateRevenueExist,\n    Common,\n    ProductManagerID,\n    ProductManagerUserName,\n    ProductManagerFullName,\n    IsFinish,\n    BoxmovingType,\n    OrderID,\n    Url,\n    IsSync,\n    DateSync,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE\n\n    FROM \"DWH\".\"dbo\".\"stg__cmis_dbo_opportunities\"\n),\n\nderived_columns AS (\n\n    SELECT\n\n    ID,\n    Code,\n    CustomerID,\n    SaleManID,\n    OpportunityType,\n    GroupID,\n    EstimateRevenue,\n    Description,\n    StatusID,\n    PublishType,\n    Activate,\n    IsDeleted,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    ParentID,\n    BusinessOpportunityID,\n    CustomerName,\n    BaseSource,\n    LastUpdateBase,\n    ParentIndex,\n    IsParent,\n    IsLockFinance,\n    ExpiryDate,\n    FinancialYear,\n    CustomerCode,\n    SaleManUserName,\n    SaleManFullName,\n    GroupCode,\n    GroupName,\n    EstimateRevenueExist,\n    Common,\n    ProductManagerID,\n    ProductManagerUserName,\n    ProductManagerFullName,\n    IsFinish,\n    BoxmovingType,\n    OrderID,\n    Url,\n    IsSync,\n    DateSync,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    DV_RECORD_SOURCE AS dv_recordsource,\n    cast( DV_APPLIED_DATE as DATETIME2(6)) AS dv_load_timestamp,\n    cast(ID as VARCHAR(8000)) AS opportunity_code,\n    cast(CustomerID as VARCHAR(8000)) AS customer_code,\n    cast(SaleManID as VARCHAR(8000)) AS user_code,\n    cast(GroupID as VARCHAR(8000)) AS department_code,\n    'default' AS dv_tenant_id,\n    'default' AS dv_collisioncode\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    ID,\n    Code,\n    CustomerID,\n    SaleManID,\n    OpportunityType,\n    GroupID,\n    EstimateRevenue,\n    Description,\n    StatusID,\n    PublishType,\n    Activate,\n    IsDeleted,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    ParentID,\n    BusinessOpportunityID,\n    CustomerName,\n    BaseSource,\n    LastUpdateBase,\n    ParentIndex,\n    IsParent,\n    IsLockFinance,\n    ExpiryDate,\n    FinancialYear,\n    CustomerCode,\n    SaleManUserName,\n    SaleManFullName,\n    GroupCode,\n    GroupName,\n    EstimateRevenueExist,\n    Common,\n    ProductManagerID,\n    ProductManagerUserName,\n    ProductManagerFullName,\n    IsFinish,\n    BoxmovingType,\n    OrderID,\n    Url,\n    IsSync,\n    DateSync,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    opportunity_code,\n    customer_code,\n    user_code,\n    department_code,\n    dv_tenant_id,\n    dv_collisioncode,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(opportunity_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_opportunity,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(customer_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_customer,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(user_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_user,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(department_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_department,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(opportunity_code AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(customer_code AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(user_code AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(department_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^||^^||^^||^^')), 2) AS dv_hash_key_l_opportunity_customer_user_department,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST([Activate] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([BusinessOpportunityID] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([CreatedDate] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([EstimateRevenue] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([IsDeleted] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([OpportunityType] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([ParentID] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([PublishType] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([StatusID] AS VARCHAR(MAX)))), ''), '^^')\n    )), 2) AS dv_hashdiff_s_h_opportunity\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    ID,\n    Code,\n    CustomerID,\n    SaleManID,\n    OpportunityType,\n    GroupID,\n    EstimateRevenue,\n    Description,\n    StatusID,\n    PublishType,\n    Activate,\n    IsDeleted,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    ParentID,\n    BusinessOpportunityID,\n    CustomerName,\n    BaseSource,\n    LastUpdateBase,\n    ParentIndex,\n    IsParent,\n    IsLockFinance,\n    ExpiryDate,\n    FinancialYear,\n    CustomerCode,\n    SaleManUserName,\n    SaleManFullName,\n    GroupCode,\n    GroupName,\n    EstimateRevenueExist,\n    Common,\n    ProductManagerID,\n    ProductManagerUserName,\n    ProductManagerFullName,\n    IsFinish,\n    BoxmovingType,\n    OrderID,\n    Url,\n    IsSync,\n    DateSync,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    opportunity_code,\n    customer_code,\n    user_code,\n    department_code,\n    dv_tenant_id,\n    dv_collisioncode,\n    dv_hash_key_h_opportunity,\n    dv_hash_key_h_customer,\n    dv_hash_key_h_user,\n    dv_hash_key_h_department,\n    dv_hash_key_l_opportunity_customer_user_department,\n    dv_hashdiff_s_h_opportunity\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_opportunities2": {"database": "DWH", "schema": "dbo", "name": "hash__cmis_dbo_opportunities2", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_opportunities2.sql", "original_file_path": "models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_opportunities2.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_opportunities2", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "12_hash", "cmis", "hash__cmis_dbo_opportunities2"], "alias": "hash__cmis_dbo_opportunities2", "checksum": {"name": "sha256", "checksum": "e23cef5eba133a0c07861b4c08cf1124704fa2f99b1f524e8fe5217999fe74c1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_opportunities2.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307660.0916488, "relation_name": "\"DWH\".\"dbo\".\"hash__cmis_dbo_opportunities2\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"stg__cmis_dbo_opportunities\"\r\nderived_columns:\r\n  dv_recordsource: \"DV_RECORD_SOURCE\"\r\n  dv_load_timestamp: cast( DV_APPLIED_DATE as DATETIME2(6))\r\n  opportunity_code: cast(Code as VARCHAR(8000))\r\n  dv_tenant_id: '!default'\r\n  dv_collisioncode: '!default'\r\nhashed_columns: \r\n    dv_hash_key_h_opportunity:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"opportunity_code\"\r\n    dv_hash_key_l_opportunity_sa:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"ID\"\r\n    - \"Code\"\r\n    dv_master_hash_key_h_opportunity:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"Code\"\r\n    dv_duplicate_hash_key_h_opportunity:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"ID\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.stage(include_source_columns=true,\r\n                  source_model=metadata_dict['source_model'],\r\n                  derived_columns=metadata_dict['derived_columns'],\r\n                  hashed_columns=metadata_dict['hashed_columns'],\r\n                  ranked_columns=none) }}", "language": "sql", "refs": [["stg__cmis_dbo_opportunities"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_opportunities"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_opportunities2.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n\n    SELECT\n\n    ID,\n    Code,\n    CustomerID,\n    SaleManID,\n    OpportunityType,\n    GroupID,\n    EstimateRevenue,\n    Description,\n    StatusID,\n    PublishType,\n    Activate,\n    IsDeleted,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    ParentID,\n    BusinessOpportunityID,\n    CustomerName,\n    BaseSource,\n    LastUpdateBase,\n    ParentIndex,\n    IsParent,\n    IsLockFinance,\n    ExpiryDate,\n    FinancialYear,\n    CustomerCode,\n    SaleManUserName,\n    SaleManFullName,\n    GroupCode,\n    GroupName,\n    EstimateRevenueExist,\n    Common,\n    ProductManagerID,\n    ProductManagerUserName,\n    ProductManagerFullName,\n    IsFinish,\n    BoxmovingType,\n    OrderID,\n    Url,\n    IsSync,\n    DateSync,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE\n\n    FROM \"DWH\".\"dbo\".\"stg__cmis_dbo_opportunities\"\n),\n\nderived_columns AS (\n\n    SELECT\n\n    ID,\n    Code,\n    CustomerID,\n    SaleManID,\n    OpportunityType,\n    GroupID,\n    EstimateRevenue,\n    Description,\n    StatusID,\n    PublishType,\n    Activate,\n    IsDeleted,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    ParentID,\n    BusinessOpportunityID,\n    CustomerName,\n    BaseSource,\n    LastUpdateBase,\n    ParentIndex,\n    IsParent,\n    IsLockFinance,\n    ExpiryDate,\n    FinancialYear,\n    CustomerCode,\n    SaleManUserName,\n    SaleManFullName,\n    GroupCode,\n    GroupName,\n    EstimateRevenueExist,\n    Common,\n    ProductManagerID,\n    ProductManagerUserName,\n    ProductManagerFullName,\n    IsFinish,\n    BoxmovingType,\n    OrderID,\n    Url,\n    IsSync,\n    DateSync,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    DV_RECORD_SOURCE AS dv_recordsource,\n    cast( DV_APPLIED_DATE as DATETIME2(6)) AS dv_load_timestamp,\n    cast(Code as VARCHAR(8000)) AS opportunity_code,\n    'default' AS dv_tenant_id,\n    'default' AS dv_collisioncode\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    ID,\n    Code,\n    CustomerID,\n    SaleManID,\n    OpportunityType,\n    GroupID,\n    EstimateRevenue,\n    Description,\n    StatusID,\n    PublishType,\n    Activate,\n    IsDeleted,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    ParentID,\n    BusinessOpportunityID,\n    CustomerName,\n    BaseSource,\n    LastUpdateBase,\n    ParentIndex,\n    IsParent,\n    IsLockFinance,\n    ExpiryDate,\n    FinancialYear,\n    CustomerCode,\n    SaleManUserName,\n    SaleManFullName,\n    GroupCode,\n    GroupName,\n    EstimateRevenueExist,\n    Common,\n    ProductManagerID,\n    ProductManagerUserName,\n    ProductManagerFullName,\n    IsFinish,\n    BoxmovingType,\n    OrderID,\n    Url,\n    IsSync,\n    DateSync,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    opportunity_code,\n    dv_tenant_id,\n    dv_collisioncode,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(opportunity_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_opportunity,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(ID AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(Code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^||^^')), 2) AS dv_hash_key_l_opportunity_sa,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(Code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_master_hash_key_h_opportunity,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(ID AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_duplicate_hash_key_h_opportunity\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    ID,\n    Code,\n    CustomerID,\n    SaleManID,\n    OpportunityType,\n    GroupID,\n    EstimateRevenue,\n    Description,\n    StatusID,\n    PublishType,\n    Activate,\n    IsDeleted,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    ParentID,\n    BusinessOpportunityID,\n    CustomerName,\n    BaseSource,\n    LastUpdateBase,\n    ParentIndex,\n    IsParent,\n    IsLockFinance,\n    ExpiryDate,\n    FinancialYear,\n    CustomerCode,\n    SaleManUserName,\n    SaleManFullName,\n    GroupCode,\n    GroupName,\n    EstimateRevenueExist,\n    Common,\n    ProductManagerID,\n    ProductManagerUserName,\n    ProductManagerFullName,\n    IsFinish,\n    BoxmovingType,\n    OrderID,\n    Url,\n    IsSync,\n    DateSync,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    opportunity_code,\n    dv_tenant_id,\n    dv_collisioncode,\n    dv_hash_key_h_opportunity,\n    dv_hash_key_l_opportunity_sa,\n    dv_master_hash_key_h_opportunity,\n    dv_duplicate_hash_key_h_opportunity\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orderdetails": {"database": "DWH", "schema": "dbo", "name": "hash__cmis_dbo_orderdetails", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_orderdetails.sql", "original_file_path": "models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_orderdetails.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orderdetails", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "12_hash", "cmis", "hash__cmis_dbo_orderdetails"], "alias": "hash__cmis_dbo_orderdetails", "checksum": {"name": "sha256", "checksum": "89c8afbb0fbcb1bc15b622d14a35843e24e111258faa5bf13412edb5eaef67a0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_orderdetails.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307660.1366808, "relation_name": "\"DWH\".\"dbo\".\"hash__cmis_dbo_orderdetails\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"stg__cmis_dbo_orderdetails\"\r\nderived_columns:\r\n  dv_recordsource: \"DV_RECORD_SOURCE\"\r\n  dv_load_timestamp: cast( DV_APPLIED_DATE as DATETIME2(6))\r\n  product_code: cast( SolutionBranchID as VARCHAR(4000))\r\n  order_code: cast(OrderID as VARCHAR(8000))\r\n  dv_cdk_l_orderdetail: \"ID\"\r\n  dv_tenant_id: '!default'\r\n  dv_collisioncode: '!default'\r\nhashed_columns: \r\n    dv_hash_key_h_order:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"order_code\"\r\n    dv_hash_key_h_product:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"product_code\"\r\n    dv_hash_key_l_orderdetail:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"dv_cdk_l_orderdetail\"\r\n    - \"order_code\"\r\n    - \"product_code\"\r\n    dv_hashdiff_s_l_orderdetail:\r\n      is_hashdiff: true\r\n      columns:\r\n        - \"[TotalBeforeVAT]\"\r\n        - \"[IsMain]\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.stage(include_source_columns=true,\r\n                  source_model=metadata_dict['source_model'],\r\n                  derived_columns=metadata_dict['derived_columns'],\r\n                  hashed_columns=metadata_dict['hashed_columns'],\r\n                  ranked_columns=none) }}", "language": "sql", "refs": [["stg__cmis_dbo_orderdetails"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_orderdetails"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_orderdetails.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n\n    SELECT\n\n    ID,\n    Code,\n    OrderID,\n    OrderCode,\n    SolutionBranchID,\n    SolutionBranchNameID,\n    ProductBranchID,\n    VendorBranchID,\n    ProductName,\n    VATTypeID,\n    PartNumber,\n    Warranty,\n    BeginDateWarranty,\n    EndDateWarranty,\n    Description,\n    UnitName,\n    Quantity,\n    Tax,\n    Price,\n    TotalBeforeVAT,\n    TotalVAT,\n    TotalAfterVAT,\n    CreatedDate,\n    NameSolutionBranchID,\n    NameSolutionBranchNameID,\n    NameProductBranchID,\n    NameVendorBranchID,\n    NameVATTypeID,\n    RetailTypeID,\n    RetailConfigID,\n    IsService,\n    IsHardware,\n    STTMis,\n    GroupID,\n    IsMain,\n    ParentID,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE\n\n    FROM \"DWH\".\"dbo\".\"stg__cmis_dbo_orderdetails\"\n),\n\nderived_columns AS (\n\n    SELECT\n\n    ID,\n    Code,\n    OrderID,\n    OrderCode,\n    SolutionBranchID,\n    SolutionBranchNameID,\n    ProductBranchID,\n    VendorBranchID,\n    ProductName,\n    VATTypeID,\n    PartNumber,\n    Warranty,\n    BeginDateWarranty,\n    EndDateWarranty,\n    Description,\n    UnitName,\n    Quantity,\n    Tax,\n    Price,\n    TotalBeforeVAT,\n    TotalVAT,\n    TotalAfterVAT,\n    CreatedDate,\n    NameSolutionBranchID,\n    NameSolutionBranchNameID,\n    NameProductBranchID,\n    NameVendorBranchID,\n    NameVATTypeID,\n    RetailTypeID,\n    RetailConfigID,\n    IsService,\n    IsHardware,\n    STTMis,\n    GroupID,\n    IsMain,\n    ParentID,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    DV_RECORD_SOURCE AS dv_recordsource,\n    cast( DV_APPLIED_DATE as DATETIME2(6)) AS dv_load_timestamp,\n    cast( SolutionBranchID as VARCHAR(4000)) AS product_code,\n    cast(OrderID as VARCHAR(8000)) AS order_code,\n    ID AS dv_cdk_l_orderdetail,\n    'default' AS dv_tenant_id,\n    'default' AS dv_collisioncode\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    ID,\n    Code,\n    OrderID,\n    OrderCode,\n    SolutionBranchID,\n    SolutionBranchNameID,\n    ProductBranchID,\n    VendorBranchID,\n    ProductName,\n    VATTypeID,\n    PartNumber,\n    Warranty,\n    BeginDateWarranty,\n    EndDateWarranty,\n    Description,\n    UnitName,\n    Quantity,\n    Tax,\n    Price,\n    TotalBeforeVAT,\n    TotalVAT,\n    TotalAfterVAT,\n    CreatedDate,\n    NameSolutionBranchID,\n    NameSolutionBranchNameID,\n    NameProductBranchID,\n    NameVendorBranchID,\n    NameVATTypeID,\n    RetailTypeID,\n    RetailConfigID,\n    IsService,\n    IsHardware,\n    STTMis,\n    GroupID,\n    IsMain,\n    ParentID,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    product_code,\n    order_code,\n    dv_cdk_l_orderdetail,\n    dv_tenant_id,\n    dv_collisioncode,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(order_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_order,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(product_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_product,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_cdk_l_orderdetail AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(order_code AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(product_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^||^^||^^')), 2) AS dv_hash_key_l_orderdetail,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST([IsMain] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([TotalBeforeVAT] AS VARCHAR(MAX)))), ''), '^^')\n    )), 2) AS dv_hashdiff_s_l_orderdetail\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    ID,\n    Code,\n    OrderID,\n    OrderCode,\n    SolutionBranchID,\n    SolutionBranchNameID,\n    ProductBranchID,\n    VendorBranchID,\n    ProductName,\n    VATTypeID,\n    PartNumber,\n    Warranty,\n    BeginDateWarranty,\n    EndDateWarranty,\n    Description,\n    UnitName,\n    Quantity,\n    Tax,\n    Price,\n    TotalBeforeVAT,\n    TotalVAT,\n    TotalAfterVAT,\n    CreatedDate,\n    NameSolutionBranchID,\n    NameSolutionBranchNameID,\n    NameProductBranchID,\n    NameVendorBranchID,\n    NameVATTypeID,\n    RetailTypeID,\n    RetailConfigID,\n    IsService,\n    IsHardware,\n    STTMis,\n    GroupID,\n    IsMain,\n    ParentID,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    product_code,\n    order_code,\n    dv_cdk_l_orderdetail,\n    dv_tenant_id,\n    dv_collisioncode,\n    dv_hash_key_h_order,\n    dv_hash_key_h_product,\n    dv_hash_key_l_orderdetail,\n    dv_hashdiff_s_l_orderdetail\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orders": {"database": "DWH", "schema": "dbo", "name": "hash__cmis_dbo_orders", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_orders.sql", "original_file_path": "models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_orders.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orders", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "12_hash", "cmis", "hash__cmis_dbo_orders"], "alias": "hash__cmis_dbo_orders", "checksum": {"name": "sha256", "checksum": "350d38578c64b1f85448cf555cfaeffcf37ea13ce0916b91e9def77fcca5ef35"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_orders.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307660.2216487, "relation_name": "\"DWH\".\"dbo\".\"hash__cmis_dbo_orders\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"stg__cmis_dbo_orders\"\r\nderived_columns:\r\n  dv_recordsource: \"DV_RECORD_SOURCE\"\r\n  dv_load_timestamp: cast( DV_APPLIED_DATE as DATETIME2(6))\r\n  order_code: cast(ID as VARCHAR(8000))\r\n  opportunity_code: cast(OpportunityID as VARCHAR(8000))\r\n  dv_tenant_id: '!default'\r\n  dv_collisioncode: '!default'\r\nhashed_columns: \r\n    dv_hash_key_h_order:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"order_code\"\r\n    dv_hash_key_h_opportunity:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"opportunity_code\"\r\n    dv_hash_key_l_opportunity_order:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"opportunity_code\"\r\n    - \"order_code\"\r\n    dv_hashdiff_s_h_order:\r\n      is_hashdiff: true\r\n      columns:\r\n        - \"[Activate]\"\r\n        - \"[CreatedDate]\"\r\n        - \"[TotalBeforeVAT]\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.stage(include_source_columns=true,\r\n                  source_model=metadata_dict['source_model'],\r\n                  derived_columns=metadata_dict['derived_columns'],\r\n                  hashed_columns=metadata_dict['hashed_columns'],\r\n                  ranked_columns=none) }}", "language": "sql", "refs": [["stg__cmis_dbo_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_orders"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_orders.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n\n    SELECT\n\n    ID,\n    Code,\n    Tag,\n    CustomerID,\n    TotalBeforeVAT,\n    ValueHardware,\n    TotalVAT,\n    TotalAfterVAT,\n    FileAttachments,\n    PublishType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    IsPaymentGuarantee,\n    Activate,\n    RevenueSerial,\n    TimeContractSerial,\n    ProductName,\n    OpportunityID,\n    BOKinds,\n    RetailTypeID,\n    WarrantyID,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE\n\n    FROM \"DWH\".\"dbo\".\"stg__cmis_dbo_orders\"\n),\n\nderived_columns AS (\n\n    SELECT\n\n    ID,\n    Code,\n    Tag,\n    CustomerID,\n    TotalBeforeVAT,\n    ValueHardware,\n    TotalVAT,\n    TotalAfterVAT,\n    FileAttachments,\n    PublishType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    IsPaymentGuarantee,\n    Activate,\n    RevenueSerial,\n    TimeContractSerial,\n    ProductName,\n    OpportunityID,\n    BOKinds,\n    RetailTypeID,\n    WarrantyID,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    DV_RECORD_SOURCE AS dv_recordsource,\n    cast( DV_APPLIED_DATE as DATETIME2(6)) AS dv_load_timestamp,\n    cast(ID as VARCHAR(8000)) AS order_code,\n    cast(OpportunityID as VARCHAR(8000)) AS opportunity_code,\n    'default' AS dv_tenant_id,\n    'default' AS dv_collisioncode\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    ID,\n    Code,\n    Tag,\n    CustomerID,\n    TotalBeforeVAT,\n    ValueHardware,\n    TotalVAT,\n    TotalAfterVAT,\n    FileAttachments,\n    PublishType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    IsPaymentGuarantee,\n    Activate,\n    RevenueSerial,\n    TimeContractSerial,\n    ProductName,\n    OpportunityID,\n    BOKinds,\n    RetailTypeID,\n    WarrantyID,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    order_code,\n    opportunity_code,\n    dv_tenant_id,\n    dv_collisioncode,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(order_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_order,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(opportunity_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_opportunity,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(opportunity_code AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(order_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^||^^')), 2) AS dv_hash_key_l_opportunity_order,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST([Activate] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([CreatedDate] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([TotalBeforeVAT] AS VARCHAR(MAX)))), ''), '^^')\n    )), 2) AS dv_hashdiff_s_h_order\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    ID,\n    Code,\n    Tag,\n    CustomerID,\n    TotalBeforeVAT,\n    ValueHardware,\n    TotalVAT,\n    TotalAfterVAT,\n    FileAttachments,\n    PublishType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    IsPaymentGuarantee,\n    Activate,\n    RevenueSerial,\n    TimeContractSerial,\n    ProductName,\n    OpportunityID,\n    BOKinds,\n    RetailTypeID,\n    WarrantyID,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    order_code,\n    opportunity_code,\n    dv_tenant_id,\n    dv_collisioncode,\n    dv_hash_key_h_order,\n    dv_hash_key_h_opportunity,\n    dv_hash_key_l_opportunity_order,\n    dv_hashdiff_s_h_order\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_usercustomers": {"database": "DWH", "schema": "dbo", "name": "hash__cmis_dbo_usercustomers", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_usercustomers.sql", "original_file_path": "models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_usercustomers.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_usercustomers", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "12_hash", "cmis", "hash__cmis_dbo_usercustomers"], "alias": "hash__cmis_dbo_usercustomers", "checksum": {"name": "sha256", "checksum": "6f45a3630a5b159701956f98b22a2f41ba62558e81a591e72ff5a3c86b7a4c6a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_usercustomers.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307660.287652, "relation_name": "\"DWH\".\"dbo\".\"hash__cmis_dbo_usercustomers\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"stg__cmis_dbo_usercustomers\"\r\nderived_columns:\r\n  dv_recordsource: \"DV_RECORD_SOURCE\"\r\n  dv_load_timestamp: cast( [DV_APPLIED_DATE] as DATETIME2(6))\r\n  user_code: \"UserID\"\r\n  customer_code: \"CustomerID\"\r\n  dv_tenant_id: \"!default\"\r\n  dv_collisioncode: \"!default\"\r\n  dv_cdk_l_user_customer: \"ID\"\r\nhashed_columns: \r\n    dv_hash_key_h_customer:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"customer_code\"\r\n    dv_hash_key_h_user:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"user_code\"\r\n    dv_hash_key_l_user_customer:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"user_code\"\r\n    - \"customer_code\"\r\n    - \"dv_cdk_l_user_customer\"\r\n    dv_hashdiff_s_l_user_customer:\r\n      is_hashdiff: true\r\n      columns:\r\n        - \"AccountType\"\r\n        - \"Activate\"\r\n        - \"GroupID\" \r\n    dv_hashdiff_s_l_user_customer_rt:\r\n      is_hashdiff: true\r\n      columns:\r\n        - \"DV_APPLIED_DATE\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.stage(include_source_columns=true,\r\n                  source_model=metadata_dict['source_model'],\r\n                  derived_columns=metadata_dict['derived_columns'],\r\n                  hashed_columns=metadata_dict['hashed_columns'],\r\n                  ranked_columns=none) }}", "language": "sql", "refs": [["stg__cmis_dbo_usercustomers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_usercustomers"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_usercustomers.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n\n    SELECT\n\n    ID,\n    UserID,\n    CustomerID,\n    AccountType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    Activate,\n    GroupID,\n    RequestAccountID,\n    SendMailed,\n    ReasonDeactive,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE\n\n    FROM \"DWH\".\"dbo\".\"stg__cmis_dbo_usercustomers\"\n),\n\nderived_columns AS (\n\n    SELECT\n\n    ID,\n    UserID,\n    CustomerID,\n    AccountType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    Activate,\n    GroupID,\n    RequestAccountID,\n    SendMailed,\n    ReasonDeactive,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    DV_RECORD_SOURCE AS dv_recordsource,\n    cast( [DV_APPLIED_DATE] as DATETIME2(6)) AS dv_load_timestamp,\n    UserID AS user_code,\n    CustomerID AS customer_code,\n    'default' AS dv_tenant_id,\n    'default' AS dv_collisioncode,\n    ID AS dv_cdk_l_user_customer\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    ID,\n    UserID,\n    CustomerID,\n    AccountType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    Activate,\n    GroupID,\n    RequestAccountID,\n    SendMailed,\n    ReasonDeactive,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    user_code,\n    customer_code,\n    dv_tenant_id,\n    dv_collisioncode,\n    dv_cdk_l_user_customer,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(customer_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_customer,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(user_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_user,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(user_code AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(customer_code AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_cdk_l_user_customer AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^||^^||^^')), 2) AS dv_hash_key_l_user_customer,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(AccountType AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(Activate AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(GroupID AS VARCHAR(MAX)))), ''), '^^')\n    )), 2) AS dv_hashdiff_s_l_user_customer,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', ISNULL(NULLIF(UPPER(TRIM(CAST(DV_APPLIED_DATE AS VARCHAR(MAX)))), ''), '^^')), 2) AS dv_hashdiff_s_l_user_customer_rt\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    ID,\n    UserID,\n    CustomerID,\n    AccountType,\n    CreatedDate,\n    CreatedByID,\n    CreatedByName,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    Activate,\n    GroupID,\n    RequestAccountID,\n    SendMailed,\n    ReasonDeactive,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    user_code,\n    customer_code,\n    dv_tenant_id,\n    dv_collisioncode,\n    dv_cdk_l_user_customer,\n    dv_hash_key_h_customer,\n    dv_hash_key_h_user,\n    dv_hash_key_l_user_customer,\n    dv_hashdiff_s_l_user_customer,\n    dv_hashdiff_s_l_user_customer_rt\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_users": {"database": "DWH", "schema": "dbo", "name": "hash__cmis_dbo_users", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_users.sql", "original_file_path": "models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_users.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_users", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "12_hash", "cmis", "hash__cmis_dbo_users"], "alias": "hash__cmis_dbo_users", "checksum": {"name": "sha256", "checksum": "05bab7eda996c5899f0738359b8f04d2d2607d91f56784c60247cde1944135a0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_users.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307660.371653, "relation_name": "\"DWH\".\"dbo\".\"hash__cmis_dbo_users\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"stg__cmis_dbo_users\"\r\nderived_columns:\r\n  dv_recordsource: \"DV_RECORD_SOURCE\"\r\n  dv_load_timestamp: cast( DV_APPLIED_DATE as DATETIME2(6))\r\n  user_code: cast(ID as VARCHAR(8000))\r\n  dv_tenant_id: '!default'\r\n  dv_collisioncode: '!default'\r\nhashed_columns: \r\n    dv_hash_key_h_user:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n    - \"user_code\"\r\n    dv_hashdiff_s_h_user:\r\n      is_hashdiff: true\r\n      columns:\r\n        - \"[ID]\"\r\n        - \"[FirstName]\"\r\n        - \"[LastName]\"\r\n        - \"[EmployeeCode]\"\r\n        - \"[Gender]\"\r\n        - \"[Active]\"\r\n        - \"[BeginWorkDate]\"\r\n        - \"[TitleID]\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.stage(include_source_columns=true,\r\n                  source_model=metadata_dict['source_model'],\r\n                  derived_columns=metadata_dict['derived_columns'],\r\n                  hashed_columns=metadata_dict['hashed_columns'],\r\n                  ranked_columns=none) }}", "language": "sql", "refs": [["stg__cmis_dbo_users"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_users"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\12_hash\\cmis\\hash__cmis_dbo_users.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n\n    SELECT\n\n    ID,\n    Email,\n    Password,\n    FirstName,\n    LastName,\n    EmployeeCode,\n    Image,\n    Thumb,\n    DOB,\n    Gender,\n    Address,\n    Phone,\n    Active,\n    Display,\n    CreatedDate,\n    CreatedByName,\n    CreatedByID,\n    TitleID,\n    UserName,\n    ContractDate,\n    BeginWorkDate,\n    LoyaltyYear,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    IsIntership,\n    TitleText,\n    WeightUser,\n    EmployeeTypeID,\n    About,\n    Facebook,\n    Twitter,\n    GooglePlus,\n    History,\n    IsShowContact,\n    KPIEmployeeTypeID,\n    QuitDate,\n    IsExternal,\n    UserType,\n    TokenKey,\n    EndContractDate,\n    HRCandidateID,\n    AltEmail,\n    AltPassword,\n    AltUserName,\n    SocialInsuranceNumber,\n    Certificate,\n    IdentityCardNumber,\n    IdentityCardDate,\n    IdentityCardPlace,\n    CompanyID,\n    LocationID,\n    WorkTime,\n    LevelText,\n    Major,\n    School,\n    CurrentAdress,\n    GroupTypeID,\n    NextTokenKey,\n    TokenExpiredDate,\n    StatusSync,\n    TimeSync,\n    CountSync,\n    CurrentURL,\n    RoleID,\n    GroupID,\n    IsEmpNoMax,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE\n\n    FROM \"DWH\".\"dbo\".\"stg__cmis_dbo_users\"\n),\n\nderived_columns AS (\n\n    SELECT\n\n    ID,\n    Email,\n    Password,\n    FirstName,\n    LastName,\n    EmployeeCode,\n    Image,\n    Thumb,\n    DOB,\n    Gender,\n    Address,\n    Phone,\n    Active,\n    Display,\n    CreatedDate,\n    CreatedByName,\n    CreatedByID,\n    TitleID,\n    UserName,\n    ContractDate,\n    BeginWorkDate,\n    LoyaltyYear,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    IsIntership,\n    TitleText,\n    WeightUser,\n    EmployeeTypeID,\n    About,\n    Facebook,\n    Twitter,\n    GooglePlus,\n    History,\n    IsShowContact,\n    KPIEmployeeTypeID,\n    QuitDate,\n    IsExternal,\n    UserType,\n    TokenKey,\n    EndContractDate,\n    HRCandidateID,\n    AltEmail,\n    AltPassword,\n    AltUserName,\n    SocialInsuranceNumber,\n    Certificate,\n    IdentityCardNumber,\n    IdentityCardDate,\n    IdentityCardPlace,\n    CompanyID,\n    LocationID,\n    WorkTime,\n    LevelText,\n    Major,\n    School,\n    CurrentAdress,\n    GroupTypeID,\n    NextTokenKey,\n    TokenExpiredDate,\n    StatusSync,\n    TimeSync,\n    CountSync,\n    CurrentURL,\n    RoleID,\n    GroupID,\n    IsEmpNoMax,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    DV_RECORD_SOURCE AS dv_recordsource,\n    cast( DV_APPLIED_DATE as DATETIME2(6)) AS dv_load_timestamp,\n    cast(ID as VARCHAR(8000)) AS user_code,\n    'default' AS dv_tenant_id,\n    'default' AS dv_collisioncode\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    ID,\n    Email,\n    Password,\n    FirstName,\n    LastName,\n    EmployeeCode,\n    Image,\n    Thumb,\n    DOB,\n    Gender,\n    Address,\n    Phone,\n    Active,\n    Display,\n    CreatedDate,\n    CreatedByName,\n    CreatedByID,\n    TitleID,\n    UserName,\n    ContractDate,\n    BeginWorkDate,\n    LoyaltyYear,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    IsIntership,\n    TitleText,\n    WeightUser,\n    EmployeeTypeID,\n    About,\n    Facebook,\n    Twitter,\n    GooglePlus,\n    History,\n    IsShowContact,\n    KPIEmployeeTypeID,\n    QuitDate,\n    IsExternal,\n    UserType,\n    TokenKey,\n    EndContractDate,\n    HRCandidateID,\n    AltEmail,\n    AltPassword,\n    AltUserName,\n    SocialInsuranceNumber,\n    Certificate,\n    IdentityCardNumber,\n    IdentityCardDate,\n    IdentityCardPlace,\n    CompanyID,\n    LocationID,\n    WorkTime,\n    LevelText,\n    Major,\n    School,\n    CurrentAdress,\n    GroupTypeID,\n    NextTokenKey,\n    TokenExpiredDate,\n    StatusSync,\n    TimeSync,\n    CountSync,\n    CurrentURL,\n    RoleID,\n    GroupID,\n    IsEmpNoMax,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    user_code,\n    dv_tenant_id,\n    dv_collisioncode,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_tenant_id AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(dv_collisioncode AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(user_code AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^')), 2) AS dv_hash_key_h_user,\n\n    CONVERT(CHAR(32), HASHBYTES('MD5', CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST([Active] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([BeginWorkDate] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([EmployeeCode] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([FirstName] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([Gender] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([ID] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([LastName] AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST([TitleID] AS VARCHAR(MAX)))), ''), '^^')\n    )), 2) AS dv_hashdiff_s_h_user\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    ID,\n    Email,\n    Password,\n    FirstName,\n    LastName,\n    EmployeeCode,\n    Image,\n    Thumb,\n    DOB,\n    Gender,\n    Address,\n    Phone,\n    Active,\n    Display,\n    CreatedDate,\n    CreatedByName,\n    CreatedByID,\n    TitleID,\n    UserName,\n    ContractDate,\n    BeginWorkDate,\n    LoyaltyYear,\n    ModifiedDate,\n    ModifiedByID,\n    ModifiedByName,\n    IsIntership,\n    TitleText,\n    WeightUser,\n    EmployeeTypeID,\n    About,\n    Facebook,\n    Twitter,\n    GooglePlus,\n    History,\n    IsShowContact,\n    KPIEmployeeTypeID,\n    QuitDate,\n    IsExternal,\n    UserType,\n    TokenKey,\n    EndContractDate,\n    HRCandidateID,\n    AltEmail,\n    AltPassword,\n    AltUserName,\n    SocialInsuranceNumber,\n    Certificate,\n    IdentityCardNumber,\n    IdentityCardDate,\n    IdentityCardPlace,\n    CompanyID,\n    LocationID,\n    WorkTime,\n    LevelText,\n    Major,\n    School,\n    CurrentAdress,\n    GroupTypeID,\n    NextTokenKey,\n    TokenExpiredDate,\n    StatusSync,\n    TimeSync,\n    CountSync,\n    CurrentURL,\n    RoleID,\n    GroupID,\n    IsEmpNoMax,\n    DV_RECORD_SOURCE,\n    DV_APPLIED_DATE,\n    dv_recordsource,\n    dv_load_timestamp,\n    user_code,\n    dv_tenant_id,\n    dv_collisioncode,\n    dv_hash_key_h_user,\n    dv_hashdiff_s_h_user\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__h_businessplan": {"database": "DWH", "schema": "dbo", "name": "dv__h_businessplan", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\13_hub\\dv__h_businessplan.sql", "original_file_path": "models\\dv\\1_raw\\13_hub\\dv__h_businessplan.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__h_businessplan", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "13_hub", "dv__h_businessplan"], "alias": "dv__h_businessplan", "checksum": {"name": "sha256", "checksum": "29f86b573ead0de0ae97b962aef5c32bb34b4ecad4815cb2cf630eb49d583448"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_businessplan.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.4146473, "relation_name": "\"DWH\".\"dbo\".\"dv__h_businessplan\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n    - \"hash__cmis_dbo_businessplans\"\r\nsrc_pk: \"dv_hash_key_h_businessplan\"\r\nsrc_nk: \"businessplan_code\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\r\n                   src_nk=metadata_dict[\"src_nk\"], \r\n                   src_ldts=metadata_dict[\"src_ldts\"],\r\n                   src_source=metadata_dict[\"src_source\"],\r\n                   source_model=metadata_dict[\"source_model\"],\r\n                   src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                   ) }}", "language": "sql", "refs": [["hash__cmis_dbo_businessplans"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_businessplans"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_businessplan.sql", "compiled": true, "compiled_code": "\n\n-- Generated by AutomateDV (formerly known as dbtvault)\n\nWITH row_rank_1 AS (\n    SELECT dv_hash_key_h_businessplan, businessplan_code, dv_tenant_id, dv_collisioncode, dv_load_timestamp, dv_recordsource\n    FROM (\n        SELECT rr.dv_hash_key_h_businessplan, rr.businessplan_code, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n               ROW_NUMBER() OVER(\n                   PARTITION BY rr.dv_hash_key_h_businessplan\n                   ORDER BY rr.dv_load_timestamp\n               ) AS row_number\n        FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_businessplans\" AS rr\n        WHERE rr.dv_hash_key_h_businessplan IS NOT NULL\n    ) h\n    WHERE h.row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_h_businessplan, a.businessplan_code, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_1 AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__h_businessplan\" AS d\n    ON a.dv_hash_key_h_businessplan = d.dv_hash_key_h_businessplan\n    WHERE d.dv_hash_key_h_businessplan IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__h_contract": {"database": "DWH", "schema": "dbo", "name": "dv__h_contract", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\13_hub\\dv__h_contract.sql", "original_file_path": "models\\dv\\1_raw\\13_hub\\dv__h_contract.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__h_contract", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "13_hub", "dv__h_contract"], "alias": "dv__h_contract", "checksum": {"name": "sha256", "checksum": "85e7395de0d2b31dcb278236fdd0c45847b4604ac132620f020bcb6529d8b17c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_contract.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.4966466, "relation_name": "\"DWH\".\"dbo\".\"dv__h_contract\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n    - \"hash__cmis_dbo_contracts\"\r\nsrc_pk: \"dv_hash_key_h_contract\"\r\nsrc_nk: \"contract_code\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\r\n                   src_nk=metadata_dict[\"src_nk\"], \r\n                   src_ldts=metadata_dict[\"src_ldts\"],\r\n                   src_source=metadata_dict[\"src_source\"],\r\n                   source_model=metadata_dict[\"source_model\"],\r\n                   src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                   ) }}", "language": "sql", "refs": [["hash__cmis_dbo_contracts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_contracts"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_contract.sql", "compiled": true, "compiled_code": "\n\n-- Generated by AutomateDV (formerly known as dbtvault)\n\nWITH row_rank_1 AS (\n    SELECT dv_hash_key_h_contract, contract_code, dv_tenant_id, dv_collisioncode, dv_load_timestamp, dv_recordsource\n    FROM (\n        SELECT rr.dv_hash_key_h_contract, rr.contract_code, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n               ROW_NUMBER() OVER(\n                   PARTITION BY rr.dv_hash_key_h_contract\n                   ORDER BY rr.dv_load_timestamp\n               ) AS row_number\n        FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_contracts\" AS rr\n        WHERE rr.dv_hash_key_h_contract IS NOT NULL\n    ) h\n    WHERE h.row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_h_contract, a.contract_code, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_1 AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__h_contract\" AS d\n    ON a.dv_hash_key_h_contract = d.dv_hash_key_h_contract\n    WHERE d.dv_hash_key_h_contract IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__h_customer": {"database": "DWH", "schema": "dbo", "name": "dv__h_customer", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\13_hub\\dv__h_customer.sql", "original_file_path": "models\\dv\\1_raw\\13_hub\\dv__h_customer.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__h_customer", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "13_hub", "dv__h_customer"], "alias": "dv__h_customer", "checksum": {"name": "sha256", "checksum": "f77782e48c31dfe33e0f56e23871d34801329ff4a91b35974d34fb4fcf86c707"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_customer.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.5106735, "relation_name": "\"DWH\".\"dbo\".\"dv__h_customer\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n    - \"hash__cmis_dbo_customers\"\r\nsrc_pk: \"dv_hash_key_h_customer\"\r\nsrc_nk: \"customer_code\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\r\n                   src_nk=metadata_dict[\"src_nk\"], \r\n                   src_ldts=metadata_dict[\"src_ldts\"],\r\n                   src_source=metadata_dict[\"src_source\"],\r\n                   source_model=metadata_dict[\"source_model\"],\r\n                   src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                   ) }}", "language": "sql", "refs": [["hash__cmis_dbo_customers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_customers"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_customer.sql", "compiled": true, "compiled_code": "\n\n-- Generated by AutomateDV (formerly known as dbtvault)\n\nWITH row_rank_1 AS (\n    SELECT dv_hash_key_h_customer, customer_code, dv_tenant_id, dv_collisioncode, dv_load_timestamp, dv_recordsource\n    FROM (\n        SELECT rr.dv_hash_key_h_customer, rr.customer_code, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n               ROW_NUMBER() OVER(\n                   PARTITION BY rr.dv_hash_key_h_customer\n                   ORDER BY rr.dv_load_timestamp\n               ) AS row_number\n        FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_customers\" AS rr\n        WHERE rr.dv_hash_key_h_customer IS NOT NULL\n    ) h\n    WHERE h.row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_h_customer, a.customer_code, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_1 AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__h_customer\" AS d\n    ON a.dv_hash_key_h_customer = d.dv_hash_key_h_customer\n    WHERE d.dv_hash_key_h_customer IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__h_department": {"database": "DWH", "schema": "dbo", "name": "dv__h_department", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\13_hub\\dv__h_department.sql", "original_file_path": "models\\dv\\1_raw\\13_hub\\dv__h_department.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__h_department", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "13_hub", "dv__h_department"], "alias": "dv__h_department", "checksum": {"name": "sha256", "checksum": "4aba9eb510a8283f5e71c9e0999c7e946033871b68ecc21824530ba9cb9baf45"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_department.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.5236497, "relation_name": "\"DWH\".\"dbo\".\"dv__h_department\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n    - \"hash__cmis_dbo_groups\"\r\nsrc_pk: \"dv_hash_key_h_department\"\r\nsrc_nk: \"department_code\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\r\n                   src_nk=metadata_dict[\"src_nk\"], \r\n                   src_ldts=metadata_dict[\"src_ldts\"],\r\n                   src_source=metadata_dict[\"src_source\"],\r\n                   source_model=metadata_dict[\"source_model\"],\r\n                   src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                   ) }}", "language": "sql", "refs": [["hash__cmis_dbo_groups"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_groups"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_department.sql", "compiled": true, "compiled_code": "\n\n-- Generated by AutomateDV (formerly known as dbtvault)\n\nWITH row_rank_1 AS (\n    SELECT dv_hash_key_h_department, department_code, dv_tenant_id, dv_collisioncode, dv_load_timestamp, dv_recordsource\n    FROM (\n        SELECT rr.dv_hash_key_h_department, rr.department_code, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n               ROW_NUMBER() OVER(\n                   PARTITION BY rr.dv_hash_key_h_department\n                   ORDER BY rr.dv_load_timestamp\n               ) AS row_number\n        FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_groups\" AS rr\n        WHERE rr.dv_hash_key_h_department IS NOT NULL\n    ) h\n    WHERE h.row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_h_department, a.department_code, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_1 AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__h_department\" AS d\n    ON a.dv_hash_key_h_department = d.dv_hash_key_h_department\n    WHERE d.dv_hash_key_h_department IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__h_estimatecontract": {"database": "DWH", "schema": "dbo", "name": "dv__h_estimatecontract", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\13_hub\\dv__h_estimatecontract.sql", "original_file_path": "models\\dv\\1_raw\\13_hub\\dv__h_estimatecontract.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__h_estimatecontract", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "13_hub", "dv__h_estimatecontract"], "alias": "dv__h_estimatecontract", "checksum": {"name": "sha256", "checksum": "44e19def8e4078af2e4c4dc59743fdc2e829c74963c71666ce449aebea7e4ff5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_estimatecontract.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.5356493, "relation_name": "\"DWH\".\"dbo\".\"dv__h_estimatecontract\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n    - \"hash__cmis_dbo_estimatecontracts\"\r\nsrc_pk: \"dv_hash_key_h_estimatecontract\"\r\nsrc_nk: \"estimatecontract_code\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\r\n                   src_nk=metadata_dict[\"src_nk\"], \r\n                   src_ldts=metadata_dict[\"src_ldts\"],\r\n                   src_source=metadata_dict[\"src_source\"],\r\n                   source_model=metadata_dict[\"source_model\"],\r\n                   src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                   ) }}", "language": "sql", "refs": [["hash__cmis_dbo_estimatecontracts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_estimatecontracts"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_estimatecontract.sql", "compiled": true, "compiled_code": "\n\n-- Generated by AutomateDV (formerly known as dbtvault)\n\nWITH row_rank_1 AS (\n    SELECT dv_hash_key_h_estimatecontract, estimatecontract_code, dv_tenant_id, dv_collisioncode, dv_load_timestamp, dv_recordsource\n    FROM (\n        SELECT rr.dv_hash_key_h_estimatecontract, rr.estimatecontract_code, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n               ROW_NUMBER() OVER(\n                   PARTITION BY rr.dv_hash_key_h_estimatecontract\n                   ORDER BY rr.dv_load_timestamp\n               ) AS row_number\n        FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_estimatecontracts\" AS rr\n        WHERE rr.dv_hash_key_h_estimatecontract IS NOT NULL\n    ) h\n    WHERE h.row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_h_estimatecontract, a.estimatecontract_code, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_1 AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__h_estimatecontract\" AS d\n    ON a.dv_hash_key_h_estimatecontract = d.dv_hash_key_h_estimatecontract\n    WHERE d.dv_hash_key_h_estimatecontract IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__h_finalizationcontract": {"database": "DWH", "schema": "dbo", "name": "dv__h_finalizationcontract", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\13_hub\\dv__h_finalizationcontract.sql", "original_file_path": "models\\dv\\1_raw\\13_hub\\dv__h_finalizationcontract.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__h_finalizationcontract", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "13_hub", "dv__h_finalizationcontract"], "alias": "dv__h_finalizationcontract", "checksum": {"name": "sha256", "checksum": "001ce1a92761b6f52d3efc5a75cbd91c753f31e1bd15d0bf8e5db8d741166567"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_finalizationcontract.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.5476484, "relation_name": "\"DWH\".\"dbo\".\"dv__h_finalizationcontract\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n    - \"hash__cmis_dbo_finalizationcontracts\"\r\nsrc_pk: \"dv_hash_key_h_finalizationcontract\"\r\nsrc_nk: \"finalizationcontract_code\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\r\n                   src_nk=metadata_dict[\"src_nk\"], \r\n                   src_ldts=metadata_dict[\"src_ldts\"],\r\n                   src_source=metadata_dict[\"src_source\"],\r\n                   source_model=metadata_dict[\"source_model\"],\r\n                   src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                   ) }}", "language": "sql", "refs": [["hash__cmis_dbo_finalizationcontracts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_finalizationcontracts"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_finalizationcontract.sql", "compiled": true, "compiled_code": "\n\n-- Generated by AutomateDV (formerly known as dbtvault)\n\nWITH row_rank_1 AS (\n    SELECT dv_hash_key_h_finalizationcontract, finalizationcontract_code, dv_tenant_id, dv_collisioncode, dv_load_timestamp, dv_recordsource\n    FROM (\n        SELECT rr.dv_hash_key_h_finalizationcontract, rr.finalizationcontract_code, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n               ROW_NUMBER() OVER(\n                   PARTITION BY rr.dv_hash_key_h_finalizationcontract\n                   ORDER BY rr.dv_load_timestamp\n               ) AS row_number\n        FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_finalizationcontracts\" AS rr\n        WHERE rr.dv_hash_key_h_finalizationcontract IS NOT NULL\n    ) h\n    WHERE h.row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_h_finalizationcontract, a.finalizationcontract_code, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_1 AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__h_finalizationcontract\" AS d\n    ON a.dv_hash_key_h_finalizationcontract = d.dv_hash_key_h_finalizationcontract\n    WHERE d.dv_hash_key_h_finalizationcontract IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__h_invoice": {"database": "DWH", "schema": "dbo", "name": "dv__h_invoice", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\13_hub\\dv__h_invoice.sql", "original_file_path": "models\\dv\\1_raw\\13_hub\\dv__h_invoice.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__h_invoice", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "13_hub", "dv__h_invoice"], "alias": "dv__h_invoice", "checksum": {"name": "sha256", "checksum": "9b47497a608fcf90f62cbf94f36430b0ad74736add33d8e34c18e1521b084aa1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_invoice.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.561839, "relation_name": "\"DWH\".\"dbo\".\"dv__h_invoice\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n    - \"hash__cmis_dbo_ct00\"\r\nsrc_pk: \"dv_hash_key_h_invoice\"\r\nsrc_nk: \"invoice_code\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\r\n                   src_nk=metadata_dict[\"src_nk\"], \r\n                   src_ldts=metadata_dict[\"src_ldts\"],\r\n                   src_source=metadata_dict[\"src_source\"],\r\n                   source_model=metadata_dict[\"source_model\"],\r\n                   src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                   ) }}", "language": "sql", "refs": [["hash__cmis_dbo_ct00"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_ct00"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_invoice.sql", "compiled": true, "compiled_code": "\n\n-- Generated by AutomateDV (formerly known as dbtvault)\n\nWITH row_rank_1 AS (\n    SELECT dv_hash_key_h_invoice, invoice_code, dv_tenant_id, dv_collisioncode, dv_load_timestamp, dv_recordsource\n    FROM (\n        SELECT rr.dv_hash_key_h_invoice, rr.invoice_code, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n               ROW_NUMBER() OVER(\n                   PARTITION BY rr.dv_hash_key_h_invoice\n                   ORDER BY rr.dv_load_timestamp\n               ) AS row_number\n        FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_ct00\" AS rr\n        WHERE rr.dv_hash_key_h_invoice IS NOT NULL\n    ) h\n    WHERE h.row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_h_invoice, a.invoice_code, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_1 AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__h_invoice\" AS d\n    ON a.dv_hash_key_h_invoice = d.dv_hash_key_h_invoice\n    WHERE d.dv_hash_key_h_invoice IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__h_opportunity": {"database": "DWH", "schema": "dbo", "name": "dv__h_opportunity", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\13_hub\\dv__h_opportunity.sql", "original_file_path": "models\\dv\\1_raw\\13_hub\\dv__h_opportunity.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__h_opportunity", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "13_hub", "dv__h_opportunity"], "alias": "dv__h_opportunity", "checksum": {"name": "sha256", "checksum": "1271f0b8453a4a3625622b3b8a009cefeb67c63599272c1a45b34db7121a4f82"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_opportunity.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.5738392, "relation_name": "\"DWH\".\"dbo\".\"dv__h_opportunity\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n    - \"hash__cmis_dbo_opportunities\"\r\n    - \"hash__cmis_dbo_opportunities2\"\r\nsrc_pk: \"dv_hash_key_h_opportunity\"\r\nsrc_nk: \"opportunity_code\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\r\n                   src_nk=metadata_dict[\"src_nk\"], \r\n                   src_ldts=metadata_dict[\"src_ldts\"],\r\n                   src_source=metadata_dict[\"src_source\"],\r\n                   source_model=metadata_dict[\"source_model\"],\r\n                   src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                   ) }}", "language": "sql", "refs": [["hash__cmis_dbo_opportunities"], ["hash__cmis_dbo_opportunities2"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_opportunities", "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_opportunities2"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_opportunity.sql", "compiled": true, "compiled_code": "\n\n-- Generated by AutomateDV (formerly known as dbtvault)\n\nWITH row_rank_1 AS (\n    SELECT dv_hash_key_h_opportunity, opportunity_code, dv_tenant_id, dv_collisioncode, dv_load_timestamp, dv_recordsource\n    FROM (\n        SELECT rr.dv_hash_key_h_opportunity, rr.opportunity_code, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n               ROW_NUMBER() OVER(\n                   PARTITION BY rr.dv_hash_key_h_opportunity\n                   ORDER BY rr.dv_load_timestamp\n               ) AS row_number\n        FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_opportunities\" AS rr\n        WHERE rr.dv_hash_key_h_opportunity IS NOT NULL\n    ) h\n    WHERE h.row_number = 1\n),\n\nrow_rank_2 AS (\n    SELECT dv_hash_key_h_opportunity, opportunity_code, dv_tenant_id, dv_collisioncode, dv_load_timestamp, dv_recordsource\n    FROM (\n        SELECT rr.dv_hash_key_h_opportunity, rr.opportunity_code, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n               ROW_NUMBER() OVER(\n                   PARTITION BY rr.dv_hash_key_h_opportunity\n                   ORDER BY rr.dv_load_timestamp\n               ) AS row_number\n        FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_opportunities2\" AS rr\n        WHERE rr.dv_hash_key_h_opportunity IS NOT NULL\n    ) h\n    WHERE h.row_number = 1\n),\n\nstage_union AS (\n    SELECT * FROM row_rank_1\n    UNION ALL\n    SELECT * FROM row_rank_2\n),\n\nrow_rank_union AS (\n    SELECT *\n    FROM (\n        SELECT ru.*,\n               ROW_NUMBER() OVER(\n                   PARTITION BY ru.dv_hash_key_h_opportunity\n                   ORDER BY ru.dv_load_timestamp, ru.dv_recordsource ASC\n               ) AS row_rank_number\n        FROM stage_union AS ru\n        WHERE ru.dv_hash_key_h_opportunity IS NOT NULL\n    ) h\n    WHERE h.row_rank_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_h_opportunity, a.opportunity_code, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_union AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__h_opportunity\" AS d\n    ON a.dv_hash_key_h_opportunity = d.dv_hash_key_h_opportunity\n    WHERE d.dv_hash_key_h_opportunity IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__h_order": {"database": "DWH", "schema": "dbo", "name": "dv__h_order", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\13_hub\\dv__h_order.sql", "original_file_path": "models\\dv\\1_raw\\13_hub\\dv__h_order.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__h_order", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "13_hub", "dv__h_order"], "alias": "dv__h_order", "checksum": {"name": "sha256", "checksum": "108eb1277f1407b5f7318a01036a3cf17d5057c2fedce709b483fb8110f4d38d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_order.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.5898397, "relation_name": "\"DWH\".\"dbo\".\"dv__h_order\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n    - \"hash__cmis_dbo_orders\"\r\nsrc_pk: \"dv_hash_key_h_order\"\r\nsrc_nk: \"order_code\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\r\n                   src_nk=metadata_dict[\"src_nk\"], \r\n                   src_ldts=metadata_dict[\"src_ldts\"],\r\n                   src_source=metadata_dict[\"src_source\"],\r\n                   source_model=metadata_dict[\"source_model\"],\r\n                   src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                   ) }}", "language": "sql", "refs": [["hash__cmis_dbo_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orders"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_order.sql", "compiled": true, "compiled_code": "\n\n-- Generated by AutomateDV (formerly known as dbtvault)\n\nWITH row_rank_1 AS (\n    SELECT dv_hash_key_h_order, order_code, dv_tenant_id, dv_collisioncode, dv_load_timestamp, dv_recordsource\n    FROM (\n        SELECT rr.dv_hash_key_h_order, rr.order_code, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n               ROW_NUMBER() OVER(\n                   PARTITION BY rr.dv_hash_key_h_order\n                   ORDER BY rr.dv_load_timestamp\n               ) AS row_number\n        FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_orders\" AS rr\n        WHERE rr.dv_hash_key_h_order IS NOT NULL\n    ) h\n    WHERE h.row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_h_order, a.order_code, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_1 AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__h_order\" AS d\n    ON a.dv_hash_key_h_order = d.dv_hash_key_h_order\n    WHERE d.dv_hash_key_h_order IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__h_product": {"database": "DWH", "schema": "dbo", "name": "dv__h_product", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\13_hub\\dv__h_product.sql", "original_file_path": "models\\dv\\1_raw\\13_hub\\dv__h_product.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__h_product", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "13_hub", "dv__h_product"], "alias": "dv__h_product", "checksum": {"name": "sha256", "checksum": "93212a40113ead52a194edd8a34e1289b45521cb9184f2d1d6f240f7d3d98b8c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_product.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.6028395, "relation_name": "\"DWH\".\"dbo\".\"dv__h_product\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n    - \"hash__cmis_dbo_branches\"\r\n    - \"hash__cmis_dbo_orderdetails\"\r\nsrc_pk: \"dv_hash_key_h_product\"\r\nsrc_nk: \"product_code\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\r\n                   src_nk=metadata_dict[\"src_nk\"], \r\n                   src_ldts=metadata_dict[\"src_ldts\"],\r\n                   src_source=metadata_dict[\"src_source\"],\r\n                   source_model=metadata_dict[\"source_model\"],\r\n                   src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                   ) }}", "language": "sql", "refs": [["hash__cmis_dbo_branches"], ["hash__cmis_dbo_orderdetails"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_branches", "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orderdetails"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_product.sql", "compiled": true, "compiled_code": "\n\n-- Generated by AutomateDV (formerly known as dbtvault)\n\nWITH row_rank_1 AS (\n    SELECT dv_hash_key_h_product, product_code, dv_tenant_id, dv_collisioncode, dv_load_timestamp, dv_recordsource\n    FROM (\n        SELECT rr.dv_hash_key_h_product, rr.product_code, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n               ROW_NUMBER() OVER(\n                   PARTITION BY rr.dv_hash_key_h_product\n                   ORDER BY rr.dv_load_timestamp\n               ) AS row_number\n        FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_branches\" AS rr\n        WHERE rr.dv_hash_key_h_product IS NOT NULL\n    ) h\n    WHERE h.row_number = 1\n),\n\nrow_rank_2 AS (\n    SELECT dv_hash_key_h_product, product_code, dv_tenant_id, dv_collisioncode, dv_load_timestamp, dv_recordsource\n    FROM (\n        SELECT rr.dv_hash_key_h_product, rr.product_code, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n               ROW_NUMBER() OVER(\n                   PARTITION BY rr.dv_hash_key_h_product\n                   ORDER BY rr.dv_load_timestamp\n               ) AS row_number\n        FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_orderdetails\" AS rr\n        WHERE rr.dv_hash_key_h_product IS NOT NULL\n    ) h\n    WHERE h.row_number = 1\n),\n\nstage_union AS (\n    SELECT * FROM row_rank_1\n    UNION ALL\n    SELECT * FROM row_rank_2\n),\n\nrow_rank_union AS (\n    SELECT *\n    FROM (\n        SELECT ru.*,\n               ROW_NUMBER() OVER(\n                   PARTITION BY ru.dv_hash_key_h_product\n                   ORDER BY ru.dv_load_timestamp, ru.dv_recordsource ASC\n               ) AS row_rank_number\n        FROM stage_union AS ru\n        WHERE ru.dv_hash_key_h_product IS NOT NULL\n    ) h\n    WHERE h.row_rank_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_h_product, a.product_code, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_union AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__h_product\" AS d\n    ON a.dv_hash_key_h_product = d.dv_hash_key_h_product\n    WHERE d.dv_hash_key_h_product IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__h_user": {"database": "DWH", "schema": "dbo", "name": "dv__h_user", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\13_hub\\dv__h_user.sql", "original_file_path": "models\\dv\\1_raw\\13_hub\\dv__h_user.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__h_user", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "13_hub", "dv__h_user"], "alias": "dv__h_user", "checksum": {"name": "sha256", "checksum": "83e18c360b784b5511753cfa7003741b36b107df07d9abd130e74e851f07a7d2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_user.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.621839, "relation_name": "\"DWH\".\"dbo\".\"dv__h_user\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n    - \"hash__cmis_dbo_users\"\r\nsrc_pk: \"dv_hash_key_h_user\"\r\nsrc_nk: \"user_code\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\r\n                   src_nk=metadata_dict[\"src_nk\"], \r\n                   src_ldts=metadata_dict[\"src_ldts\"],\r\n                   src_source=metadata_dict[\"src_source\"],\r\n                   source_model=metadata_dict[\"source_model\"],\r\n                   src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                   ) }}", "language": "sql", "refs": [["hash__cmis_dbo_users"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_users"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\13_hub\\dv__h_user.sql", "compiled": true, "compiled_code": "\n\n-- Generated by AutomateDV (formerly known as dbtvault)\n\nWITH row_rank_1 AS (\n    SELECT dv_hash_key_h_user, user_code, dv_tenant_id, dv_collisioncode, dv_load_timestamp, dv_recordsource\n    FROM (\n        SELECT rr.dv_hash_key_h_user, rr.user_code, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n               ROW_NUMBER() OVER(\n                   PARTITION BY rr.dv_hash_key_h_user\n                   ORDER BY rr.dv_load_timestamp\n               ) AS row_number\n        FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_users\" AS rr\n        WHERE rr.dv_hash_key_h_user IS NOT NULL\n    ) h\n    WHERE h.row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_h_user, a.user_code, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_1 AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__h_user\" AS d\n    ON a.dv_hash_key_h_user = d.dv_hash_key_h_user\n    WHERE d.dv_hash_key_h_user IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__l_contract_lockstatus": {"database": "DWH", "schema": "dbo", "name": "dv__l_contract_lockstatus", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\14_link\\dv__l_contract_lockstatus.sql", "original_file_path": "models\\dv\\1_raw\\14_link\\dv__l_contract_lockstatus.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__l_contract_lockstatus", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "14_link", "dv__l_contract_lockstatus"], "alias": "dv__l_contract_lockstatus", "checksum": {"name": "sha256", "checksum": "eda738e7e502069b059ec6095969b072af88f26face1c0de2642d3421c33db22"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_contract_lockstatus.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.6338394, "relation_name": "\"DWH\".\"dbo\".\"dv__l_contract_lockstatus\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n  - \"hash__cmis_dbo_contractlockstatus\"\r\nsrc_pk: \"dv_hash_key_l_contract_lockstatus\"\r\nsrc_fk: \r\n  - \"dv_hash_key_h_contract\"\r\n  - \"dv_cdk_s_l_contract_lockstatus\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.link(src_pk=metadata_dict[\"src_pk\"],\r\n                    src_fk=metadata_dict[\"src_fk\"], \r\n                    src_ldts=metadata_dict[\"src_ldts\"],\r\n                    src_source=metadata_dict[\"src_source\"], \r\n                    source_model=metadata_dict[\"source_model\"],\r\n                    src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                    ) }}", "language": "sql", "refs": [["hash__cmis_dbo_contractlockstatus"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_contractlockstatus"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_contract_lockstatus.sql", "compiled": true, "compiled_code": "\n\n\n\n    -- Generated by AutomateDV (formerly known as dbtvault)\n\n    WITH row_rank_1 AS (\n    SELECT *\n    FROM\n    (\n    SELECT rr.dv_hash_key_l_contract_lockstatus, rr.dv_hash_key_h_contract, rr.dv_cdk_s_l_contract_lockstatus, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.dv_hash_key_l_contract_lockstatus\n               ORDER BY rr.dv_load_timestamp\n           ) AS row_number\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_contractlockstatus\" AS rr\n    WHERE rr.dv_hash_key_l_contract_lockstatus IS NOT NULL\n    AND rr.dv_hash_key_h_contract IS NOT NULL\n    AND rr.dv_cdk_s_l_contract_lockstatus IS NOT NULL\n    ) l\n    WHERE l.row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_l_contract_lockstatus, a.dv_hash_key_h_contract, a.dv_cdk_s_l_contract_lockstatus, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_1 AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__l_contract_lockstatus\" AS d\n    ON a.dv_hash_key_l_contract_lockstatus = d.dv_hash_key_l_contract_lockstatus\n    WHERE d.dv_hash_key_l_contract_lockstatus IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_businessplan": {"database": "DWH", "schema": "dbo", "name": "dv__l_opportunity_businessplan", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\14_link\\dv__l_opportunity_businessplan.sql", "original_file_path": "models\\dv\\1_raw\\14_link\\dv__l_opportunity_businessplan.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_businessplan", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "14_link", "dv__l_opportunity_businessplan"], "alias": "dv__l_opportunity_businessplan", "checksum": {"name": "sha256", "checksum": "8d0b91a5377a36108227742162735a346ffe273406ff0f3f9814cea8f546878f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_opportunity_businessplan.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.6692646, "relation_name": "\"DWH\".\"dbo\".\"dv__l_opportunity_businessplan\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n  - \"hash__cmis_dbo_businessplans\"\r\nsrc_pk: \"dv_hash_key_l_opportunity_businessplan\"\r\nsrc_fk: \r\n  - \"dv_hash_key_h_opportunity\"\r\n  - \"dv_hash_key_h_businessplan\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.link(src_pk=metadata_dict[\"src_pk\"],\r\n                    src_fk=metadata_dict[\"src_fk\"], \r\n                    src_ldts=metadata_dict[\"src_ldts\"],\r\n                    src_source=metadata_dict[\"src_source\"], \r\n                    source_model=metadata_dict[\"source_model\"],\r\n                    src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                    ) }}", "language": "sql", "refs": [["hash__cmis_dbo_businessplans"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_businessplans"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_opportunity_businessplan.sql", "compiled": true, "compiled_code": "\n\n\n\n    -- Generated by AutomateDV (formerly known as dbtvault)\n\n    WITH row_rank_1 AS (\n    SELECT *\n    FROM\n    (\n    SELECT rr.dv_hash_key_l_opportunity_businessplan, rr.dv_hash_key_h_opportunity, rr.dv_hash_key_h_businessplan, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.dv_hash_key_l_opportunity_businessplan\n               ORDER BY rr.dv_load_timestamp\n           ) AS row_number\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_businessplans\" AS rr\n    WHERE rr.dv_hash_key_l_opportunity_businessplan IS NOT NULL\n    AND rr.dv_hash_key_h_opportunity IS NOT NULL\n    AND rr.dv_hash_key_h_businessplan IS NOT NULL\n    ) l\n    WHERE l.row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_l_opportunity_businessplan, a.dv_hash_key_h_opportunity, a.dv_hash_key_h_businessplan, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_1 AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__l_opportunity_businessplan\" AS d\n    ON a.dv_hash_key_l_opportunity_businessplan = d.dv_hash_key_l_opportunity_businessplan\n    WHERE d.dv_hash_key_l_opportunity_businessplan IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_contract": {"database": "DWH", "schema": "dbo", "name": "dv__l_opportunity_contract", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\14_link\\dv__l_opportunity_contract.sql", "original_file_path": "models\\dv\\1_raw\\14_link\\dv__l_opportunity_contract.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_contract", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "14_link", "dv__l_opportunity_contract"], "alias": "dv__l_opportunity_contract", "checksum": {"name": "sha256", "checksum": "7233a5c07d569890e129b2c3708285af8b37a5e473593b22fa68a6f3929e2f24"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_opportunity_contract.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.683227, "relation_name": "\"DWH\".\"dbo\".\"dv__l_opportunity_contract\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n  - \"hash__cmis_dbo_contracts\"\r\nsrc_pk: \"dv_hash_key_l_opportunity_contract\"\r\nsrc_fk: \r\n  - \"dv_hash_key_h_opportunity\"\r\n  - \"dv_hash_key_h_contract\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.link(src_pk=metadata_dict[\"src_pk\"],\r\n                    src_fk=metadata_dict[\"src_fk\"], \r\n                    src_ldts=metadata_dict[\"src_ldts\"],\r\n                    src_source=metadata_dict[\"src_source\"], \r\n                    source_model=metadata_dict[\"source_model\"],\r\n                    src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                    ) }}", "language": "sql", "refs": [["hash__cmis_dbo_contracts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_contracts"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_opportunity_contract.sql", "compiled": true, "compiled_code": "\n\n\n\n    -- Generated by AutomateDV (formerly known as dbtvault)\n\n    WITH row_rank_1 AS (\n    SELECT *\n    FROM\n    (\n    SELECT rr.dv_hash_key_l_opportunity_contract, rr.dv_hash_key_h_opportunity, rr.dv_hash_key_h_contract, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.dv_hash_key_l_opportunity_contract\n               ORDER BY rr.dv_load_timestamp\n           ) AS row_number\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_contracts\" AS rr\n    WHERE rr.dv_hash_key_l_opportunity_contract IS NOT NULL\n    AND rr.dv_hash_key_h_opportunity IS NOT NULL\n    AND rr.dv_hash_key_h_contract IS NOT NULL\n    ) l\n    WHERE l.row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_l_opportunity_contract, a.dv_hash_key_h_opportunity, a.dv_hash_key_h_contract, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_1 AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__l_opportunity_contract\" AS d\n    ON a.dv_hash_key_l_opportunity_contract = d.dv_hash_key_l_opportunity_contract\n    WHERE d.dv_hash_key_l_opportunity_contract IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_customer_user_department": {"database": "DWH", "schema": "dbo", "name": "dv__l_opportunity_customer_user_department", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\14_link\\dv__l_opportunity_customer_user_department.sql", "original_file_path": "models\\dv\\1_raw\\14_link\\dv__l_opportunity_customer_user_department.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_customer_user_department", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "14_link", "dv__l_opportunity_customer_user_department"], "alias": "dv__l_opportunity_customer_user_department", "checksum": {"name": "sha256", "checksum": "24e83e9c7e70b13253700278100242666014effe5292a12834bbaf62ed7688cb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_opportunity_customer_user_department.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.6972308, "relation_name": "\"DWH\".\"dbo\".\"dv__l_opportunity_customer_user_department\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n  - \"hash__cmis_dbo_opportunities\"\r\nsrc_pk: \"dv_hash_key_l_opportunity_customer_user_department\"\r\nsrc_fk: \r\n  - \"dv_hash_key_h_opportunity\"\r\n  - \"dv_hash_key_h_customer\"\r\n  - \"dv_hash_key_h_user\"\r\n  - \"dv_hash_key_h_department\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.link(src_pk=metadata_dict[\"src_pk\"],\r\n                    src_fk=metadata_dict[\"src_fk\"], \r\n                    src_ldts=metadata_dict[\"src_ldts\"],\r\n                    src_source=metadata_dict[\"src_source\"], \r\n                    source_model=metadata_dict[\"source_model\"],\r\n                    src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                    ) }}", "language": "sql", "refs": [["hash__cmis_dbo_opportunities"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_opportunities"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_opportunity_customer_user_department.sql", "compiled": true, "compiled_code": "\n\n\n\n    -- Generated by AutomateDV (formerly known as dbtvault)\n\n    WITH row_rank_1 AS (\n    SELECT *\n    FROM\n    (\n    SELECT rr.dv_hash_key_l_opportunity_customer_user_department, rr.dv_hash_key_h_opportunity, rr.dv_hash_key_h_customer, rr.dv_hash_key_h_user, rr.dv_hash_key_h_department, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.dv_hash_key_l_opportunity_customer_user_department\n               ORDER BY rr.dv_load_timestamp\n           ) AS row_number\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_opportunities\" AS rr\n    WHERE rr.dv_hash_key_l_opportunity_customer_user_department IS NOT NULL\n    AND rr.dv_hash_key_h_opportunity IS NOT NULL\n    AND rr.dv_hash_key_h_customer IS NOT NULL\n    AND rr.dv_hash_key_h_user IS NOT NULL\n    AND rr.dv_hash_key_h_department IS NOT NULL\n    ) l\n    WHERE l.row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_l_opportunity_customer_user_department, a.dv_hash_key_h_opportunity, a.dv_hash_key_h_customer, a.dv_hash_key_h_user, a.dv_hash_key_h_department, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_1 AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__l_opportunity_customer_user_department\" AS d\n    ON a.dv_hash_key_l_opportunity_customer_user_department = d.dv_hash_key_l_opportunity_customer_user_department\n    WHERE d.dv_hash_key_l_opportunity_customer_user_department IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_estimatecontract": {"database": "DWH", "schema": "dbo", "name": "dv__l_opportunity_estimatecontract", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\14_link\\dv__l_opportunity_estimatecontract.sql", "original_file_path": "models\\dv\\1_raw\\14_link\\dv__l_opportunity_estimatecontract.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_estimatecontract", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "14_link", "dv__l_opportunity_estimatecontract"], "alias": "dv__l_opportunity_estimatecontract", "checksum": {"name": "sha256", "checksum": "36d02be1cf36abb35df99c04939fc276e76522b991dc4a0c16386c69b5012017"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_opportunity_estimatecontract.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.7112298, "relation_name": "\"DWH\".\"dbo\".\"dv__l_opportunity_estimatecontract\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n  - \"hash__cmis_dbo_estimatecontracts\"\r\nsrc_pk: \"dv_hash_key_l_opportunity_estimatecontract\"\r\nsrc_fk: \r\n  - \"dv_hash_key_h_opportunity\"\r\n  - \"dv_hash_key_h_estimatecontract\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.link(src_pk=metadata_dict[\"src_pk\"],\r\n                    src_fk=metadata_dict[\"src_fk\"], \r\n                    src_ldts=metadata_dict[\"src_ldts\"],\r\n                    src_source=metadata_dict[\"src_source\"], \r\n                    source_model=metadata_dict[\"source_model\"],\r\n                    src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                    ) }}", "language": "sql", "refs": [["hash__cmis_dbo_estimatecontracts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_estimatecontracts"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_opportunity_estimatecontract.sql", "compiled": true, "compiled_code": "\n\n\n\n    -- Generated by AutomateDV (formerly known as dbtvault)\n\n    WITH row_rank_1 AS (\n    SELECT *\n    FROM\n    (\n    SELECT rr.dv_hash_key_l_opportunity_estimatecontract, rr.dv_hash_key_h_opportunity, rr.dv_hash_key_h_estimatecontract, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.dv_hash_key_l_opportunity_estimatecontract\n               ORDER BY rr.dv_load_timestamp\n           ) AS row_number\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_estimatecontracts\" AS rr\n    WHERE rr.dv_hash_key_l_opportunity_estimatecontract IS NOT NULL\n    AND rr.dv_hash_key_h_opportunity IS NOT NULL\n    AND rr.dv_hash_key_h_estimatecontract IS NOT NULL\n    ) l\n    WHERE l.row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_l_opportunity_estimatecontract, a.dv_hash_key_h_opportunity, a.dv_hash_key_h_estimatecontract, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_1 AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__l_opportunity_estimatecontract\" AS d\n    ON a.dv_hash_key_l_opportunity_estimatecontract = d.dv_hash_key_l_opportunity_estimatecontract\n    WHERE d.dv_hash_key_l_opportunity_estimatecontract IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_finalizationcontract": {"database": "DWH", "schema": "dbo", "name": "dv__l_opportunity_finalizationcontract", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\14_link\\dv__l_opportunity_finalizationcontract.sql", "original_file_path": "models\\dv\\1_raw\\14_link\\dv__l_opportunity_finalizationcontract.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_finalizationcontract", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "14_link", "dv__l_opportunity_finalizationcontract"], "alias": "dv__l_opportunity_finalizationcontract", "checksum": {"name": "sha256", "checksum": "7c776f0a5c3b06c5d348d11fa09ebbe43a54dcd239e6825c0058f59738effa1c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_opportunity_finalizationcontract.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.72623, "relation_name": "\"DWH\".\"dbo\".\"dv__l_opportunity_finalizationcontract\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n  - \"hash__cmis_dbo_finalizationcontracts\"\r\nsrc_pk: \"dv_hash_key_l_opportunity_finalizationcontract\"\r\nsrc_fk: \r\n  - \"dv_hash_key_h_opportunity\"\r\n  - \"dv_hash_key_h_finalizationcontract\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.link(src_pk=metadata_dict[\"src_pk\"],\r\n                    src_fk=metadata_dict[\"src_fk\"], \r\n                    src_ldts=metadata_dict[\"src_ldts\"],\r\n                    src_source=metadata_dict[\"src_source\"], \r\n                    source_model=metadata_dict[\"source_model\"],\r\n                    src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                    ) }}", "language": "sql", "refs": [["hash__cmis_dbo_finalizationcontracts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_finalizationcontracts"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_opportunity_finalizationcontract.sql", "compiled": true, "compiled_code": "\n\n\n\n    -- Generated by AutomateDV (formerly known as dbtvault)\n\n    WITH row_rank_1 AS (\n    SELECT *\n    FROM\n    (\n    SELECT rr.dv_hash_key_l_opportunity_finalizationcontract, rr.dv_hash_key_h_opportunity, rr.dv_hash_key_h_finalizationcontract, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.dv_hash_key_l_opportunity_finalizationcontract\n               ORDER BY rr.dv_load_timestamp\n           ) AS row_number\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_finalizationcontracts\" AS rr\n    WHERE rr.dv_hash_key_l_opportunity_finalizationcontract IS NOT NULL\n    AND rr.dv_hash_key_h_opportunity IS NOT NULL\n    AND rr.dv_hash_key_h_finalizationcontract IS NOT NULL\n    ) l\n    WHERE l.row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_l_opportunity_finalizationcontract, a.dv_hash_key_h_opportunity, a.dv_hash_key_h_finalizationcontract, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_1 AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__l_opportunity_finalizationcontract\" AS d\n    ON a.dv_hash_key_l_opportunity_finalizationcontract = d.dv_hash_key_l_opportunity_finalizationcontract\n    WHERE d.dv_hash_key_l_opportunity_finalizationcontract IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_invoice": {"database": "DWH", "schema": "dbo", "name": "dv__l_opportunity_invoice", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\14_link\\dv__l_opportunity_invoice.sql", "original_file_path": "models\\dv\\1_raw\\14_link\\dv__l_opportunity_invoice.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_invoice", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "14_link", "dv__l_opportunity_invoice"], "alias": "dv__l_opportunity_invoice", "checksum": {"name": "sha256", "checksum": "661df6b0ad29c0d86384be1c2df831fe3664150ee08360c7fe825c2dd61c4790"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_opportunity_invoice.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.7402303, "relation_name": "\"DWH\".\"dbo\".\"dv__l_opportunity_invoice\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n  - \"hash__cmis_dbo_ct00\"\r\nsrc_pk: \"dv_hash_key_l_opportunity_invoice\"\r\nsrc_fk: \r\n  - \"dv_hash_key_h_opportunity\"\r\n  - \"dv_hash_key_h_invoice\"\r\n  - \"dv_cdk_l_opportunity_invoice\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.link(src_pk=metadata_dict[\"src_pk\"],\r\n                    src_fk=metadata_dict[\"src_fk\"], \r\n                    src_ldts=metadata_dict[\"src_ldts\"],\r\n                    src_source=metadata_dict[\"src_source\"], \r\n                    source_model=metadata_dict[\"source_model\"],\r\n                    src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                    ) }}", "language": "sql", "refs": [["hash__cmis_dbo_ct00"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_ct00"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_opportunity_invoice.sql", "compiled": true, "compiled_code": "\n\n\n\n    -- Generated by AutomateDV (formerly known as dbtvault)\n\n    WITH row_rank_1 AS (\n    SELECT *\n    FROM\n    (\n    SELECT rr.dv_hash_key_l_opportunity_invoice, rr.dv_hash_key_h_opportunity, rr.dv_hash_key_h_invoice, rr.dv_cdk_l_opportunity_invoice, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.dv_hash_key_l_opportunity_invoice\n               ORDER BY rr.dv_load_timestamp\n           ) AS row_number\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_ct00\" AS rr\n    WHERE rr.dv_hash_key_l_opportunity_invoice IS NOT NULL\n    AND rr.dv_hash_key_h_opportunity IS NOT NULL\n    AND rr.dv_hash_key_h_invoice IS NOT NULL\n    AND rr.dv_cdk_l_opportunity_invoice IS NOT NULL\n    ) l\n    WHERE l.row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_l_opportunity_invoice, a.dv_hash_key_h_opportunity, a.dv_hash_key_h_invoice, a.dv_cdk_l_opportunity_invoice, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_1 AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__l_opportunity_invoice\" AS d\n    ON a.dv_hash_key_l_opportunity_invoice = d.dv_hash_key_l_opportunity_invoice\n    WHERE d.dv_hash_key_l_opportunity_invoice IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_order": {"database": "DWH", "schema": "dbo", "name": "dv__l_opportunity_order", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\14_link\\dv__l_opportunity_order.sql", "original_file_path": "models\\dv\\1_raw\\14_link\\dv__l_opportunity_order.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_order", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "14_link", "dv__l_opportunity_order"], "alias": "dv__l_opportunity_order", "checksum": {"name": "sha256", "checksum": "fd5dec43766c38c3f5a973736f9e6ea4368de4262d7f9d5eead05fbf92cac46f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_opportunity_order.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.7552314, "relation_name": "\"DWH\".\"dbo\".\"dv__l_opportunity_order\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n  - \"hash__cmis_dbo_orders\"\r\nsrc_pk: \"dv_hash_key_l_opportunity_order\"\r\nsrc_fk: \r\n  - \"dv_hash_key_h_opportunity\"\r\n  - \"dv_hash_key_h_order\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.link(src_pk=metadata_dict[\"src_pk\"],\r\n                    src_fk=metadata_dict[\"src_fk\"], \r\n                    src_ldts=metadata_dict[\"src_ldts\"],\r\n                    src_source=metadata_dict[\"src_source\"], \r\n                    source_model=metadata_dict[\"source_model\"],\r\n                    src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                    ) }}", "language": "sql", "refs": [["hash__cmis_dbo_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orders"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_opportunity_order.sql", "compiled": true, "compiled_code": "\n\n\n\n    -- Generated by AutomateDV (formerly known as dbtvault)\n\n    WITH row_rank_1 AS (\n    SELECT *\n    FROM\n    (\n    SELECT rr.dv_hash_key_l_opportunity_order, rr.dv_hash_key_h_opportunity, rr.dv_hash_key_h_order, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.dv_hash_key_l_opportunity_order\n               ORDER BY rr.dv_load_timestamp\n           ) AS row_number\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_orders\" AS rr\n    WHERE rr.dv_hash_key_l_opportunity_order IS NOT NULL\n    AND rr.dv_hash_key_h_opportunity IS NOT NULL\n    AND rr.dv_hash_key_h_order IS NOT NULL\n    ) l\n    WHERE l.row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_l_opportunity_order, a.dv_hash_key_h_opportunity, a.dv_hash_key_h_order, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_1 AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__l_opportunity_order\" AS d\n    ON a.dv_hash_key_l_opportunity_order = d.dv_hash_key_l_opportunity_order\n    WHERE d.dv_hash_key_l_opportunity_order IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_sa": {"database": "DWH", "schema": "dbo", "name": "dv__l_opportunity_sa", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\14_link\\dv__l_opportunity_sa.sql", "original_file_path": "models\\dv\\1_raw\\14_link\\dv__l_opportunity_sa.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_sa", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "14_link", "dv__l_opportunity_sa"], "alias": "dv__l_opportunity_sa", "checksum": {"name": "sha256", "checksum": "841338b8dc146a1d580cf7781af238f6a48fef8960a0af9eac99a9d7de8352c0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_opportunity_sa.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.7692366, "relation_name": "\"DWH\".\"dbo\".\"dv__l_opportunity_sa\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n  - \"hash__cmis_dbo_opportunities2\"\r\nsrc_pk: \"dv_hash_key_l_opportunity_sa\"\r\nsrc_fk: \r\n  - \"dv_master_hash_key_h_opportunity\"\r\n  - \"dv_duplicate_hash_key_h_opportunity\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.link(src_pk=metadata_dict[\"src_pk\"],\r\n                    src_fk=metadata_dict[\"src_fk\"], \r\n                    src_ldts=metadata_dict[\"src_ldts\"],\r\n                    src_source=metadata_dict[\"src_source\"], \r\n                    source_model=metadata_dict[\"source_model\"],\r\n                    src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                    ) }}", "language": "sql", "refs": [["hash__cmis_dbo_opportunities2"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_opportunities2"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_opportunity_sa.sql", "compiled": true, "compiled_code": "\n\n\n\n    -- Generated by AutomateDV (formerly known as dbtvault)\n\n    WITH row_rank_1 AS (\n    SELECT *\n    FROM\n    (\n    SELECT rr.dv_hash_key_l_opportunity_sa, rr.dv_master_hash_key_h_opportunity, rr.dv_duplicate_hash_key_h_opportunity, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.dv_hash_key_l_opportunity_sa\n               ORDER BY rr.dv_load_timestamp\n           ) AS row_number\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_opportunities2\" AS rr\n    WHERE rr.dv_hash_key_l_opportunity_sa IS NOT NULL\n    AND rr.dv_master_hash_key_h_opportunity IS NOT NULL\n    AND rr.dv_duplicate_hash_key_h_opportunity IS NOT NULL\n    ) l\n    WHERE l.row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_l_opportunity_sa, a.dv_master_hash_key_h_opportunity, a.dv_duplicate_hash_key_h_opportunity, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_1 AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__l_opportunity_sa\" AS d\n    ON a.dv_hash_key_l_opportunity_sa = d.dv_hash_key_l_opportunity_sa\n    WHERE d.dv_hash_key_l_opportunity_sa IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__l_orderdetail": {"database": "DWH", "schema": "dbo", "name": "dv__l_orderdetail", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\14_link\\dv__l_orderdetail.sql", "original_file_path": "models\\dv\\1_raw\\14_link\\dv__l_orderdetail.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__l_orderdetail", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "14_link", "dv__l_orderdetail"], "alias": "dv__l_orderdetail", "checksum": {"name": "sha256", "checksum": "9e1587aae25d6c188cca0207718e3bf6867d1e32461b480ab37d47df0c5599ef"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_orderdetail.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.7852314, "relation_name": "\"DWH\".\"dbo\".\"dv__l_orderdetail\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n  - \"hash__cmis_dbo_orderdetails\"\r\nsrc_pk: \"dv_hash_key_l_orderdetail\"\r\nsrc_fk: \r\n  - \"dv_hash_key_h_order\"\r\n  - \"dv_hash_key_h_product\"\r\n  - \"dv_cdk_l_orderdetail\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.link(src_pk=metadata_dict[\"src_pk\"],\r\n                    src_fk=metadata_dict[\"src_fk\"], \r\n                    src_ldts=metadata_dict[\"src_ldts\"],\r\n                    src_source=metadata_dict[\"src_source\"], \r\n                    source_model=metadata_dict[\"source_model\"],\r\n                    src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                    ) }}", "language": "sql", "refs": [["hash__cmis_dbo_orderdetails"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orderdetails"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_orderdetail.sql", "compiled": true, "compiled_code": "\n\n\n\n    -- Generated by AutomateDV (formerly known as dbtvault)\n\n    WITH row_rank_1 AS (\n    SELECT *\n    FROM\n    (\n    SELECT rr.dv_hash_key_l_orderdetail, rr.dv_hash_key_h_order, rr.dv_hash_key_h_product, rr.dv_cdk_l_orderdetail, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.dv_hash_key_l_orderdetail\n               ORDER BY rr.dv_load_timestamp\n           ) AS row_number\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_orderdetails\" AS rr\n    WHERE rr.dv_hash_key_l_orderdetail IS NOT NULL\n    AND rr.dv_hash_key_h_order IS NOT NULL\n    AND rr.dv_hash_key_h_product IS NOT NULL\n    AND rr.dv_cdk_l_orderdetail IS NOT NULL\n    ) l\n    WHERE l.row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_l_orderdetail, a.dv_hash_key_h_order, a.dv_hash_key_h_product, a.dv_cdk_l_orderdetail, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_1 AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__l_orderdetail\" AS d\n    ON a.dv_hash_key_l_orderdetail = d.dv_hash_key_l_orderdetail\n    WHERE d.dv_hash_key_l_orderdetail IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__l_user_customer": {"database": "DWH", "schema": "dbo", "name": "dv__l_user_customer", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\14_link\\dv__l_user_customer.sql", "original_file_path": "models\\dv\\1_raw\\14_link\\dv__l_user_customer.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__l_user_customer", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "14_link", "dv__l_user_customer"], "alias": "dv__l_user_customer", "checksum": {"name": "sha256", "checksum": "bb700a3c1334b83cf9eae2713c1e038271253ea7cef1785b2c75d7cc2326b3c7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_user_customer.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.799231, "relation_name": "\"DWH\".\"dbo\".\"dv__l_user_customer\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \r\n  - \"hash__cmis_dbo_usercustomers\"\r\nsrc_pk: \"dv_hash_key_l_user_customer\"\r\nsrc_fk: \r\n  - \"dv_hash_key_h_user\"\r\n  - \"dv_hash_key_h_customer\"\r\n  - \"dv_cdk_l_user_customer\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\nsrc_extra_columns:\r\n    - \"dv_tenant_id\"\r\n    - \"dv_collisioncode\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ automate_dv.link(src_pk=metadata_dict[\"src_pk\"],\r\n                    src_fk=metadata_dict[\"src_fk\"], \r\n                    src_ldts=metadata_dict[\"src_ldts\"],\r\n                    src_source=metadata_dict[\"src_source\"], \r\n                    source_model=metadata_dict[\"source_model\"],\r\n                    src_extra_columns=metadata_dict[\"src_extra_columns\"]\r\n                    ) }}", "language": "sql", "refs": [["hash__cmis_dbo_usercustomers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_usercustomers"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\14_link\\dv__l_user_customer.sql", "compiled": true, "compiled_code": "\n\n\n\n    -- Generated by AutomateDV (formerly known as dbtvault)\n\n    WITH row_rank_1 AS (\n    SELECT *\n    FROM\n    (\n    SELECT rr.dv_hash_key_l_user_customer, rr.dv_hash_key_h_user, rr.dv_hash_key_h_customer, rr.dv_cdk_l_user_customer, rr.dv_tenant_id, rr.dv_collisioncode, rr.dv_load_timestamp, rr.dv_recordsource,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.dv_hash_key_l_user_customer\n               ORDER BY rr.dv_load_timestamp\n           ) AS row_number\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_usercustomers\" AS rr\n    WHERE rr.dv_hash_key_l_user_customer IS NOT NULL\n    AND rr.dv_hash_key_h_user IS NOT NULL\n    AND rr.dv_hash_key_h_customer IS NOT NULL\n    AND rr.dv_cdk_l_user_customer IS NOT NULL\n    ) l\n    WHERE l.row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.dv_hash_key_l_user_customer, a.dv_hash_key_h_user, a.dv_hash_key_h_customer, a.dv_cdk_l_user_customer, a.dv_tenant_id, a.dv_collisioncode, a.dv_load_timestamp, a.dv_recordsource\n    FROM row_rank_1 AS a\n    LEFT JOIN \"DWH\".\"dbo\".\"dv__l_user_customer\" AS d\n    ON a.dv_hash_key_l_user_customer = d.dv_hash_key_l_user_customer\n    WHERE d.dv_hash_key_l_user_customer IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_h_businessplan": {"database": "DWH", "schema": "dbo", "name": "dv__s_h_businessplan", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\15_satellite\\dv__s_h_businessplan.sql", "original_file_path": "models\\dv\\1_raw\\15_satellite\\dv__s_h_businessplan.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_h_businessplan", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "15_satellite", "dv__s_h_businessplan"], "alias": "dv__s_h_businessplan", "checksum": {"name": "sha256", "checksum": "24c9655de50a14bc3f6965e386efdff3f6788753b524f1fb972b1d431b0617f7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_h_businessplan.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.8132262, "relation_name": "\"DWH\".\"dbo\".\"dv__s_h_businessplan\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"hash__cmis_dbo_businessplans\"\r\nsrc_pk: \"dv_hash_key_h_businessplan\"\r\nsrc_hashdiff: \"dv_hashdiff_s_h_businessplan\"\r\nsrc_payload:\r\n  - \"[Profit]\"\r\n  - \"[Activate]\"\r\n  - \"[PublishType]\"\r\n  - \"[WFIsFinish]\"\r\n  - \"[IsDeleted]\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\r\n                   src_hashdiff=metadata_dict[\"src_hashdiff\"],\r\n                   src_payload=metadata_dict[\"src_payload\"],\r\n                   src_ldts=metadata_dict[\"src_ldts\"],\r\n                   src_source=metadata_dict[\"src_source\"],\r\n                   source_model=metadata_dict[\"source_model\"]\r\n                   )   }}", "language": "sql", "refs": [["hash__cmis_dbo_businessplans"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_businessplans"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_h_businessplan.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n    SELECT a.dv_hash_key_h_businessplan, a.dv_hashdiff_s_h_businessplan, a.[Profit], a.[Activate], a.[PublishType], a.[WFIsFinish], a.[IsDeleted], a.dv_load_timestamp, a.dv_recordsource\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_businessplans\" AS a\n    WHERE a.dv_hash_key_h_businessplan IS NOT NULL\n),\n\nlatest_records AS (\n    SELECT a.dv_hash_key_h_businessplan, a.dv_hashdiff_s_h_businessplan, a.dv_load_timestamp\n    FROM (\n        SELECT current_records.dv_hash_key_h_businessplan, current_records.dv_hashdiff_s_h_businessplan, current_records.dv_load_timestamp,\n            RANK() OVER (\n               PARTITION BY current_records.dv_hash_key_h_businessplan\n               ORDER BY current_records.dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_h_businessplan\" AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.dv_hash_key_h_businessplan\n                FROM source_data\n            ) AS source_records\n                ON current_records.dv_hash_key_h_businessplan = source_records.dv_hash_key_h_businessplan\n    ) AS a\n    WHERE a.rank = 1\n),\n\nrecords_to_insert AS (\n    SELECT DISTINCT stage.dv_hash_key_h_businessplan, stage.dv_hashdiff_s_h_businessplan, stage.[Profit], stage.[Activate], stage.[PublishType], stage.[WFIsFinish], stage.[IsDeleted], stage.dv_load_timestamp, stage.dv_recordsource\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.dv_hash_key_h_businessplan = stage.dv_hash_key_h_businessplan\n        AND latest_records.dv_hashdiff_s_h_businessplan = stage.dv_hashdiff_s_h_businessplan\n    WHERE latest_records.dv_hashdiff_s_h_businessplan IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_h_contract": {"database": "DWH", "schema": "dbo", "name": "dv__s_h_contract", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\15_satellite\\dv__s_h_contract.sql", "original_file_path": "models\\dv\\1_raw\\15_satellite\\dv__s_h_contract.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_h_contract", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "15_satellite", "dv__s_h_contract"], "alias": "dv__s_h_contract", "checksum": {"name": "sha256", "checksum": "fcec7165579dc03e0830906f8405dd61c4f4e6e66c3f6d8ac0f9b6774061eb54"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_h_contract.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.8802276, "relation_name": "\"DWH\".\"dbo\".\"dv__s_h_contract\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"hash__cmis_dbo_contracts\"\r\nsrc_pk: \"dv_hash_key_h_contract\"\r\nsrc_hashdiff: \"dv_hashdiff_s_h_contract\"\r\nsrc_payload:\r\n  - \"[Activate]\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\r\n                   src_hashdiff=metadata_dict[\"src_hashdiff\"],\r\n                   src_payload=metadata_dict[\"src_payload\"],\r\n                   src_ldts=metadata_dict[\"src_ldts\"],\r\n                   src_source=metadata_dict[\"src_source\"],\r\n                   source_model=metadata_dict[\"source_model\"]\r\n                   )   }}", "language": "sql", "refs": [["hash__cmis_dbo_contracts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_contracts"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_h_contract.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n    SELECT a.dv_hash_key_h_contract, a.dv_hashdiff_s_h_contract, a.[Activate], a.dv_load_timestamp, a.dv_recordsource\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_contracts\" AS a\n    WHERE a.dv_hash_key_h_contract IS NOT NULL\n),\n\nlatest_records AS (\n    SELECT a.dv_hash_key_h_contract, a.dv_hashdiff_s_h_contract, a.dv_load_timestamp\n    FROM (\n        SELECT current_records.dv_hash_key_h_contract, current_records.dv_hashdiff_s_h_contract, current_records.dv_load_timestamp,\n            RANK() OVER (\n               PARTITION BY current_records.dv_hash_key_h_contract\n               ORDER BY current_records.dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_h_contract\" AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.dv_hash_key_h_contract\n                FROM source_data\n            ) AS source_records\n                ON current_records.dv_hash_key_h_contract = source_records.dv_hash_key_h_contract\n    ) AS a\n    WHERE a.rank = 1\n),\n\nrecords_to_insert AS (\n    SELECT DISTINCT stage.dv_hash_key_h_contract, stage.dv_hashdiff_s_h_contract, stage.[Activate], stage.dv_load_timestamp, stage.dv_recordsource\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.dv_hash_key_h_contract = stage.dv_hash_key_h_contract\n        AND latest_records.dv_hashdiff_s_h_contract = stage.dv_hashdiff_s_h_contract\n    WHERE latest_records.dv_hashdiff_s_h_contract IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_h_customer": {"database": "DWH", "schema": "dbo", "name": "dv__s_h_customer", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\15_satellite\\dv__s_h_customer.sql", "original_file_path": "models\\dv\\1_raw\\15_satellite\\dv__s_h_customer.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_h_customer", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "15_satellite", "dv__s_h_customer"], "alias": "dv__s_h_customer", "checksum": {"name": "sha256", "checksum": "88b512a14251acbca395f84c4e6e88e6dac9a6424f680fa08101a1149241b452"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_h_customer.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.8992298, "relation_name": "\"DWH\".\"dbo\".\"dv__s_h_customer\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"hash__cmis_dbo_customers\"\r\nsrc_pk: \"dv_hash_key_h_customer\"\r\nsrc_hashdiff: \"dv_hashdiff_s_h_customer\"\r\nsrc_payload:\r\n  - \"Name\"\r\n  - \"Address\"\r\n  - \"Phone\"\r\n  - \"Email\"\r\n  - \"CustomerTypeID\"\r\n  - \"IndustryTypeID\"\r\n  - \"EnvironmentTypeID\"\r\n  - \"ParentID\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\r\n                   src_hashdiff=metadata_dict[\"src_hashdiff\"],\r\n                   src_payload=metadata_dict[\"src_payload\"],\r\n                   src_ldts=metadata_dict[\"src_ldts\"],\r\n                   src_source=metadata_dict[\"src_source\"],\r\n                   source_model=metadata_dict[\"source_model\"]\r\n                   )   }}", "language": "sql", "refs": [["hash__cmis_dbo_customers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_customers"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_h_customer.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n    SELECT a.dv_hash_key_h_customer, a.dv_hashdiff_s_h_customer, a.Name, a.Address, a.Phone, a.Email, a.CustomerTypeID, a.IndustryTypeID, a.EnvironmentTypeID, a.ParentID, a.dv_load_timestamp, a.dv_recordsource\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_customers\" AS a\n    WHERE a.dv_hash_key_h_customer IS NOT NULL\n),\n\nlatest_records AS (\n    SELECT a.dv_hash_key_h_customer, a.dv_hashdiff_s_h_customer, a.dv_load_timestamp\n    FROM (\n        SELECT current_records.dv_hash_key_h_customer, current_records.dv_hashdiff_s_h_customer, current_records.dv_load_timestamp,\n            RANK() OVER (\n               PARTITION BY current_records.dv_hash_key_h_customer\n               ORDER BY current_records.dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_h_customer\" AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.dv_hash_key_h_customer\n                FROM source_data\n            ) AS source_records\n                ON current_records.dv_hash_key_h_customer = source_records.dv_hash_key_h_customer\n    ) AS a\n    WHERE a.rank = 1\n),\n\nrecords_to_insert AS (\n    SELECT DISTINCT stage.dv_hash_key_h_customer, stage.dv_hashdiff_s_h_customer, stage.Name, stage.Address, stage.Phone, stage.Email, stage.CustomerTypeID, stage.IndustryTypeID, stage.EnvironmentTypeID, stage.ParentID, stage.dv_load_timestamp, stage.dv_recordsource\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.dv_hash_key_h_customer = stage.dv_hash_key_h_customer\n        AND latest_records.dv_hashdiff_s_h_customer = stage.dv_hashdiff_s_h_customer\n    WHERE latest_records.dv_hashdiff_s_h_customer IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_h_department": {"database": "DWH", "schema": "dbo", "name": "dv__s_h_department", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\15_satellite\\dv__s_h_department.sql", "original_file_path": "models\\dv\\1_raw\\15_satellite\\dv__s_h_department.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_h_department", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "15_satellite", "dv__s_h_department"], "alias": "dv__s_h_department", "checksum": {"name": "sha256", "checksum": "a81dc829e776d226c20f727d15723bb9e9679aa75f99e23f53859d3cd0298b35"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_h_department.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.9251342, "relation_name": "\"DWH\".\"dbo\".\"dv__s_h_department\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"hash__cmis_dbo_groups\"\r\nsrc_pk: \"dv_hash_key_h_department\"\r\nsrc_hashdiff: \"dv_hashdiff_s_h_department\"\r\nsrc_payload:\r\n  - \"[ID]\"\r\n  - \"[GroupName]\"\r\n  - \"[GroupCode]\"\r\n  - \"[Year]\"\r\n  - \"[ParentID]\"\r\n  - \"[IsActive]\"\r\n  - \"[IsVirtual]\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\r\n                   src_hashdiff=metadata_dict[\"src_hashdiff\"],\r\n                   src_payload=metadata_dict[\"src_payload\"],\r\n                   src_ldts=metadata_dict[\"src_ldts\"],\r\n                   src_source=metadata_dict[\"src_source\"],\r\n                   source_model=metadata_dict[\"source_model\"]\r\n                   )   }}", "language": "sql", "refs": [["hash__cmis_dbo_groups"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_groups"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_h_department.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n    SELECT a.dv_hash_key_h_department, a.dv_hashdiff_s_h_department, a.[ID], a.[GroupName], a.[GroupCode], a.[Year], a.[ParentID], a.[IsActive], a.[IsVirtual], a.dv_load_timestamp, a.dv_recordsource\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_groups\" AS a\n    WHERE a.dv_hash_key_h_department IS NOT NULL\n),\n\nlatest_records AS (\n    SELECT a.dv_hash_key_h_department, a.dv_hashdiff_s_h_department, a.dv_load_timestamp\n    FROM (\n        SELECT current_records.dv_hash_key_h_department, current_records.dv_hashdiff_s_h_department, current_records.dv_load_timestamp,\n            RANK() OVER (\n               PARTITION BY current_records.dv_hash_key_h_department\n               ORDER BY current_records.dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_h_department\" AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.dv_hash_key_h_department\n                FROM source_data\n            ) AS source_records\n                ON current_records.dv_hash_key_h_department = source_records.dv_hash_key_h_department\n    ) AS a\n    WHERE a.rank = 1\n),\n\nrecords_to_insert AS (\n    SELECT DISTINCT stage.dv_hash_key_h_department, stage.dv_hashdiff_s_h_department, stage.[ID], stage.[GroupName], stage.[GroupCode], stage.[Year], stage.[ParentID], stage.[IsActive], stage.[IsVirtual], stage.dv_load_timestamp, stage.dv_recordsource\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.dv_hash_key_h_department = stage.dv_hash_key_h_department\n        AND latest_records.dv_hashdiff_s_h_department = stage.dv_hashdiff_s_h_department\n    WHERE latest_records.dv_hashdiff_s_h_department IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_h_estimatecontract": {"database": "DWH", "schema": "dbo", "name": "dv__s_h_estimatecontract", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\15_satellite\\dv__s_h_estimatecontract.sql", "original_file_path": "models\\dv\\1_raw\\15_satellite\\dv__s_h_estimatecontract.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_h_estimatecontract", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "15_satellite", "dv__s_h_estimatecontract"], "alias": "dv__s_h_estimatecontract", "checksum": {"name": "sha256", "checksum": "36b79598873bfdd68e294bf1f336dfa45f148c06a72ddd96d5a1dc556ceb4995"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_h_estimatecontract.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.9482052, "relation_name": "\"DWH\".\"dbo\".\"dv__s_h_estimatecontract\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"hash__cmis_dbo_estimatecontracts\"\r\nsrc_pk: \"dv_hash_key_h_estimatecontract\"\r\nsrc_hashdiff: \"dv_hashdiff_s_h_estimatecontract\"\r\nsrc_payload:\r\n  - \"[Profit]\"\r\n  - \"[Status]\"\r\n  - \"[Activate]\"\r\n  - \"[IsDeleted]\"\r\n  - \"[PublishType]\"\r\n  - \"[WFIsFinish]\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\r\n                   src_hashdiff=metadata_dict[\"src_hashdiff\"],\r\n                   src_payload=metadata_dict[\"src_payload\"],\r\n                   src_ldts=metadata_dict[\"src_ldts\"],\r\n                   src_source=metadata_dict[\"src_source\"],\r\n                   source_model=metadata_dict[\"source_model\"]\r\n                   )   }}", "language": "sql", "refs": [["hash__cmis_dbo_estimatecontracts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_estimatecontracts"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_h_estimatecontract.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n    SELECT a.dv_hash_key_h_estimatecontract, a.dv_hashdiff_s_h_estimatecontract, a.[Profit], a.[Status], a.[Activate], a.[IsDeleted], a.[PublishType], a.[WFIsFinish], a.dv_load_timestamp, a.dv_recordsource\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_estimatecontracts\" AS a\n    WHERE a.dv_hash_key_h_estimatecontract IS NOT NULL\n),\n\nlatest_records AS (\n    SELECT a.dv_hash_key_h_estimatecontract, a.dv_hashdiff_s_h_estimatecontract, a.dv_load_timestamp\n    FROM (\n        SELECT current_records.dv_hash_key_h_estimatecontract, current_records.dv_hashdiff_s_h_estimatecontract, current_records.dv_load_timestamp,\n            RANK() OVER (\n               PARTITION BY current_records.dv_hash_key_h_estimatecontract\n               ORDER BY current_records.dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_h_estimatecontract\" AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.dv_hash_key_h_estimatecontract\n                FROM source_data\n            ) AS source_records\n                ON current_records.dv_hash_key_h_estimatecontract = source_records.dv_hash_key_h_estimatecontract\n    ) AS a\n    WHERE a.rank = 1\n),\n\nrecords_to_insert AS (\n    SELECT DISTINCT stage.dv_hash_key_h_estimatecontract, stage.dv_hashdiff_s_h_estimatecontract, stage.[Profit], stage.[Status], stage.[Activate], stage.[IsDeleted], stage.[PublishType], stage.[WFIsFinish], stage.dv_load_timestamp, stage.dv_recordsource\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.dv_hash_key_h_estimatecontract = stage.dv_hash_key_h_estimatecontract\n        AND latest_records.dv_hashdiff_s_h_estimatecontract = stage.dv_hashdiff_s_h_estimatecontract\n    WHERE latest_records.dv_hashdiff_s_h_estimatecontract IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_h_finalizationcontract": {"database": "DWH", "schema": "dbo", "name": "dv__s_h_finalizationcontract", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\15_satellite\\dv__s_h_finalizationcontract.sql", "original_file_path": "models\\dv\\1_raw\\15_satellite\\dv__s_h_finalizationcontract.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_h_finalizationcontract", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "15_satellite", "dv__s_h_finalizationcontract"], "alias": "dv__s_h_finalizationcontract", "checksum": {"name": "sha256", "checksum": "d7c964e39dc8afc0d17c53b6ce124d083a63b00432aeb2bf841fd23904861d40"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_h_finalizationcontract.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.9702075, "relation_name": "\"DWH\".\"dbo\".\"dv__s_h_finalizationcontract\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"hash__cmis_dbo_finalizationcontracts\"\r\nsrc_pk: \"dv_hash_key_h_finalizationcontract\"\r\nsrc_hashdiff: \"dv_hashdiff_s_h_finalizationcontract\"\r\nsrc_payload:\r\n  - \"[Profit]\"\r\n  - \"[Activate]\"\r\n  - \"[PublishType]\"\r\n  - \"[WFIsFinish]\"\r\n  - \"[IsDeleted]\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\r\n                   src_hashdiff=metadata_dict[\"src_hashdiff\"],\r\n                   src_payload=metadata_dict[\"src_payload\"],\r\n                   src_ldts=metadata_dict[\"src_ldts\"],\r\n                   src_source=metadata_dict[\"src_source\"],\r\n                   source_model=metadata_dict[\"source_model\"]\r\n                   )   }}", "language": "sql", "refs": [["hash__cmis_dbo_finalizationcontracts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_finalizationcontracts"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_h_finalizationcontract.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n    SELECT a.dv_hash_key_h_finalizationcontract, a.dv_hashdiff_s_h_finalizationcontract, a.[Profit], a.[Activate], a.[PublishType], a.[WFIsFinish], a.[IsDeleted], a.dv_load_timestamp, a.dv_recordsource\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_finalizationcontracts\" AS a\n    WHERE a.dv_hash_key_h_finalizationcontract IS NOT NULL\n),\n\nlatest_records AS (\n    SELECT a.dv_hash_key_h_finalizationcontract, a.dv_hashdiff_s_h_finalizationcontract, a.dv_load_timestamp\n    FROM (\n        SELECT current_records.dv_hash_key_h_finalizationcontract, current_records.dv_hashdiff_s_h_finalizationcontract, current_records.dv_load_timestamp,\n            RANK() OVER (\n               PARTITION BY current_records.dv_hash_key_h_finalizationcontract\n               ORDER BY current_records.dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_h_finalizationcontract\" AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.dv_hash_key_h_finalizationcontract\n                FROM source_data\n            ) AS source_records\n                ON current_records.dv_hash_key_h_finalizationcontract = source_records.dv_hash_key_h_finalizationcontract\n    ) AS a\n    WHERE a.rank = 1\n),\n\nrecords_to_insert AS (\n    SELECT DISTINCT stage.dv_hash_key_h_finalizationcontract, stage.dv_hashdiff_s_h_finalizationcontract, stage.[Profit], stage.[Activate], stage.[PublishType], stage.[WFIsFinish], stage.[IsDeleted], stage.dv_load_timestamp, stage.dv_recordsource\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.dv_hash_key_h_finalizationcontract = stage.dv_hash_key_h_finalizationcontract\n        AND latest_records.dv_hashdiff_s_h_finalizationcontract = stage.dv_hashdiff_s_h_finalizationcontract\n    WHERE latest_records.dv_hashdiff_s_h_finalizationcontract IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_h_opportunity": {"database": "DWH", "schema": "dbo", "name": "dv__s_h_opportunity", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\15_satellite\\dv__s_h_opportunity.sql", "original_file_path": "models\\dv\\1_raw\\15_satellite\\dv__s_h_opportunity.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_h_opportunity", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "15_satellite", "dv__s_h_opportunity"], "alias": "dv__s_h_opportunity", "checksum": {"name": "sha256", "checksum": "8373acc071c46e4c171c9146bc072c3b8baae72714a0a757dfa146120572bbc4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_h_opportunity.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307660.9957826, "relation_name": "\"DWH\".\"dbo\".\"dv__s_h_opportunity\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"hash__cmis_dbo_opportunities\"\r\nsrc_pk: \"dv_hash_key_h_opportunity\"\r\nsrc_hashdiff: \"dv_hashdiff_s_h_opportunity\"\r\nsrc_payload:\r\n  - \"[CustomerID]\"\r\n  - \"[SaleManID]\"\r\n  - \"[OpportunityType]\"\r\n  - \"[GroupID]\"\r\n  - \"[EstimateRevenue]\"\r\n  - \"[StatusID]\"\r\n  - \"[PublishType]\"\r\n  - \"[Activate]\"\r\n  - \"[IsDeleted]\"\r\n  - \"[ParentID]\"\r\n  - \"[BusinessOpportunityID]\"\r\n  - \"[CreatedDate]\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\r\n                   src_hashdiff=metadata_dict[\"src_hashdiff\"],\r\n                   src_payload=metadata_dict[\"src_payload\"],\r\n                   src_ldts=metadata_dict[\"src_ldts\"],\r\n                   src_source=metadata_dict[\"src_source\"],\r\n                   source_model=metadata_dict[\"source_model\"]\r\n                   )   }}", "language": "sql", "refs": [["hash__cmis_dbo_opportunities"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_opportunities"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_h_opportunity.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n    SELECT a.dv_hash_key_h_opportunity, a.dv_hashdiff_s_h_opportunity, a.[CustomerID], a.[SaleManID], a.[OpportunityType], a.[GroupID], a.[EstimateRevenue], a.[StatusID], a.[PublishType], a.[Activate], a.[IsDeleted], a.[ParentID], a.[BusinessOpportunityID], a.[CreatedDate], a.dv_load_timestamp, a.dv_recordsource\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_opportunities\" AS a\n    WHERE a.dv_hash_key_h_opportunity IS NOT NULL\n),\n\nlatest_records AS (\n    SELECT a.dv_hash_key_h_opportunity, a.dv_hashdiff_s_h_opportunity, a.dv_load_timestamp\n    FROM (\n        SELECT current_records.dv_hash_key_h_opportunity, current_records.dv_hashdiff_s_h_opportunity, current_records.dv_load_timestamp,\n            RANK() OVER (\n               PARTITION BY current_records.dv_hash_key_h_opportunity\n               ORDER BY current_records.dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_h_opportunity\" AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.dv_hash_key_h_opportunity\n                FROM source_data\n            ) AS source_records\n                ON current_records.dv_hash_key_h_opportunity = source_records.dv_hash_key_h_opportunity\n    ) AS a\n    WHERE a.rank = 1\n),\n\nrecords_to_insert AS (\n    SELECT DISTINCT stage.dv_hash_key_h_opportunity, stage.dv_hashdiff_s_h_opportunity, stage.[CustomerID], stage.[SaleManID], stage.[OpportunityType], stage.[GroupID], stage.[EstimateRevenue], stage.[StatusID], stage.[PublishType], stage.[Activate], stage.[IsDeleted], stage.[ParentID], stage.[BusinessOpportunityID], stage.[CreatedDate], stage.dv_load_timestamp, stage.dv_recordsource\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.dv_hash_key_h_opportunity = stage.dv_hash_key_h_opportunity\n        AND latest_records.dv_hashdiff_s_h_opportunity = stage.dv_hashdiff_s_h_opportunity\n    WHERE latest_records.dv_hashdiff_s_h_opportunity IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_h_order": {"database": "DWH", "schema": "dbo", "name": "dv__s_h_order", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\15_satellite\\dv__s_h_order.sql", "original_file_path": "models\\dv\\1_raw\\15_satellite\\dv__s_h_order.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_h_order", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "15_satellite", "dv__s_h_order"], "alias": "dv__s_h_order", "checksum": {"name": "sha256", "checksum": "56d31c312fe8db263f017dbe885c2c44994aa2186c4d12e3065979a4356bcdaa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_h_order.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307661.0225453, "relation_name": "\"DWH\".\"dbo\".\"dv__s_h_order\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"hash__cmis_dbo_orders\"\r\nsrc_pk: \"dv_hash_key_h_order\"\r\nsrc_hashdiff: \"dv_hashdiff_s_h_order\"\r\nsrc_payload:\r\n  - \"[Activate]\"\r\n  - \"[CreatedDate]\"\r\n  - \"[TotalBeforeVAT]\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\r\n                   src_hashdiff=metadata_dict[\"src_hashdiff\"],\r\n                   src_payload=metadata_dict[\"src_payload\"],\r\n                   src_ldts=metadata_dict[\"src_ldts\"],\r\n                   src_source=metadata_dict[\"src_source\"],\r\n                   source_model=metadata_dict[\"source_model\"]\r\n                   )   }}", "language": "sql", "refs": [["hash__cmis_dbo_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orders"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_h_order.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n    SELECT a.dv_hash_key_h_order, a.dv_hashdiff_s_h_order, a.[Activate], a.[CreatedDate], a.[TotalBeforeVAT], a.dv_load_timestamp, a.dv_recordsource\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_orders\" AS a\n    WHERE a.dv_hash_key_h_order IS NOT NULL\n),\n\nlatest_records AS (\n    SELECT a.dv_hash_key_h_order, a.dv_hashdiff_s_h_order, a.dv_load_timestamp\n    FROM (\n        SELECT current_records.dv_hash_key_h_order, current_records.dv_hashdiff_s_h_order, current_records.dv_load_timestamp,\n            RANK() OVER (\n               PARTITION BY current_records.dv_hash_key_h_order\n               ORDER BY current_records.dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_h_order\" AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.dv_hash_key_h_order\n                FROM source_data\n            ) AS source_records\n                ON current_records.dv_hash_key_h_order = source_records.dv_hash_key_h_order\n    ) AS a\n    WHERE a.rank = 1\n),\n\nrecords_to_insert AS (\n    SELECT DISTINCT stage.dv_hash_key_h_order, stage.dv_hashdiff_s_h_order, stage.[Activate], stage.[CreatedDate], stage.[TotalBeforeVAT], stage.dv_load_timestamp, stage.dv_recordsource\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.dv_hash_key_h_order = stage.dv_hash_key_h_order\n        AND latest_records.dv_hashdiff_s_h_order = stage.dv_hashdiff_s_h_order\n    WHERE latest_records.dv_hashdiff_s_h_order IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_h_product": {"database": "DWH", "schema": "dbo", "name": "dv__s_h_product", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\15_satellite\\dv__s_h_product.sql", "original_file_path": "models\\dv\\1_raw\\15_satellite\\dv__s_h_product.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_h_product", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "15_satellite", "dv__s_h_product"], "alias": "dv__s_h_product", "checksum": {"name": "sha256", "checksum": "ae86b4f020433a871687da0398d583297060c5f39c79534eb69a5b372f069ef7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_h_product.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307661.0415454, "relation_name": "\"DWH\".\"dbo\".\"dv__s_h_product\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"hash__cmis_dbo_branches\"\r\nsrc_pk: \"dv_hash_key_h_product\"\r\nsrc_hashdiff: \"dv_hashdiff_s_h_product\"\r\nsrc_payload:\r\n  - \"[Code]\"\r\n  - \"[Name]\"\r\n  - \"[Description]\"\r\n  - \"[Activate]\"\r\n  - \"[IsDeleted]\"\r\n  - \"[ParentID]\"\r\n  - \"[ADN]\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\r\n                   src_hashdiff=metadata_dict[\"src_hashdiff\"],\r\n                   src_payload=metadata_dict[\"src_payload\"],\r\n                   src_ldts=metadata_dict[\"src_ldts\"],\r\n                   src_source=metadata_dict[\"src_source\"],\r\n                   source_model=metadata_dict[\"source_model\"]\r\n                   )   }}", "language": "sql", "refs": [["hash__cmis_dbo_branches"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_branches"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_h_product.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n    SELECT a.dv_hash_key_h_product, a.dv_hashdiff_s_h_product, a.[Code], a.[Name], a.[Description], a.[Activate], a.[IsDeleted], a.[ParentID], a.[ADN], a.dv_load_timestamp, a.dv_recordsource\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_branches\" AS a\n    WHERE a.dv_hash_key_h_product IS NOT NULL\n),\n\nlatest_records AS (\n    SELECT a.dv_hash_key_h_product, a.dv_hashdiff_s_h_product, a.dv_load_timestamp\n    FROM (\n        SELECT current_records.dv_hash_key_h_product, current_records.dv_hashdiff_s_h_product, current_records.dv_load_timestamp,\n            RANK() OVER (\n               PARTITION BY current_records.dv_hash_key_h_product\n               ORDER BY current_records.dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_h_product\" AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.dv_hash_key_h_product\n                FROM source_data\n            ) AS source_records\n                ON current_records.dv_hash_key_h_product = source_records.dv_hash_key_h_product\n    ) AS a\n    WHERE a.rank = 1\n),\n\nrecords_to_insert AS (\n    SELECT DISTINCT stage.dv_hash_key_h_product, stage.dv_hashdiff_s_h_product, stage.[Code], stage.[Name], stage.[Description], stage.[Activate], stage.[IsDeleted], stage.[ParentID], stage.[ADN], stage.dv_load_timestamp, stage.dv_recordsource\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.dv_hash_key_h_product = stage.dv_hash_key_h_product\n        AND latest_records.dv_hashdiff_s_h_product = stage.dv_hashdiff_s_h_product\n    WHERE latest_records.dv_hashdiff_s_h_product IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_h_user": {"database": "DWH", "schema": "dbo", "name": "dv__s_h_user", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\15_satellite\\dv__s_h_user.sql", "original_file_path": "models\\dv\\1_raw\\15_satellite\\dv__s_h_user.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_h_user", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "15_satellite", "dv__s_h_user"], "alias": "dv__s_h_user", "checksum": {"name": "sha256", "checksum": "a96e226646c64acb842e777682479cd2dc46ffc56b420d37a52c9c196d973373"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_h_user.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307661.0725496, "relation_name": "\"DWH\".\"dbo\".\"dv__s_h_user\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"hash__cmis_dbo_users\"\r\nsrc_pk: \r\n  - \"dv_hash_key_h_user\"\r\nsrc_payload:\r\n  - \"[ID]\"\r\n  - \"[FirstName]\"\r\n  - \"[LastName]\"\r\n  - \"[EmployeeCode]\"\r\n  - \"[Gender]\"\r\n  - \"[Active]\"\r\n  - \"[BeginWorkDate]\"\r\n  - \"[TitleID]\"\r\nsrc_hashdiff: \"dv_hashdiff_s_h_user\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\r\n                      src_payload=metadata_dict[\"src_payload\"],\r\n                      src_hashdiff=metadata_dict[\"src_hashdiff\"],\r\n                      src_ldts=metadata_dict[\"src_ldts\"],\r\n                      src_source=metadata_dict[\"src_source\"],\r\n                      source_model=metadata_dict[\"source_model\"]) }}", "language": "sql", "refs": [["hash__cmis_dbo_users"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_users"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_h_user.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n    SELECT a.dv_hash_key_h_user, a.dv_hashdiff_s_h_user, a.[ID], a.[FirstName], a.[LastName], a.[EmployeeCode], a.[Gender], a.[Active], a.[BeginWorkDate], a.[TitleID], a.dv_load_timestamp, a.dv_recordsource\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_users\" AS a\n    WHERE a.dv_hash_key_h_user IS NOT NULL\n),\n\nlatest_records AS (\n    SELECT a.dv_hash_key_h_user, a.dv_hashdiff_s_h_user, a.dv_load_timestamp\n    FROM (\n        SELECT current_records.dv_hash_key_h_user, current_records.dv_hashdiff_s_h_user, current_records.dv_load_timestamp,\n            RANK() OVER (\n               PARTITION BY current_records.dv_hash_key_h_user\n               ORDER BY current_records.dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_h_user\" AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.dv_hash_key_h_user\n                FROM source_data\n            ) AS source_records\n                ON current_records.dv_hash_key_h_user = source_records.dv_hash_key_h_user\n    ) AS a\n    WHERE a.rank = 1\n),\n\nrecords_to_insert AS (\n    SELECT DISTINCT stage.dv_hash_key_h_user, stage.dv_hashdiff_s_h_user, stage.[ID], stage.[FirstName], stage.[LastName], stage.[EmployeeCode], stage.[Gender], stage.[Active], stage.[BeginWorkDate], stage.[TitleID], stage.dv_load_timestamp, stage.dv_recordsource\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.dv_hash_key_h_user = stage.dv_hash_key_h_user\n        AND latest_records.dv_hashdiff_s_h_user = stage.dv_hashdiff_s_h_user\n    WHERE latest_records.dv_hashdiff_s_h_user IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_l_contract_lockstatus": {"database": "DWH", "schema": "dbo", "name": "dv__s_l_contract_lockstatus", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\15_satellite\\dv__s_l_contract_lockstatus.sql", "original_file_path": "models\\dv\\1_raw\\15_satellite\\dv__s_l_contract_lockstatus.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_l_contract_lockstatus", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "15_satellite", "dv__s_l_contract_lockstatus"], "alias": "dv__s_l_contract_lockstatus", "checksum": {"name": "sha256", "checksum": "98492c87d069f8abd4a1974cb3aff75a9d4bbe56ba452918b7da6f369c1aac4e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_l_contract_lockstatus.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307661.114547, "relation_name": "\"DWH\".\"dbo\".\"dv__s_l_contract_lockstatus\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"hash__cmis_dbo_contractlockstatus\"\r\nsrc_pk: \r\n  - \"dv_hash_key_l_contract_lockstatus\"\r\nsrc_payload:\r\n  - \"[IsLock]\"\r\n  - \"[LockDate]\"\r\n  - \"[ID]\"\r\nsrc_hashdiff: \"dv_hashdiff_s_l_contract_lockstatus\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\r\n                      src_payload=metadata_dict[\"src_payload\"],\r\n                      src_hashdiff=metadata_dict[\"src_hashdiff\"],\r\n                      src_ldts=metadata_dict[\"src_ldts\"],\r\n                      src_source=metadata_dict[\"src_source\"],\r\n                      source_model=metadata_dict[\"source_model\"]) }}", "language": "sql", "refs": [["hash__cmis_dbo_contractlockstatus"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_contractlockstatus"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_l_contract_lockstatus.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n    SELECT a.dv_hash_key_l_contract_lockstatus, a.dv_hashdiff_s_l_contract_lockstatus, a.[IsLock], a.[LockDate], a.[ID], a.dv_load_timestamp, a.dv_recordsource\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_contractlockstatus\" AS a\n    WHERE a.dv_hash_key_l_contract_lockstatus IS NOT NULL\n),\n\nlatest_records AS (\n    SELECT a.dv_hash_key_l_contract_lockstatus, a.dv_hashdiff_s_l_contract_lockstatus, a.dv_load_timestamp\n    FROM (\n        SELECT current_records.dv_hash_key_l_contract_lockstatus, current_records.dv_hashdiff_s_l_contract_lockstatus, current_records.dv_load_timestamp,\n            RANK() OVER (\n               PARTITION BY current_records.dv_hash_key_l_contract_lockstatus\n               ORDER BY current_records.dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_l_contract_lockstatus\" AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.dv_hash_key_l_contract_lockstatus\n                FROM source_data\n            ) AS source_records\n                ON current_records.dv_hash_key_l_contract_lockstatus = source_records.dv_hash_key_l_contract_lockstatus\n    ) AS a\n    WHERE a.rank = 1\n),\n\nrecords_to_insert AS (\n    SELECT DISTINCT stage.dv_hash_key_l_contract_lockstatus, stage.dv_hashdiff_s_l_contract_lockstatus, stage.[IsLock], stage.[LockDate], stage.[ID], stage.dv_load_timestamp, stage.dv_recordsource\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.dv_hash_key_l_contract_lockstatus = stage.dv_hash_key_l_contract_lockstatus\n        AND latest_records.dv_hashdiff_s_l_contract_lockstatus = stage.dv_hashdiff_s_l_contract_lockstatus\n    WHERE latest_records.dv_hashdiff_s_l_contract_lockstatus IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_l_opportunity_invoice": {"database": "DWH", "schema": "dbo", "name": "dv__s_l_opportunity_invoice", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\15_satellite\\dv__s_l_opportunity_invoice.sql", "original_file_path": "models\\dv\\1_raw\\15_satellite\\dv__s_l_opportunity_invoice.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_l_opportunity_invoice", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "15_satellite", "dv__s_l_opportunity_invoice"], "alias": "dv__s_l_opportunity_invoice", "checksum": {"name": "sha256", "checksum": "152fee1fb8fce9d34c473f9a5c0dbd8f60997d4a7623d936b144f47100eba9f5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_l_opportunity_invoice.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307661.1547577, "relation_name": "\"DWH\".\"dbo\".\"dv__s_l_opportunity_invoice\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"hash__cmis_dbo_ct00\"\r\nsrc_pk: \r\n  - \"dv_hash_key_l_opportunity_invoice\"\r\nsrc_payload:\r\n  - \"[ngay_ct]\"\r\n  - \"[ps_co]\"\r\n  - \"[ps_no]\"\r\nsrc_hashdiff: \"dv_hashdiff_s_l_opportunity_invoice\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\r\n                      src_payload=metadata_dict[\"src_payload\"],\r\n                      src_hashdiff=metadata_dict[\"src_hashdiff\"],\r\n                      src_ldts=metadata_dict[\"src_ldts\"],\r\n                      src_source=metadata_dict[\"src_source\"],\r\n                      source_model=metadata_dict[\"source_model\"]) }}", "language": "sql", "refs": [["hash__cmis_dbo_ct00"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_ct00"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_l_opportunity_invoice.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n    SELECT a.dv_hash_key_l_opportunity_invoice, a.dv_hashdiff_s_l_opportunity_invoice, a.[ngay_ct], a.[ps_co], a.[ps_no], a.dv_load_timestamp, a.dv_recordsource\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_ct00\" AS a\n    WHERE a.dv_hash_key_l_opportunity_invoice IS NOT NULL\n),\n\nlatest_records AS (\n    SELECT a.dv_hash_key_l_opportunity_invoice, a.dv_hashdiff_s_l_opportunity_invoice, a.dv_load_timestamp\n    FROM (\n        SELECT current_records.dv_hash_key_l_opportunity_invoice, current_records.dv_hashdiff_s_l_opportunity_invoice, current_records.dv_load_timestamp,\n            RANK() OVER (\n               PARTITION BY current_records.dv_hash_key_l_opportunity_invoice\n               ORDER BY current_records.dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_l_opportunity_invoice\" AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.dv_hash_key_l_opportunity_invoice\n                FROM source_data\n            ) AS source_records\n                ON current_records.dv_hash_key_l_opportunity_invoice = source_records.dv_hash_key_l_opportunity_invoice\n    ) AS a\n    WHERE a.rank = 1\n),\n\nrecords_to_insert AS (\n    SELECT DISTINCT stage.dv_hash_key_l_opportunity_invoice, stage.dv_hashdiff_s_l_opportunity_invoice, stage.[ngay_ct], stage.[ps_co], stage.[ps_no], stage.dv_load_timestamp, stage.dv_recordsource\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.dv_hash_key_l_opportunity_invoice = stage.dv_hash_key_l_opportunity_invoice\n        AND latest_records.dv_hashdiff_s_l_opportunity_invoice = stage.dv_hashdiff_s_l_opportunity_invoice\n    WHERE latest_records.dv_hashdiff_s_l_opportunity_invoice IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_l_orderdetail": {"database": "DWH", "schema": "dbo", "name": "dv__s_l_orderdetail", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\15_satellite\\dv__s_l_orderdetail.sql", "original_file_path": "models\\dv\\1_raw\\15_satellite\\dv__s_l_orderdetail.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_l_orderdetail", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "15_satellite", "dv__s_l_orderdetail"], "alias": "dv__s_l_orderdetail", "checksum": {"name": "sha256", "checksum": "390b7b50f1c085b913cf47d563f0078d0a9eaffdf3042288800e6fa9366b7b51"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_l_orderdetail.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307661.1907556, "relation_name": "\"DWH\".\"dbo\".\"dv__s_l_orderdetail\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"hash__cmis_dbo_orderdetails\"\r\nsrc_pk: \r\n  - \"dv_hash_key_l_orderdetail\"\r\nsrc_payload:\r\n  - \"[TotalBeforeVAT]\"\r\n  - \"[IsMain]\"\r\nsrc_hashdiff: \"dv_hashdiff_s_l_orderdetail\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\r\n                      src_payload=metadata_dict[\"src_payload\"],\r\n                      src_hashdiff=metadata_dict[\"src_hashdiff\"],\r\n                      src_ldts=metadata_dict[\"src_ldts\"],\r\n                      src_source=metadata_dict[\"src_source\"],\r\n                      source_model=metadata_dict[\"source_model\"]) }}", "language": "sql", "refs": [["hash__cmis_dbo_orderdetails"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orderdetails"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_l_orderdetail.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n    SELECT a.dv_hash_key_l_orderdetail, a.dv_hashdiff_s_l_orderdetail, a.[TotalBeforeVAT], a.[IsMain], a.dv_load_timestamp, a.dv_recordsource\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_orderdetails\" AS a\n    WHERE a.dv_hash_key_l_orderdetail IS NOT NULL\n),\n\nlatest_records AS (\n    SELECT a.dv_hash_key_l_orderdetail, a.dv_hashdiff_s_l_orderdetail, a.dv_load_timestamp\n    FROM (\n        SELECT current_records.dv_hash_key_l_orderdetail, current_records.dv_hashdiff_s_l_orderdetail, current_records.dv_load_timestamp,\n            RANK() OVER (\n               PARTITION BY current_records.dv_hash_key_l_orderdetail\n               ORDER BY current_records.dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_l_orderdetail\" AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.dv_hash_key_l_orderdetail\n                FROM source_data\n            ) AS source_records\n                ON current_records.dv_hash_key_l_orderdetail = source_records.dv_hash_key_l_orderdetail\n    ) AS a\n    WHERE a.rank = 1\n),\n\nrecords_to_insert AS (\n    SELECT DISTINCT stage.dv_hash_key_l_orderdetail, stage.dv_hashdiff_s_l_orderdetail, stage.[TotalBeforeVAT], stage.[IsMain], stage.dv_load_timestamp, stage.dv_recordsource\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.dv_hash_key_l_orderdetail = stage.dv_hash_key_l_orderdetail\n        AND latest_records.dv_hashdiff_s_l_orderdetail = stage.dv_hashdiff_s_l_orderdetail\n    WHERE latest_records.dv_hashdiff_s_l_orderdetail IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_l_user_customer": {"database": "DWH", "schema": "dbo", "name": "dv__s_l_user_customer", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\15_satellite\\dv__s_l_user_customer.sql", "original_file_path": "models\\dv\\1_raw\\15_satellite\\dv__s_l_user_customer.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_l_user_customer", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "15_satellite", "dv__s_l_user_customer"], "alias": "dv__s_l_user_customer", "checksum": {"name": "sha256", "checksum": "3bacfd48d402f312e18cc7406e97b1fa43d8565a19531558d2462174b834c1a3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_l_user_customer.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307661.2257514, "relation_name": "\"DWH\".\"dbo\".\"dv__s_l_user_customer\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"hash__cmis_dbo_usercustomers\"\r\nsrc_pk: \r\n  - \"dv_hash_key_l_user_customer\"\r\nsrc_payload:\r\n  - \"AccountType\"\r\n  - \"Activate\"\r\n  - \"GroupID\" \r\nsrc_hashdiff: \"dv_hashdiff_s_l_user_customer\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\r\n                      src_payload=metadata_dict[\"src_payload\"],\r\n                      src_hashdiff=metadata_dict[\"src_hashdiff\"],\r\n                      src_ldts=metadata_dict[\"src_ldts\"],\r\n                      src_source=metadata_dict[\"src_source\"],\r\n                      source_model=metadata_dict[\"source_model\"]) }}", "language": "sql", "refs": [["hash__cmis_dbo_usercustomers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_usercustomers"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_l_user_customer.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n    SELECT a.dv_hash_key_l_user_customer, a.dv_hashdiff_s_l_user_customer, a.AccountType, a.Activate, a.GroupID, a.dv_load_timestamp, a.dv_recordsource\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_usercustomers\" AS a\n    WHERE a.dv_hash_key_l_user_customer IS NOT NULL\n),\n\nlatest_records AS (\n    SELECT a.dv_hash_key_l_user_customer, a.dv_hashdiff_s_l_user_customer, a.dv_load_timestamp\n    FROM (\n        SELECT current_records.dv_hash_key_l_user_customer, current_records.dv_hashdiff_s_l_user_customer, current_records.dv_load_timestamp,\n            RANK() OVER (\n               PARTITION BY current_records.dv_hash_key_l_user_customer\n               ORDER BY current_records.dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_l_user_customer\" AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.dv_hash_key_l_user_customer\n                FROM source_data\n            ) AS source_records\n                ON current_records.dv_hash_key_l_user_customer = source_records.dv_hash_key_l_user_customer\n    ) AS a\n    WHERE a.rank = 1\n),\n\nrecords_to_insert AS (\n    SELECT DISTINCT stage.dv_hash_key_l_user_customer, stage.dv_hashdiff_s_l_user_customer, stage.AccountType, stage.Activate, stage.GroupID, stage.dv_load_timestamp, stage.dv_recordsource\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.dv_hash_key_l_user_customer = stage.dv_hash_key_l_user_customer\n        AND latest_records.dv_hashdiff_s_l_user_customer = stage.dv_hashdiff_s_l_user_customer\n    WHERE latest_records.dv_hashdiff_s_l_user_customer IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_l_user_customer_rt": {"database": "DWH", "schema": "dbo", "name": "dv__s_l_user_customer_rt", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\15_satellite\\dv__s_l_user_customer_rt.sql", "original_file_path": "models\\dv\\1_raw\\15_satellite\\dv__s_l_user_customer_rt.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_l_user_customer_rt", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "15_satellite", "dv__s_l_user_customer_rt"], "alias": "dv__s_l_user_customer_rt", "checksum": {"name": "sha256", "checksum": "22c1dd50ab8b03d8a59cecbbd31699ff93ab02b03af4dfd9bb16dde9ae88c667"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_l_user_customer_rt.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689307661.2466471, "relation_name": "\"DWH\".\"dbo\".\"dv__s_l_user_customer_rt\"", "raw_code": "{%- set yaml_metadata -%}\r\nsource_model: \"hash__cmis_dbo_usercustomers\"\r\nsrc_pk: \r\n  - \"dv_hash_key_l_user_customer\"\r\nsrc_hashdiff: \"dv_hashdiff_s_l_user_customer_rt\"\r\nsrc_ldts: \"dv_load_timestamp\"\r\nsrc_source: \"dv_recordsource\"\r\n{%- endset -%}\r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\r\n                      src_payload=metadata_dict[\"src_payload\"],\r\n                      src_hashdiff=metadata_dict[\"src_hashdiff\"],\r\n                      src_ldts=metadata_dict[\"src_ldts\"],\r\n                      src_source=metadata_dict[\"src_source\"],\r\n                      source_model=metadata_dict[\"source_model\"]) }}", "language": "sql", "refs": [["hash__cmis_dbo_usercustomers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_usercustomers"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\15_satellite\\dv__s_l_user_customer_rt.sql", "compiled": true, "compiled_code": "\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n    SELECT a.dv_hash_key_l_user_customer, a.dv_hashdiff_s_l_user_customer_rt, a.dv_load_timestamp, a.dv_recordsource\n    FROM \"DWH\".\"dbo\".\"hash__cmis_dbo_usercustomers\" AS a\n    WHERE a.dv_hash_key_l_user_customer IS NOT NULL\n),\n\nlatest_records AS (\n    SELECT a.dv_hash_key_l_user_customer, a.dv_hashdiff_s_l_user_customer_rt, a.dv_load_timestamp\n    FROM (\n        SELECT current_records.dv_hash_key_l_user_customer, current_records.dv_hashdiff_s_l_user_customer_rt, current_records.dv_load_timestamp,\n            RANK() OVER (\n               PARTITION BY current_records.dv_hash_key_l_user_customer\n               ORDER BY current_records.dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_l_user_customer_rt\" AS current_records\n            JOIN (\n                SELECT DISTINCT source_data.dv_hash_key_l_user_customer\n                FROM source_data\n            ) AS source_records\n                ON current_records.dv_hash_key_l_user_customer = source_records.dv_hash_key_l_user_customer\n    ) AS a\n    WHERE a.rank = 1\n),\n\nrecords_to_insert AS (\n    SELECT DISTINCT stage.dv_hash_key_l_user_customer, stage.dv_hashdiff_s_l_user_customer_rt, stage.dv_load_timestamp, stage.dv_recordsource\n    FROM source_data AS stage\n    LEFT JOIN latest_records\n    ON latest_records.dv_hash_key_l_user_customer = stage.dv_hash_key_l_user_customer\n        AND latest_records.dv_hashdiff_s_l_user_customer_rt = stage.dv_hashdiff_s_l_user_customer_rt\n    WHERE latest_records.dv_hashdiff_s_l_user_customer_rt IS NULL\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__r_customertypes": {"database": "DWH", "schema": "dbo", "name": "dv__r_customertypes", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\16_reference\\dv__r_customertypes.sql", "original_file_path": "models\\dv\\1_raw\\16_reference\\dv__r_customertypes.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__r_customertypes", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "16_reference", "dv__r_customertypes"], "alias": "dv__r_customertypes", "checksum": {"name": "sha256", "checksum": "a88e00a2291fa9f278f4e8bd26dc018ba65bb4120702d67572eb21d0c2b13b24"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ID", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\16_reference\\dv__r_customertypes.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "ID", "incremental_strategy": "delete+insert"}, "created_at": 1689307661.2639525, "relation_name": "\"DWH\".\"dbo\".\"dv__r_customertypes\"", "raw_code": "{{ config(\r\n        materialized='incremental', \r\n        unique_key='ID',\r\n        incremental_strategy='delete+insert'\r\n        )\r\n    }}\r\n\r\nSELECT  *\r\nFROM {{ ref('stg__cmis_dbo_customertypes') }}", "language": "sql", "refs": [["stg__cmis_dbo_customertypes"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_customertypes"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\16_reference\\dv__r_customertypes.sql", "compiled": true, "compiled_code": "\n\nSELECT  *\nFROM \"DWH\".\"dbo\".\"stg__cmis_dbo_customertypes\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__r_environmenttypes": {"database": "DWH", "schema": "dbo", "name": "dv__r_environmenttypes", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\16_reference\\dv__r_environmenttypes.sql", "original_file_path": "models\\dv\\1_raw\\16_reference\\dv__r_environmenttypes.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__r_environmenttypes", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "16_reference", "dv__r_environmenttypes"], "alias": "dv__r_environmenttypes", "checksum": {"name": "sha256", "checksum": "b909d182f2a53c520b5991fb568fd5a98abc930719c0294888ca9848077791c8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ID", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\16_reference\\dv__r_environmenttypes.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "ID", "incremental_strategy": "delete+insert"}, "created_at": 1689307661.2689643, "relation_name": "\"DWH\".\"dbo\".\"dv__r_environmenttypes\"", "raw_code": "{{ config(\r\n        materialized='incremental', \r\n        unique_key='ID',\r\n        incremental_strategy='delete+insert'\r\n        )\r\n    }}\r\n\r\nSELECT  *\r\nFROM {{ ref('stg__cmis_dbo_environmenttypes') }}", "language": "sql", "refs": [["stg__cmis_dbo_environmenttypes"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_environmenttypes"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\16_reference\\dv__r_environmenttypes.sql", "compiled": true, "compiled_code": "\n\nSELECT  *\nFROM \"DWH\".\"dbo\".\"stg__cmis_dbo_environmenttypes\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__r_industrytypes": {"database": "DWH", "schema": "dbo", "name": "dv__r_industrytypes", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\16_reference\\dv__r_industrytypes.sql", "original_file_path": "models\\dv\\1_raw\\16_reference\\dv__r_industrytypes.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__r_industrytypes", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "16_reference", "dv__r_industrytypes"], "alias": "dv__r_industrytypes", "checksum": {"name": "sha256", "checksum": "02888843a327a7ac0f983b4dd417c33d431aab273fce9881ebff480e57ed8233"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ID", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\16_reference\\dv__r_industrytypes.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "ID", "incremental_strategy": "delete+insert"}, "created_at": 1689307661.2727165, "relation_name": "\"DWH\".\"dbo\".\"dv__r_industrytypes\"", "raw_code": "{{ config(\r\n        materialized='incremental', \r\n        unique_key='ID',\r\n        incremental_strategy='delete+insert'\r\n        )\r\n    }}\r\n\r\nSELECT  *\r\nFROM {{ ref('stg__cmis_dbo_industrytypes') }}", "language": "sql", "refs": [["stg__cmis_dbo_industrytypes"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_industrytypes"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\16_reference\\dv__r_industrytypes.sql", "compiled": true, "compiled_code": "\n\nSELECT  *\nFROM \"DWH\".\"dbo\".\"stg__cmis_dbo_industrytypes\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus": {"database": "DWH", "schema": "dbo", "name": "dv__r_opportunitystatus", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\16_reference\\dv__r_opportunitystatus.sql", "original_file_path": "models\\dv\\1_raw\\16_reference\\dv__r_opportunitystatus.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "16_reference", "dv__r_opportunitystatus"], "alias": "dv__r_opportunitystatus", "checksum": {"name": "sha256", "checksum": "9fb62113accf2ec934ae056c50608d424efa85481707a449fbea25efb2ff483f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ID", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\16_reference\\dv__r_opportunitystatus.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "ID", "incremental_strategy": "delete+insert"}, "created_at": 1689307661.2777226, "relation_name": "\"DWH\".\"dbo\".\"dv__r_opportunitystatus\"", "raw_code": "{{ config(\r\n        materialized='incremental', \r\n        unique_key='ID',\r\n        incremental_strategy='delete+insert'\r\n        )\r\n    }}\r\n\r\nSELECT  *\r\nFROM {{ ref('stg__cmis_dbo_opportunitystatus') }}", "language": "sql", "refs": [["stg__cmis_dbo_opportunitystatus"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_opportunitystatus"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\16_reference\\dv__r_opportunitystatus.sql", "compiled": true, "compiled_code": "\n\nSELECT  *\nFROM \"DWH\".\"dbo\".\"stg__cmis_dbo_opportunitystatus\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__r_titles": {"database": "DWH", "schema": "dbo", "name": "dv__r_titles", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\1_raw\\16_reference\\dv__r_titles.sql", "original_file_path": "models\\dv\\1_raw\\16_reference\\dv__r_titles.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__r_titles", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "1_raw", "16_reference", "dv__r_titles"], "alias": "dv__r_titles", "checksum": {"name": "sha256", "checksum": "3347e6319e308ae1f41ac9befa80b61bd5ff59ea89f279fe54f9f06fdafe695d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ID", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\16_reference\\dv__r_titles.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "ID", "incremental_strategy": "delete+insert"}, "created_at": 1689307661.2807255, "relation_name": "\"DWH\".\"dbo\".\"dv__r_titles\"", "raw_code": "{{ config(\r\n        materialized='incremental', \r\n        unique_key='ID',\r\n        incremental_strategy='delete+insert'\r\n        )\r\n    }}\r\n\r\nSELECT  *\r\nFROM {{ ref('stg__cmis_dbo_titles') }}", "language": "sql", "refs": [["stg__cmis_dbo_titles"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_titles"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\1_raw\\16_reference\\dv__r_titles.sql", "compiled": true, "compiled_code": "\n\nSELECT  *\nFROM \"DWH\".\"dbo\".\"stg__cmis_dbo_titles\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_businessplan_cleaned_lastest": {"database": "DWH", "schema": "dbo", "name": "dv__s_bv_h_businessplan_cleaned_lastest", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\2_business\\22_satellite\\dv__s_bv_h_businessplan_cleaned_lastest.sql", "original_file_path": "models\\dv\\2_business\\22_satellite\\dv__s_bv_h_businessplan_cleaned_lastest.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_businessplan_cleaned_lastest", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "2_business", "22_satellite", "dv__s_bv_h_businessplan_cleaned_lastest"], "alias": "dv__s_bv_h_businessplan_cleaned_lastest", "checksum": {"name": "sha256", "checksum": "f32b685a8e3824a8335730a40b10ff54aef277e4a1ff53a096b3b814fc61c986"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_h_businessplan_cleaned_lastest.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307661.2847254, "relation_name": "\"DWH\".\"dbo\".\"dv__s_bv_h_businessplan_cleaned_lastest\"", "raw_code": "SELECT a.*\r\nFROM (\r\n        SELECT *,\r\n            RANK() OVER (\r\n               PARTITION BY dv_hash_key_h_businessplan\r\n               ORDER BY dv_load_timestamp DESC\r\n            ) AS rank\r\n        FROM {{ ref('dv__s_h_businessplan') }}\r\n            \r\n    ) AS a\r\nWHERE a.rank = 1 and Activate = 1 and PublishType = 1 and WFIsFinish = 1", "language": "sql", "refs": [["dv__s_h_businessplan"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__s_h_businessplan"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_h_businessplan_cleaned_lastest.sql", "compiled": true, "compiled_code": "SELECT a.*\nFROM (\n        SELECT *,\n            RANK() OVER (\n               PARTITION BY dv_hash_key_h_businessplan\n               ORDER BY dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_h_businessplan\"\n            \n    ) AS a\nWHERE a.rank = 1 and Activate = 1 and PublishType = 1 and WFIsFinish = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_contract_cleaned_lastest": {"database": "DWH", "schema": "dbo", "name": "dv__s_bv_h_contract_cleaned_lastest", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\2_business\\22_satellite\\dv__s_bv_h_contract_cleaned_lastest.sql", "original_file_path": "models\\dv\\2_business\\22_satellite\\dv__s_bv_h_contract_cleaned_lastest.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_contract_cleaned_lastest", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "2_business", "22_satellite", "dv__s_bv_h_contract_cleaned_lastest"], "alias": "dv__s_bv_h_contract_cleaned_lastest", "checksum": {"name": "sha256", "checksum": "f904ea3ec35a66ae5e2b18a129799aa2092f48a73dafa31151d98d7a363b77fb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_h_contract_cleaned_lastest.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307661.2887266, "relation_name": "\"DWH\".\"dbo\".\"dv__s_bv_h_contract_cleaned_lastest\"", "raw_code": "SELECT a.*\r\nFROM (\r\n        SELECT *,\r\n            RANK() OVER (\r\n               PARTITION BY dv_hash_key_h_contract\r\n               ORDER BY dv_load_timestamp DESC\r\n            ) AS rank\r\n        FROM {{ ref('dv__s_h_contract') }}\r\n            \r\n    ) AS a\r\nWHERE a.rank = 1 and a.Activate = 1", "language": "sql", "refs": [["dv__s_h_contract"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__s_h_contract"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_h_contract_cleaned_lastest.sql", "compiled": true, "compiled_code": "SELECT a.*\nFROM (\n        SELECT *,\n            RANK() OVER (\n               PARTITION BY dv_hash_key_h_contract\n               ORDER BY dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_h_contract\"\n            \n    ) AS a\nWHERE a.rank = 1 and a.Activate = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_customer_lastest": {"database": "DWH", "schema": "dbo", "name": "dv__s_bv_h_customer_lastest", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\2_business\\22_satellite\\dv__s_bv_h_customer_lastest.sql", "original_file_path": "models\\dv\\2_business\\22_satellite\\dv__s_bv_h_customer_lastest.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_customer_lastest", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "2_business", "22_satellite", "dv__s_bv_h_customer_lastest"], "alias": "dv__s_bv_h_customer_lastest", "checksum": {"name": "sha256", "checksum": "a79b3fc0033b921d98c1e6e8cfc8464ab0bc41a2f53f6aabfcb6c1801b4819e8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_h_customer_lastest.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307661.292722, "relation_name": "\"DWH\".\"dbo\".\"dv__s_bv_h_customer_lastest\"", "raw_code": "SELECT a.*\r\nFROM (\r\n        SELECT *,\r\n            RANK() OVER (\r\n               PARTITION BY dv_hash_key_h_customer\r\n               ORDER BY dv_load_timestamp DESC\r\n            ) AS rank\r\n        FROM {{ ref('dv__s_h_customer') }}\r\n            \r\n    ) AS a\r\nWHERE a.rank = 1", "language": "sql", "refs": [["dv__s_h_customer"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__s_h_customer"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_h_customer_lastest.sql", "compiled": true, "compiled_code": "SELECT a.*\nFROM (\n        SELECT *,\n            RANK() OVER (\n               PARTITION BY dv_hash_key_h_customer\n               ORDER BY dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_h_customer\"\n            \n    ) AS a\nWHERE a.rank = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_department_lastest": {"database": "DWH", "schema": "dbo", "name": "dv__s_bv_h_department_lastest", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\2_business\\22_satellite\\dv__s_bv_h_department_lastest.sql", "original_file_path": "models\\dv\\2_business\\22_satellite\\dv__s_bv_h_department_lastest.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_department_lastest", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "2_business", "22_satellite", "dv__s_bv_h_department_lastest"], "alias": "dv__s_bv_h_department_lastest", "checksum": {"name": "sha256", "checksum": "c35cc0fbfdea0fc9100527d895d03772b7ac57cd6a6a67ac2bb460a12e1dce14"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_h_department_lastest.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307661.295722, "relation_name": "\"DWH\".\"dbo\".\"dv__s_bv_h_department_lastest\"", "raw_code": "SELECT a.*\r\n    FROM (\r\n        SELECT *,\r\n            RANK() OVER (\r\n               PARTITION BY T.dv_hash_key_h_department\r\n               ORDER BY T.dv_load_timestamp DESC\r\n            ) AS rank\r\n        FROM {{ ref('dv__s_h_department') }} T\r\n            \r\n    ) AS a\r\nWHERE a.rank = 1", "language": "sql", "refs": [["dv__s_h_department"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__s_h_department"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_h_department_lastest.sql", "compiled": true, "compiled_code": "SELECT a.*\n    FROM (\n        SELECT *,\n            RANK() OVER (\n               PARTITION BY T.dv_hash_key_h_department\n               ORDER BY T.dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_h_department\" T\n            \n    ) AS a\nWHERE a.rank = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_estimatecontract_cleaned_lastest": {"database": "DWH", "schema": "dbo", "name": "dv__s_bv_h_estimatecontract_cleaned_lastest", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\2_business\\22_satellite\\dv__s_bv_h_estimatecontract_cleaned_lastest.sql", "original_file_path": "models\\dv\\2_business\\22_satellite\\dv__s_bv_h_estimatecontract_cleaned_lastest.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_estimatecontract_cleaned_lastest", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "2_business", "22_satellite", "dv__s_bv_h_estimatecontract_cleaned_lastest"], "alias": "dv__s_bv_h_estimatecontract_cleaned_lastest", "checksum": {"name": "sha256", "checksum": "1a2768738381447a7d98ae0f3fbcee33a9bd465afbe172d429d537a0782ad999"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_h_estimatecontract_cleaned_lastest.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307661.298722, "relation_name": "\"DWH\".\"dbo\".\"dv__s_bv_h_estimatecontract_cleaned_lastest\"", "raw_code": "SELECT a.*\r\nFROM (\r\n        SELECT *,\r\n            RANK() OVER (\r\n               PARTITION BY dv_hash_key_h_estimatecontract\r\n               ORDER BY dv_load_timestamp DESC\r\n            ) AS rank\r\n        FROM {{ ref('dv__s_h_estimatecontract') }}\r\n            \r\n    ) AS a\r\nWHERE a.rank = 1 and Activate = 1 and PublishType = 1 and WFIsFinish = 1", "language": "sql", "refs": [["dv__s_h_estimatecontract"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__s_h_estimatecontract"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_h_estimatecontract_cleaned_lastest.sql", "compiled": true, "compiled_code": "SELECT a.*\nFROM (\n        SELECT *,\n            RANK() OVER (\n               PARTITION BY dv_hash_key_h_estimatecontract\n               ORDER BY dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_h_estimatecontract\"\n            \n    ) AS a\nWHERE a.rank = 1 and Activate = 1 and PublishType = 1 and WFIsFinish = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_finalizationcontract_cleaned_lastest": {"database": "DWH", "schema": "dbo", "name": "dv__s_bv_h_finalizationcontract_cleaned_lastest", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\2_business\\22_satellite\\dv__s_bv_h_finalizationcontract_cleaned_lastest.sql", "original_file_path": "models\\dv\\2_business\\22_satellite\\dv__s_bv_h_finalizationcontract_cleaned_lastest.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_finalizationcontract_cleaned_lastest", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "2_business", "22_satellite", "dv__s_bv_h_finalizationcontract_cleaned_lastest"], "alias": "dv__s_bv_h_finalizationcontract_cleaned_lastest", "checksum": {"name": "sha256", "checksum": "a60437a5c031347aa44d22848cbc1a07c554a4b2e8f8735ba4c2606d95a70f8b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_h_finalizationcontract_cleaned_lastest.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307661.3027341, "relation_name": "\"DWH\".\"dbo\".\"dv__s_bv_h_finalizationcontract_cleaned_lastest\"", "raw_code": "SELECT a.*\r\nFROM (\r\n        SELECT *,\r\n            RANK() OVER (\r\n               PARTITION BY dv_hash_key_h_finalizationcontract\r\n               ORDER BY dv_load_timestamp DESC\r\n            ) AS rank\r\n        FROM {{ ref('dv__s_h_finalizationcontract') }}\r\n            \r\n    ) AS a\r\nWHERE a.rank = 1 and Activate = 1 and PublishType = 1 and WFIsFinish = 1", "language": "sql", "refs": [["dv__s_h_finalizationcontract"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__s_h_finalizationcontract"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_h_finalizationcontract_cleaned_lastest.sql", "compiled": true, "compiled_code": "SELECT a.*\nFROM (\n        SELECT *,\n            RANK() OVER (\n               PARTITION BY dv_hash_key_h_finalizationcontract\n               ORDER BY dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_h_finalizationcontract\"\n            \n    ) AS a\nWHERE a.rank = 1 and Activate = 1 and PublishType = 1 and WFIsFinish = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_opportunity_lastest": {"database": "DWH", "schema": "dbo", "name": "dv__s_bv_h_opportunity_lastest", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\2_business\\22_satellite\\dv__s_bv_h_opportunity_lastest.sql", "original_file_path": "models\\dv\\2_business\\22_satellite\\dv__s_bv_h_opportunity_lastest.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_opportunity_lastest", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "2_business", "22_satellite", "dv__s_bv_h_opportunity_lastest"], "alias": "dv__s_bv_h_opportunity_lastest", "checksum": {"name": "sha256", "checksum": "1078f96810f0195fc3397c71a00cf1ec1ae95c2f9fc6475ec7bf4c1eac2c60d1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_h_opportunity_lastest.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307661.3067253, "relation_name": "\"DWH\".\"dbo\".\"dv__s_bv_h_opportunity_lastest\"", "raw_code": "SELECT a.*\r\n    FROM (\r\n        SELECT *,\r\n            RANK() OVER (\r\n               PARTITION BY T.dv_hash_key_h_opportunity\r\n               ORDER BY T.dv_load_timestamp DESC\r\n            ) AS rank\r\n        FROM {{ ref('dv__s_h_opportunity') }} T\r\n            \r\n    ) AS a\r\nWHERE a.rank = 1 and a.Activate = 1", "language": "sql", "refs": [["dv__s_h_opportunity"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__s_h_opportunity"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_h_opportunity_lastest.sql", "compiled": true, "compiled_code": "SELECT a.*\n    FROM (\n        SELECT *,\n            RANK() OVER (\n               PARTITION BY T.dv_hash_key_h_opportunity\n               ORDER BY T.dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_h_opportunity\" T\n            \n    ) AS a\nWHERE a.rank = 1 and a.Activate = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_order_lastest": {"database": "DWH", "schema": "dbo", "name": "dv__s_bv_h_order_lastest", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\2_business\\22_satellite\\dv__s_bv_h_order_lastest.sql", "original_file_path": "models\\dv\\2_business\\22_satellite\\dv__s_bv_h_order_lastest.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_order_lastest", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "2_business", "22_satellite", "dv__s_bv_h_order_lastest"], "alias": "dv__s_bv_h_order_lastest", "checksum": {"name": "sha256", "checksum": "a15355f5f86a0f51e9677aa4d5b52dfbb6a498c3eec5424662c16529b0d8a67c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_h_order_lastest.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307661.3097253, "relation_name": "\"DWH\".\"dbo\".\"dv__s_bv_h_order_lastest\"", "raw_code": "SELECT a.*\r\nFROM (\r\n        SELECT *,\r\n            RANK() OVER (\r\n               PARTITION BY dv_hash_key_h_order\r\n               ORDER BY dv_load_timestamp DESC\r\n            ) AS rank\r\n        FROM {{ ref('dv__s_h_order') }}\r\n            \r\n    ) AS a\r\nWHERE a.rank = 1 and a.Activate = 1", "language": "sql", "refs": [["dv__s_h_order"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__s_h_order"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_h_order_lastest.sql", "compiled": true, "compiled_code": "SELECT a.*\nFROM (\n        SELECT *,\n            RANK() OVER (\n               PARTITION BY dv_hash_key_h_order\n               ORDER BY dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_h_order\"\n            \n    ) AS a\nWHERE a.rank = 1 and a.Activate = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_product_lastest": {"database": "DWH", "schema": "dbo", "name": "dv__s_bv_h_product_lastest", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\2_business\\22_satellite\\dv__s_bv_h_product_lastest.sql", "original_file_path": "models\\dv\\2_business\\22_satellite\\dv__s_bv_h_product_lastest.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_product_lastest", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "2_business", "22_satellite", "dv__s_bv_h_product_lastest"], "alias": "dv__s_bv_h_product_lastest", "checksum": {"name": "sha256", "checksum": "883634a3f70700038eb46e5554e05d3e3dac1cea727864f7fbebd15960b3ae2d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_h_product_lastest.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307661.3127255, "relation_name": "\"DWH\".\"dbo\".\"dv__s_bv_h_product_lastest\"", "raw_code": "SELECT a.*\r\nFROM (\r\n        SELECT *,\r\n            RANK() OVER (\r\n               PARTITION BY dv_hash_key_h_product\r\n               ORDER BY dv_load_timestamp DESC\r\n            ) AS rank\r\n        FROM {{ ref('dv__s_h_product') }}\r\n            \r\n    ) AS a\r\nWHERE a.rank = 1", "language": "sql", "refs": [["dv__s_h_product"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__s_h_product"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_h_product_lastest.sql", "compiled": true, "compiled_code": "SELECT a.*\nFROM (\n        SELECT *,\n            RANK() OVER (\n               PARTITION BY dv_hash_key_h_product\n               ORDER BY dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_h_product\"\n            \n    ) AS a\nWHERE a.rank = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_user_lastest": {"database": "DWH", "schema": "dbo", "name": "dv__s_bv_h_user_lastest", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\2_business\\22_satellite\\dv__s_bv_h_user_lastest.sql", "original_file_path": "models\\dv\\2_business\\22_satellite\\dv__s_bv_h_user_lastest.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_user_lastest", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "2_business", "22_satellite", "dv__s_bv_h_user_lastest"], "alias": "dv__s_bv_h_user_lastest", "checksum": {"name": "sha256", "checksum": "18d11ecfa9607b4ae2f45f582226557a0521fb306ee299e651bc27ac853ac82c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_h_user_lastest.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307661.3157253, "relation_name": "\"DWH\".\"dbo\".\"dv__s_bv_h_user_lastest\"", "raw_code": "SELECT a.*\r\nFROM (\r\n        SELECT *,\r\n            RANK() OVER (\r\n               PARTITION BY dv_hash_key_h_user\r\n               ORDER BY dv_load_timestamp DESC\r\n            ) AS rank\r\n        FROM {{ ref('dv__s_h_user') }}\r\n            \r\n    ) AS a\r\nWHERE a.rank = 1", "language": "sql", "refs": [["dv__s_h_user"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__s_h_user"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_h_user_lastest.sql", "compiled": true, "compiled_code": "SELECT a.*\nFROM (\n        SELECT *,\n            RANK() OVER (\n               PARTITION BY dv_hash_key_h_user\n               ORDER BY dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_h_user\"\n            \n    ) AS a\nWHERE a.rank = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_contract_lockstatus_cleaned_lastest": {"database": "DWH", "schema": "dbo", "name": "dv__s_bv_l_contract_lockstatus_cleaned_lastest", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\2_business\\22_satellite\\dv__s_bv_l_contract_lockstatus_cleaned_lastest.sql", "original_file_path": "models\\dv\\2_business\\22_satellite\\dv__s_bv_l_contract_lockstatus_cleaned_lastest.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_contract_lockstatus_cleaned_lastest", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "2_business", "22_satellite", "dv__s_bv_l_contract_lockstatus_cleaned_lastest"], "alias": "dv__s_bv_l_contract_lockstatus_cleaned_lastest", "checksum": {"name": "sha256", "checksum": "e02ee5c834898e0fd11a61b06b7867192e57a31e4a0abbec1c785eaef8378078"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_l_contract_lockstatus_cleaned_lastest.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307661.3217268, "relation_name": "\"DWH\".\"dbo\".\"dv__s_bv_l_contract_lockstatus_cleaned_lastest\"", "raw_code": "SELECT a.*\r\nFROM (\r\n        SELECT *,\r\n            RANK() OVER (\r\n               PARTITION BY dv_hash_key_l_contract_lockstatus\r\n               ORDER BY dv_load_timestamp DESC\r\n            ) AS rank\r\n        FROM {{ ref('dv__s_l_contract_lockstatus') }}\r\n            \r\n    ) AS a\r\nWHERE a.rank = 1 and IsLock = 1  and ID <> '41344'", "language": "sql", "refs": [["dv__s_l_contract_lockstatus"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__s_l_contract_lockstatus"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_l_contract_lockstatus_cleaned_lastest.sql", "compiled": true, "compiled_code": "SELECT a.*\nFROM (\n        SELECT *,\n            RANK() OVER (\n               PARTITION BY dv_hash_key_l_contract_lockstatus\n               ORDER BY dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_l_contract_lockstatus\"\n            \n    ) AS a\nWHERE a.rank = 1 and IsLock = 1  and ID <> '41344'", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_opportunity_invoice_lastest": {"database": "DWH", "schema": "dbo", "name": "dv__s_bv_l_opportunity_invoice_lastest", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\2_business\\22_satellite\\dv__s_bv_l_opportunity_invoice_lastest.sql", "original_file_path": "models\\dv\\2_business\\22_satellite\\dv__s_bv_l_opportunity_invoice_lastest.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_opportunity_invoice_lastest", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "2_business", "22_satellite", "dv__s_bv_l_opportunity_invoice_lastest"], "alias": "dv__s_bv_l_opportunity_invoice_lastest", "checksum": {"name": "sha256", "checksum": "d9453d4332e54ffdca6ff0f06a7ae99495000e59a606aaed91c678015fa9aa0e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_l_opportunity_invoice_lastest.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307661.3247263, "relation_name": "\"DWH\".\"dbo\".\"dv__s_bv_l_opportunity_invoice_lastest\"", "raw_code": "SELECT a.*\r\nFROM (\r\n        SELECT *,\r\n            RANK() OVER (\r\n               PARTITION BY dv_hash_key_l_opportunity_invoice\r\n               ORDER BY dv_load_timestamp DESC\r\n            ) AS rank\r\n        FROM {{ ref('dv__s_l_opportunity_invoice') }}\r\n            \r\n    ) AS a\r\nWHERE a.rank = 1", "language": "sql", "refs": [["dv__s_l_opportunity_invoice"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__s_l_opportunity_invoice"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_l_opportunity_invoice_lastest.sql", "compiled": true, "compiled_code": "SELECT a.*\nFROM (\n        SELECT *,\n            RANK() OVER (\n               PARTITION BY dv_hash_key_l_opportunity_invoice\n               ORDER BY dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_l_opportunity_invoice\"\n            \n    ) AS a\nWHERE a.rank = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_orderdetail_lastest": {"database": "DWH", "schema": "dbo", "name": "dv__s_bv_l_orderdetail_lastest", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\2_business\\22_satellite\\dv__s_bv_l_orderdetail_lastest.sql", "original_file_path": "models\\dv\\2_business\\22_satellite\\dv__s_bv_l_orderdetail_lastest.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_orderdetail_lastest", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "2_business", "22_satellite", "dv__s_bv_l_orderdetail_lastest"], "alias": "dv__s_bv_l_orderdetail_lastest", "checksum": {"name": "sha256", "checksum": "6a88d19f206fc5882caa7840ee42a29770ed79689ec0b9dccc79b6235f2547d8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_l_orderdetail_lastest.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307661.3277252, "relation_name": "\"DWH\".\"dbo\".\"dv__s_bv_l_orderdetail_lastest\"", "raw_code": "SELECT a.*\r\nFROM (\r\n        SELECT *,\r\n            RANK() OVER (\r\n               PARTITION BY dv_hash_key_l_orderdetail\r\n               ORDER BY dv_load_timestamp DESC\r\n            ) AS rank\r\n        FROM {{ ref('dv__s_l_orderdetail') }}\r\n            \r\n    ) AS a\r\nWHERE a.rank = 1 and a.IsMain = 1", "language": "sql", "refs": [["dv__s_l_orderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__s_l_orderdetail"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_l_orderdetail_lastest.sql", "compiled": true, "compiled_code": "SELECT a.*\nFROM (\n        SELECT *,\n            RANK() OVER (\n               PARTITION BY dv_hash_key_l_orderdetail\n               ORDER BY dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_l_orderdetail\"\n            \n    ) AS a\nWHERE a.rank = 1 and a.IsMain = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_user_customer_activesaler_lastest": {"database": "DWH", "schema": "dbo", "name": "dv__s_bv_l_user_customer_activesaler_lastest", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\2_business\\22_satellite\\dv__s_bv_l_user_customer_activesaler_lastest.sql", "original_file_path": "models\\dv\\2_business\\22_satellite\\dv__s_bv_l_user_customer_activesaler_lastest.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_user_customer_activesaler_lastest", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "2_business", "22_satellite", "dv__s_bv_l_user_customer_activesaler_lastest"], "alias": "dv__s_bv_l_user_customer_activesaler_lastest", "checksum": {"name": "sha256", "checksum": "b993b5a448cd01ac88798b01df1a0dc63930cc435e6764079e8e667befaad24b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_l_user_customer_activesaler_lastest.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1689307661.330725, "relation_name": "\"DWH\".\"dbo\".\"dv__s_bv_l_user_customer_activesaler_lastest\"", "raw_code": "SELECT a.*, b.dv_hash_key_h_customer\r\n    FROM (\r\n        SELECT *,\r\n            RANK() OVER (\r\n               PARTITION BY dv_hash_key_l_user_customer\r\n               ORDER BY dv_load_timestamp DESC\r\n            ) AS rank\r\n        FROM {{ ref('dv__s_l_user_customer') }} \r\n            \r\n    ) AS a\r\n\tinner join dv__l_user_customer b on a.dv_hash_key_l_user_customer = b.dv_hash_key_l_user_customer\r\n    WHERE a.rank = 1 and a.AccountType=1 and a.Activate=1", "language": "sql", "refs": [["dv__s_l_user_customer"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__s_l_user_customer"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\2_business\\22_satellite\\dv__s_bv_l_user_customer_activesaler_lastest.sql", "compiled": true, "compiled_code": "SELECT a.*, b.dv_hash_key_h_customer\n    FROM (\n        SELECT *,\n            RANK() OVER (\n               PARTITION BY dv_hash_key_l_user_customer\n               ORDER BY dv_load_timestamp DESC\n            ) AS rank\n        FROM \"DWH\".\"dbo\".\"dv__s_l_user_customer\" \n            \n    ) AS a\n\tinner join dv__l_user_customer b on a.dv_hash_key_l_user_customer = b.dv_hash_key_l_user_customer\n    WHERE a.rank = 1 and a.AccountType=1 and a.Activate=1", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.mart__bridge": {"database": "DWH", "schema": "dbo", "name": "mart__bridge", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\3_mart\\mart__bridge.sql", "original_file_path": "models\\dv\\3_mart\\mart__bridge.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.mart__bridge", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "3_mart", "mart__bridge"], "alias": "mart__bridge", "checksum": {"name": "sha256", "checksum": "bdbf09202c0c21a140d8899e4b67500bbf7ffe7312cf72f8b5c253b76371fbf3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\3_mart\\mart__bridge.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1689307661.3357308, "relation_name": "\"DWH\".\"dbo\".\"mart__bridge\"", "raw_code": "{{ dbt_utils.union_relations(\r\n    relations=[\r\n            ref('mart__customer')\r\n            , ref('mart__department')\r\n            , ref(\"mart__employee\")\r\n            , ref(\"mart__opportunity\")\r\n            , ref(\"mart__profit\") \r\n            , ref(\"mart__sale\")\r\n            , ref(\"mart__solution\")\r\n            , ref(\"mart__plan\")\r\n            ],\r\n    include=[\"_KEY_CUSTOMER\"\r\n        ,\"_KEY_DEPARTMENT\"\r\n        ,\"_KEY_EMPLOYEE\"\r\n        ,\"_KEY_OPP\"\r\n        ,\"_KEY_PROFIT\"\r\n        ,\"_KEY_SALE\"\r\n        ,\"_KEY_SOLUTION\"\r\n        ,\"_KEY_OPP_STATUS\"\r\n        ,\"_KEY_INVOICE_DATE\"\r\n        ,\"_KEY_SALE_DATE\"\r\n        ,\"_KEY_PLAN\"\r\n        ,\"_KEY_OPP_DATE\"\r\n        ],\r\n    column_override = \r\n        {\"_KEY_CUSTOMER\": \"char(32)\",\r\n        \"_KEY_DEPARTMENT\": \"char(32)\",\r\n        \"_KEY_EMPLOYEE\": \"char(32)\",\r\n        \"_KEY_OPP\": \"char(32)\",\r\n        \"_KEY_PROFIT\": \"char(32)\",\r\n        \"_KEY_SALE\": \"char(32)\",\r\n        \"_KEY_SOLUTION\": \"char(32)\",\r\n        \"_KEY_PLAN\": \"char(32)\"}\r\n        ,\r\n    source_column_name=\"Stage\"\r\n) }}", "language": "sql", "refs": [["mart__customer"], ["mart__department"], ["mart__employee"], ["mart__opportunity"], ["mart__profit"], ["mart__sale"], ["mart__solution"], ["mart__plan"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"], "nodes": ["model.build_dv_for_cmc_use_automate_dv.mart__customer", "model.build_dv_for_cmc_use_automate_dv.mart__department", "model.build_dv_for_cmc_use_automate_dv.mart__employee", "model.build_dv_for_cmc_use_automate_dv.mart__opportunity", "model.build_dv_for_cmc_use_automate_dv.mart__profit", "model.build_dv_for_cmc_use_automate_dv.mart__sale", "model.build_dv_for_cmc_use_automate_dv.mart__solution", "model.build_dv_for_cmc_use_automate_dv.mart__plan"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\3_mart\\mart__bridge.sql", "compiled": true, "compiled_code": "\n    \n\n        (\n            select\n                cast('\"DWH\".\"dbo\".\"mart__customer\"' as VARCHAR(8000)) as Stage,\n\n                \n                    cast(\"_KEY_CUSTOMER\" as char(32)) as \"_KEY_CUSTOMER\" ,\n                    cast(null as char(32)) as \"_KEY_DEPARTMENT\" ,\n                    cast(null as char(32)) as \"_KEY_EMPLOYEE\" ,\n                    cast(null as char(32)) as \"_KEY_OPP\" ,\n                    cast(null as date) as \"_KEY_OPP_DATE\" ,\n                    cast(null as bigint) as \"_KEY_OPP_STATUS\" ,\n                    cast(null as char(32)) as \"_KEY_PROFIT\" ,\n                    cast(null as date) as \"_KEY_SALE_DATE\" ,\n                    cast(null as char(32)) as \"_KEY_SOLUTION\" ,\n                    cast(null as char(32)) as \"_KEY_SALE\" ,\n                    cast(null as char(32)) as \"_KEY_PLAN\" \n\n            from \"DWH\".\"dbo\".\"mart__customer\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"DWH\".\"dbo\".\"mart__department\"' as VARCHAR(8000)) as Stage,\n\n                \n                    cast(null as char(32)) as \"_KEY_CUSTOMER\" ,\n                    cast(\"_KEY_DEPARTMENT\" as char(32)) as \"_KEY_DEPARTMENT\" ,\n                    cast(null as char(32)) as \"_KEY_EMPLOYEE\" ,\n                    cast(null as char(32)) as \"_KEY_OPP\" ,\n                    cast(null as date) as \"_KEY_OPP_DATE\" ,\n                    cast(null as bigint) as \"_KEY_OPP_STATUS\" ,\n                    cast(null as char(32)) as \"_KEY_PROFIT\" ,\n                    cast(null as date) as \"_KEY_SALE_DATE\" ,\n                    cast(null as char(32)) as \"_KEY_SOLUTION\" ,\n                    cast(null as char(32)) as \"_KEY_SALE\" ,\n                    cast(null as char(32)) as \"_KEY_PLAN\" \n\n            from \"DWH\".\"dbo\".\"mart__department\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"DWH\".\"dbo\".\"mart__employee\"' as VARCHAR(8000)) as Stage,\n\n                \n                    cast(null as char(32)) as \"_KEY_CUSTOMER\" ,\n                    cast(null as char(32)) as \"_KEY_DEPARTMENT\" ,\n                    cast(\"_KEY_EMPLOYEE\" as char(32)) as \"_KEY_EMPLOYEE\" ,\n                    cast(null as char(32)) as \"_KEY_OPP\" ,\n                    cast(null as date) as \"_KEY_OPP_DATE\" ,\n                    cast(null as bigint) as \"_KEY_OPP_STATUS\" ,\n                    cast(null as char(32)) as \"_KEY_PROFIT\" ,\n                    cast(null as date) as \"_KEY_SALE_DATE\" ,\n                    cast(null as char(32)) as \"_KEY_SOLUTION\" ,\n                    cast(null as char(32)) as \"_KEY_SALE\" ,\n                    cast(null as char(32)) as \"_KEY_PLAN\" \n\n            from \"DWH\".\"dbo\".\"mart__employee\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"DWH\".\"dbo\".\"mart__opportunity\"' as VARCHAR(8000)) as Stage,\n\n                \n                    cast(null as char(32)) as \"_KEY_CUSTOMER\" ,\n                    cast(null as char(32)) as \"_KEY_DEPARTMENT\" ,\n                    cast(null as char(32)) as \"_KEY_EMPLOYEE\" ,\n                    cast(\"_KEY_OPP\" as char(32)) as \"_KEY_OPP\" ,\n                    cast(\"_KEY_OPP_DATE\" as date) as \"_KEY_OPP_DATE\" ,\n                    cast(\"_KEY_OPP_STATUS\" as bigint) as \"_KEY_OPP_STATUS\" ,\n                    cast(null as char(32)) as \"_KEY_PROFIT\" ,\n                    cast(null as date) as \"_KEY_SALE_DATE\" ,\n                    cast(null as char(32)) as \"_KEY_SOLUTION\" ,\n                    cast(null as char(32)) as \"_KEY_SALE\" ,\n                    cast(null as char(32)) as \"_KEY_PLAN\" \n\n            from \"DWH\".\"dbo\".\"mart__opportunity\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"DWH\".\"dbo\".\"mart__profit\"' as VARCHAR(8000)) as Stage,\n\n                \n                    cast(null as char(32)) as \"_KEY_CUSTOMER\" ,\n                    cast(\"_KEY_DEPARTMENT\" as char(32)) as \"_KEY_DEPARTMENT\" ,\n                    cast(null as char(32)) as \"_KEY_EMPLOYEE\" ,\n                    cast(\"_KEY_OPP\" as char(32)) as \"_KEY_OPP\" ,\n                    cast(null as date) as \"_KEY_OPP_DATE\" ,\n                    cast(null as bigint) as \"_KEY_OPP_STATUS\" ,\n                    cast(\"_KEY_PROFIT\" as char(32)) as \"_KEY_PROFIT\" ,\n                    cast(\"_KEY_SALE_DATE\" as date) as \"_KEY_SALE_DATE\" ,\n                    cast(\"_KEY_SOLUTION\" as char(32)) as \"_KEY_SOLUTION\" ,\n                    cast(null as char(32)) as \"_KEY_SALE\" ,\n                    cast(null as char(32)) as \"_KEY_PLAN\" \n\n            from \"DWH\".\"dbo\".\"mart__profit\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"DWH\".\"dbo\".\"mart__sale\"' as VARCHAR(8000)) as Stage,\n\n                \n                    cast(null as char(32)) as \"_KEY_CUSTOMER\" ,\n                    cast(\"_KEY_DEPARTMENT\" as char(32)) as \"_KEY_DEPARTMENT\" ,\n                    cast(null as char(32)) as \"_KEY_EMPLOYEE\" ,\n                    cast(\"_KEY_OPP\" as char(32)) as \"_KEY_OPP\" ,\n                    cast(null as date) as \"_KEY_OPP_DATE\" ,\n                    cast(null as bigint) as \"_KEY_OPP_STATUS\" ,\n                    cast(null as char(32)) as \"_KEY_PROFIT\" ,\n                    cast(\"_KEY_SALE_DATE\" as date) as \"_KEY_SALE_DATE\" ,\n                    cast(\"_KEY_SOLUTION\" as char(32)) as \"_KEY_SOLUTION\" ,\n                    cast(\"_KEY_SALE\" as char(32)) as \"_KEY_SALE\" ,\n                    cast(null as char(32)) as \"_KEY_PLAN\" \n\n            from \"DWH\".\"dbo\".\"mart__sale\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"DWH\".\"dbo\".\"mart__solution\"' as VARCHAR(8000)) as Stage,\n\n                \n                    cast(null as char(32)) as \"_KEY_CUSTOMER\" ,\n                    cast(null as char(32)) as \"_KEY_DEPARTMENT\" ,\n                    cast(null as char(32)) as \"_KEY_EMPLOYEE\" ,\n                    cast(null as char(32)) as \"_KEY_OPP\" ,\n                    cast(null as date) as \"_KEY_OPP_DATE\" ,\n                    cast(null as bigint) as \"_KEY_OPP_STATUS\" ,\n                    cast(null as char(32)) as \"_KEY_PROFIT\" ,\n                    cast(null as date) as \"_KEY_SALE_DATE\" ,\n                    cast(\"_KEY_SOLUTION\" as char(32)) as \"_KEY_SOLUTION\" ,\n                    cast(null as char(32)) as \"_KEY_SALE\" ,\n                    cast(null as char(32)) as \"_KEY_PLAN\" \n\n            from \"DWH\".\"dbo\".\"mart__solution\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"DWH\".\"dbo\".\"mart__plan\"' as VARCHAR(8000)) as Stage,\n\n                \n                    cast(null as char(32)) as \"_KEY_CUSTOMER\" ,\n                    cast(\"_KEY_DEPARTMENT\" as char(32)) as \"_KEY_DEPARTMENT\" ,\n                    cast(\"_KEY_EMPLOYEE\" as char(32)) as \"_KEY_EMPLOYEE\" ,\n                    cast(null as char(32)) as \"_KEY_OPP\" ,\n                    cast(null as date) as \"_KEY_OPP_DATE\" ,\n                    cast(null as bigint) as \"_KEY_OPP_STATUS\" ,\n                    cast(null as char(32)) as \"_KEY_PROFIT\" ,\n                    cast(\"_KEY_SALE_DATE\" as date) as \"_KEY_SALE_DATE\" ,\n                    cast(\"_KEY_SOLUTION\" as char(32)) as \"_KEY_SOLUTION\" ,\n                    cast(null as char(32)) as \"_KEY_SALE\" ,\n                    cast(\"_KEY_PLAN\" as char(32)) as \"_KEY_PLAN\" \n\n            from \"DWH\".\"dbo\".\"mart__plan\"\n\n            \n        )\n\n        ", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.mart__customer": {"database": "DWH", "schema": "dbo", "name": "mart__customer", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\3_mart\\mart__customer.sql", "original_file_path": "models\\dv\\3_mart\\mart__customer.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.mart__customer", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "3_mart", "mart__customer"], "alias": "mart__customer", "checksum": {"name": "sha256", "checksum": "409c9459c6094395fe49ea181caba72385ec56bfa00201f0d68ce4f828e42b06"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\3_mart\\mart__customer.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1689307661.3737218, "relation_name": "\"DWH\".\"dbo\".\"mart__customer\"", "raw_code": "--fix\r\nselect\r\nA.dv_hash_key_h_customer as _KEY_CUSTOMER\r\n,B.[Name] as [Customer Name]\r\n,B.[Address]\r\n,B.Phone\r\n,B.Email \r\n,C.[Name] as [Customer Type]\r\n,D.[Name] as [Industry]\r\nfrom \r\n{{ ref('dv__h_customer') }} A\r\n\tleft join {{ ref('dv__s_bv_h_customer_lastest') }} B ON A.dv_hash_key_h_customer = B.dv_hash_key_h_customer\r\n\tleft join {{ ref('dv__r_customertypes') }} C\t\tON B.CustomerTypeID = C.ID\r\n\tleft join {{ ref('dv__r_industrytypes') }} D\t\tON B.IndustryTypeID = D.ID\r\n\tleft join {{ ref('dv__r_environmenttypes') }} E\tON B.EnvironmentTypeID = E.ID\r\n\tleft join {{ ref('dv__s_bv_l_user_customer_activesaler_lastest') }} F\tON A.dv_hash_key_h_customer = F.dv_hash_key_h_customer", "language": "sql", "refs": [["dv__h_customer"], ["dv__s_bv_h_customer_lastest"], ["dv__r_customertypes"], ["dv__r_industrytypes"], ["dv__r_environmenttypes"], ["dv__s_bv_l_user_customer_activesaler_lastest"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__h_customer", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_customer_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__r_customertypes", "model.build_dv_for_cmc_use_automate_dv.dv__r_industrytypes", "model.build_dv_for_cmc_use_automate_dv.dv__r_environmenttypes", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_user_customer_activesaler_lastest"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\3_mart\\mart__customer.sql", "compiled": true, "compiled_code": "--fix\nselect\nA.dv_hash_key_h_customer as _KEY_CUSTOMER\n,B.[Name] as [Customer Name]\n,B.[Address]\n,B.Phone\n,B.Email \n,C.[Name] as [Customer Type]\n,D.[Name] as [Industry]\nfrom \n\"DWH\".\"dbo\".\"dv__h_customer\" A\n\tleft join \"DWH\".\"dbo\".\"dv__s_bv_h_customer_lastest\" B ON A.dv_hash_key_h_customer = B.dv_hash_key_h_customer\n\tleft join \"DWH\".\"dbo\".\"dv__r_customertypes\" C\t\tON B.CustomerTypeID = C.ID\n\tleft join \"DWH\".\"dbo\".\"dv__r_industrytypes\" D\t\tON B.IndustryTypeID = D.ID\n\tleft join \"DWH\".\"dbo\".\"dv__r_environmenttypes\" E\tON B.EnvironmentTypeID = E.ID\n\tleft join \"DWH\".\"dbo\".\"dv__s_bv_l_user_customer_activesaler_lastest\" F\tON A.dv_hash_key_h_customer = F.dv_hash_key_h_customer", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.mart__department": {"database": "DWH", "schema": "dbo", "name": "mart__department", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\3_mart\\mart__department.sql", "original_file_path": "models\\dv\\3_mart\\mart__department.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.mart__department", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "3_mart", "mart__department"], "alias": "mart__department", "checksum": {"name": "sha256", "checksum": "3474a2358ad77c845219ad6a3b5b225efc02b9bc1b740353ace3d4546bb9b027"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\3_mart\\mart__department.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1689307661.3777237, "relation_name": "\"DWH\".\"dbo\".\"mart__department\"", "raw_code": "--fix\r\nselect \r\n\tA.dv_hash_key_h_department as _KEY_DEPARTMENT,\r\n    A.GroupCode as [Department Code],\r\n    A.GroupName as [Department Name]\r\nfrom {{ ref('dv__s_bv_h_department_lastest') }} A \r\nWHERE A.IsActive = 1 and A.IsVirtual=0", "language": "sql", "refs": [["dv__s_bv_h_department_lastest"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_department_lastest"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\3_mart\\mart__department.sql", "compiled": true, "compiled_code": "--fix\nselect \n\tA.dv_hash_key_h_department as _KEY_DEPARTMENT,\n    A.GroupCode as [Department Code],\n    A.GroupName as [Department Name]\nfrom \"DWH\".\"dbo\".\"dv__s_bv_h_department_lastest\" A \nWHERE A.IsActive = 1 and A.IsVirtual=0", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.mart__employee": {"database": "DWH", "schema": "dbo", "name": "mart__employee", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\3_mart\\mart__employee.sql", "original_file_path": "models\\dv\\3_mart\\mart__employee.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.mart__employee", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "3_mart", "mart__employee"], "alias": "mart__employee", "checksum": {"name": "sha256", "checksum": "1f5b1652eedc1a67cb4783026f9fa465243222b1422a8cc75edfbf254f20bc65"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\3_mart\\mart__employee.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1689307661.3807235, "relation_name": "\"DWH\".\"dbo\".\"mart__employee\"", "raw_code": "select\r\n    a.dv_hash_key_h_user as _KEY_EMPLOYEE,\r\n    concat(concat(a.FirstName, ' '), a.LastName) as fullname,\r\n    a.FirstName,\r\n    a.LastName,\r\n    a.EmployeeCode,\r\n    case a.Gender when 1 then 'Nam' when 0 then 'Nu' end as gender,\r\n    a.Active,\r\n    a.BeginWorkDate,\r\n    b.Name as titles\r\nfrom {{ ref(\"dv__s_bv_h_user_lastest\") }} a\r\nleft join {{ ref(\"dv__r_titles\") }} b on a.TitleID = b.ID", "language": "sql", "refs": [["dv__s_bv_h_user_lastest"], ["dv__r_titles"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_user_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__r_titles"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\3_mart\\mart__employee.sql", "compiled": true, "compiled_code": "select\n    a.dv_hash_key_h_user as _KEY_EMPLOYEE,\n    concat(concat(a.FirstName, ' '), a.LastName) as fullname,\n    a.FirstName,\n    a.LastName,\n    a.EmployeeCode,\n    case a.Gender when 1 then 'Nam' when 0 then 'Nu' end as gender,\n    a.Active,\n    a.BeginWorkDate,\n    b.Name as titles\nfrom \"DWH\".\"dbo\".\"dv__s_bv_h_user_lastest\" a\nleft join \"DWH\".\"dbo\".\"dv__r_titles\" b on a.TitleID = b.ID", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.mart__opportunity": {"database": "DWH", "schema": "dbo", "name": "mart__opportunity", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\3_mart\\mart__opportunity.sql", "original_file_path": "models\\dv\\3_mart\\mart__opportunity.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.mart__opportunity", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "3_mart", "mart__opportunity"], "alias": "mart__opportunity", "checksum": {"name": "sha256", "checksum": "4f627636ed3780738f32fd9753374fa8ad4dfa3d3b85628cc8f09dbe5d1d466d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\3_mart\\mart__opportunity.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1689307661.3857274, "relation_name": "\"DWH\".\"dbo\".\"mart__opportunity\"", "raw_code": "select \r\n    B.dv_hash_key_h_opportunity AS _KEY_OPP\r\n    ,D.opportunity_code as Code\r\n\t,CAST(B.CreatedDate AS DATE) AS _KEY_OPP_DATE\r\n\t,ISNULL(B.StatusID,1) AS _KEY_OPP_STATUS\r\nfrom \r\n{{ ref(\"dv__h_opportunity\") }} A\r\ninner join {{ ref(\"dv__s_bv_h_opportunity_lastest\") }} B ON A.dv_hash_key_h_opportunity = B.dv_hash_key_h_opportunity\r\ninner join {{ ref(\"dv__l_opportunity_sa\") }} C ON A.dv_hash_key_h_opportunity = C.dv_duplicate_hash_key_h_opportunity\r\ninner join {{ ref(\"dv__h_opportunity\") }} D ON D.dv_hash_key_h_opportunity = C.dv_master_hash_key_h_opportunity", "language": "sql", "refs": [["dv__h_opportunity"], ["dv__s_bv_h_opportunity_lastest"], ["dv__l_opportunity_sa"], ["dv__h_opportunity"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__h_opportunity", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_opportunity_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_sa", "model.build_dv_for_cmc_use_automate_dv.dv__h_opportunity"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\3_mart\\mart__opportunity.sql", "compiled": true, "compiled_code": "select \n    B.dv_hash_key_h_opportunity AS _KEY_OPP\n    ,D.opportunity_code as Code\n\t,CAST(B.CreatedDate AS DATE) AS _KEY_OPP_DATE\n\t,ISNULL(B.StatusID,1) AS _KEY_OPP_STATUS\nfrom \n\"DWH\".\"dbo\".\"dv__h_opportunity\" A\ninner join \"DWH\".\"dbo\".\"dv__s_bv_h_opportunity_lastest\" B ON A.dv_hash_key_h_opportunity = B.dv_hash_key_h_opportunity\ninner join \"DWH\".\"dbo\".\"dv__l_opportunity_sa\" C ON A.dv_hash_key_h_opportunity = C.dv_duplicate_hash_key_h_opportunity\ninner join \"DWH\".\"dbo\".\"dv__h_opportunity\" D ON D.dv_hash_key_h_opportunity = C.dv_master_hash_key_h_opportunity", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.mart__pipeline": {"database": "DWH", "schema": "dbo", "name": "mart__pipeline", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\3_mart\\mart__pipeline.sql", "original_file_path": "models\\dv\\3_mart\\mart__pipeline.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.mart__pipeline", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "3_mart", "mart__pipeline"], "alias": "mart__pipeline", "checksum": {"name": "sha256", "checksum": "96e441e0a29d6c7846594cd430f9761ea07ddc1b7a4f561f5458fb89c3a1754b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\3_mart\\mart__pipeline.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1689307661.3897233, "relation_name": "\"DWH\".\"dbo\".\"mart__pipeline\"", "raw_code": "{% set status = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"] %}\r\n\r\n{% for statu in status %}\r\n     SELECT A.ID as _KEY_OPP_STATUS,{{statu}} as [OrderStatus]\r\n        , Pipeline=(\r\n                        SELECT TOP (1) Name \r\n                        FROM {{ ref('dv__r_opportunitystatus') }}  T \r\n                        WHERE T.ID = {{statu}} ORDER BY T.ID\r\n                    ) \r\n    FROM {{ ref('dv__r_opportunitystatus') }} A WHERE A.ID >= {{statu}}\r\n    {%- if not loop.last %} UNION ALL {% endif -%}\r\n{% endfor %}", "language": "sql", "refs": [["dv__r_opportunitystatus"], ["dv__r_opportunitystatus"], ["dv__r_opportunitystatus"], ["dv__r_opportunitystatus"], ["dv__r_opportunitystatus"], ["dv__r_opportunitystatus"], ["dv__r_opportunitystatus"], ["dv__r_opportunitystatus"], ["dv__r_opportunitystatus"], ["dv__r_opportunitystatus"], ["dv__r_opportunitystatus"], ["dv__r_opportunitystatus"], ["dv__r_opportunitystatus"], ["dv__r_opportunitystatus"], ["dv__r_opportunitystatus"], ["dv__r_opportunitystatus"], ["dv__r_opportunitystatus"], ["dv__r_opportunitystatus"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\3_mart\\mart__pipeline.sql", "compiled": true, "compiled_code": "\n\n\n     SELECT A.ID as _KEY_OPP_STATUS,1 as [OrderStatus]\n        , Pipeline=(\n                        SELECT TOP (1) Name \n                        FROM \"DWH\".\"dbo\".\"dv__r_opportunitystatus\"  T \n                        WHERE T.ID = 1 ORDER BY T.ID\n                    ) \n    FROM \"DWH\".\"dbo\".\"dv__r_opportunitystatus\" A WHERE A.ID >= 1 UNION ALL \n     SELECT A.ID as _KEY_OPP_STATUS,2 as [OrderStatus]\n        , Pipeline=(\n                        SELECT TOP (1) Name \n                        FROM \"DWH\".\"dbo\".\"dv__r_opportunitystatus\"  T \n                        WHERE T.ID = 2 ORDER BY T.ID\n                    ) \n    FROM \"DWH\".\"dbo\".\"dv__r_opportunitystatus\" A WHERE A.ID >= 2 UNION ALL \n     SELECT A.ID as _KEY_OPP_STATUS,3 as [OrderStatus]\n        , Pipeline=(\n                        SELECT TOP (1) Name \n                        FROM \"DWH\".\"dbo\".\"dv__r_opportunitystatus\"  T \n                        WHERE T.ID = 3 ORDER BY T.ID\n                    ) \n    FROM \"DWH\".\"dbo\".\"dv__r_opportunitystatus\" A WHERE A.ID >= 3 UNION ALL \n     SELECT A.ID as _KEY_OPP_STATUS,4 as [OrderStatus]\n        , Pipeline=(\n                        SELECT TOP (1) Name \n                        FROM \"DWH\".\"dbo\".\"dv__r_opportunitystatus\"  T \n                        WHERE T.ID = 4 ORDER BY T.ID\n                    ) \n    FROM \"DWH\".\"dbo\".\"dv__r_opportunitystatus\" A WHERE A.ID >= 4 UNION ALL \n     SELECT A.ID as _KEY_OPP_STATUS,5 as [OrderStatus]\n        , Pipeline=(\n                        SELECT TOP (1) Name \n                        FROM \"DWH\".\"dbo\".\"dv__r_opportunitystatus\"  T \n                        WHERE T.ID = 5 ORDER BY T.ID\n                    ) \n    FROM \"DWH\".\"dbo\".\"dv__r_opportunitystatus\" A WHERE A.ID >= 5 UNION ALL \n     SELECT A.ID as _KEY_OPP_STATUS,6 as [OrderStatus]\n        , Pipeline=(\n                        SELECT TOP (1) Name \n                        FROM \"DWH\".\"dbo\".\"dv__r_opportunitystatus\"  T \n                        WHERE T.ID = 6 ORDER BY T.ID\n                    ) \n    FROM \"DWH\".\"dbo\".\"dv__r_opportunitystatus\" A WHERE A.ID >= 6 UNION ALL \n     SELECT A.ID as _KEY_OPP_STATUS,7 as [OrderStatus]\n        , Pipeline=(\n                        SELECT TOP (1) Name \n                        FROM \"DWH\".\"dbo\".\"dv__r_opportunitystatus\"  T \n                        WHERE T.ID = 7 ORDER BY T.ID\n                    ) \n    FROM \"DWH\".\"dbo\".\"dv__r_opportunitystatus\" A WHERE A.ID >= 7 UNION ALL \n     SELECT A.ID as _KEY_OPP_STATUS,8 as [OrderStatus]\n        , Pipeline=(\n                        SELECT TOP (1) Name \n                        FROM \"DWH\".\"dbo\".\"dv__r_opportunitystatus\"  T \n                        WHERE T.ID = 8 ORDER BY T.ID\n                    ) \n    FROM \"DWH\".\"dbo\".\"dv__r_opportunitystatus\" A WHERE A.ID >= 8 UNION ALL \n     SELECT A.ID as _KEY_OPP_STATUS,9 as [OrderStatus]\n        , Pipeline=(\n                        SELECT TOP (1) Name \n                        FROM \"DWH\".\"dbo\".\"dv__r_opportunitystatus\"  T \n                        WHERE T.ID = 9 ORDER BY T.ID\n                    ) \n    FROM \"DWH\".\"dbo\".\"dv__r_opportunitystatus\" A WHERE A.ID >= 9", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.mart__plan": {"database": "DWH", "schema": "dbo", "name": "mart__plan", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\3_mart\\mart__plan.sql", "original_file_path": "models\\dv\\3_mart\\mart__plan.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.mart__plan", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "3_mart", "mart__plan"], "alias": "mart__plan", "checksum": {"name": "sha256", "checksum": "8f232c4c46c43a7157820bf9fd26c6d68dba8ec2e2fd1b03409b006612cc4d0a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\3_mart\\mart__plan.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1689307661.3977234, "relation_name": "\"DWH\".\"dbo\".\"mart__plan\"", "raw_code": "select \r\n\tCONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\r\n        ISNULL(NULLIF(UPPER(TRIM(CAST(E.dv_hash_key_h_user AS VARCHAR(MAX)))), ''), '^^'), '||',\r\n        ISNULL(NULLIF(UPPER(TRIM(CAST(E.dv_hash_key_h_department AS VARCHAR(MAX)))), ''), '^^'), '||',\r\n        ISNULL(NULLIF(UPPER(TRIM(CAST(G.TheFirstOfQuarter AS VARCHAR(MAX)))), ''), '^^'), '||',\r\n        ISNULL(NULLIF(UPPER(TRIM(CAST(IIF(RIGHT(A.dv_hash_key_h_product,1) >'5','2AABAF4E8EC2D733FB40F5A010AA1695','0650CA4123816C5A30F443C0590373E9') AS VARCHAR(MAX)))), ''), '^^')\r\n    ), '^^||^^||^^||^^')), 2) AS  _KEY_PLAN\r\n\t,E.dv_hash_key_h_user AS _KEY_EMPLOYEE \r\n\t,E.dv_hash_key_h_department AS _KEY_DEPARTMENT\r\n\t,G.TheFirstOfQuarter AS _KEY_SALE_DATE\r\n\t,IIF(RIGHT(A.dv_hash_key_h_product,1) >'5','2AABAF4E8EC2D733FB40F5A010AA1695','0650CA4123816C5A30F443C0590373E9') AS _KEY_SOLUTION\r\n\t,CAST(SUM(H.TotalBeforeVAT) AS BIGINT) AS Amount\r\nfrom {{ ref('dv__l_orderdetail') }} A\r\ninner join {{ ref('dv__h_order') }} B ON A.dv_hash_key_h_order = B.dv_hash_key_h_order\r\ninner join {{ ref('dv__l_opportunity_order') }} C ON C.dv_hash_key_h_order = B.dv_hash_key_h_order\r\ninner join {{ ref('dv__h_opportunity') }} D ON D.dv_hash_key_h_opportunity = C.dv_hash_key_h_opportunity\r\ninner join {{ ref('dv__l_opportunity_customer_user_department') }} E ON E.dv_hash_key_h_opportunity = D.dv_hash_key_h_opportunity\r\ninner join {{ ref('dv__s_bv_h_order_lastest') }} F ON F.dv_hash_key_h_order = A.dv_hash_key_h_order\r\ninner join Staging__CMIS_dbo_Dim_Date G  ON  CAST(G.Date_Key AS DATE ) = CAST(F.CreatedDate AS DATE ) \r\ninner join {{ ref('dv__s_bv_l_orderdetail_lastest') }} H ON H.dv_hash_key_l_orderdetail = A.dv_hash_key_l_orderdetail\r\nGROUP BY \r\nE.dv_hash_key_h_user\r\n,E.dv_hash_key_h_department\r\n,G.TheFirstOfQuarter\r\n,IIF(RIGHT(A.dv_hash_key_h_product,1) >'5','2AABAF4E8EC2D733FB40F5A010AA1695','0650CA4123816C5A30F443C0590373E9')\r\nHAVING SUM(H.TotalBeforeVAT) > 1000", "language": "sql", "refs": [["dv__l_orderdetail"], ["dv__h_order"], ["dv__l_opportunity_order"], ["dv__h_opportunity"], ["dv__l_opportunity_customer_user_department"], ["dv__s_bv_h_order_lastest"], ["dv__s_bv_l_orderdetail_lastest"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__l_orderdetail", "model.build_dv_for_cmc_use_automate_dv.dv__h_order", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_order", "model.build_dv_for_cmc_use_automate_dv.dv__h_opportunity", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_customer_user_department", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_order_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_orderdetail_lastest"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\3_mart\\mart__plan.sql", "compiled": true, "compiled_code": "select \n\tCONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(E.dv_hash_key_h_user AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(E.dv_hash_key_h_department AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(G.TheFirstOfQuarter AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(IIF(RIGHT(A.dv_hash_key_h_product,1) >'5','2AABAF4E8EC2D733FB40F5A010AA1695','0650CA4123816C5A30F443C0590373E9') AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^||^^')), 2) AS  _KEY_PLAN\n\t,E.dv_hash_key_h_user AS _KEY_EMPLOYEE \n\t,E.dv_hash_key_h_department AS _KEY_DEPARTMENT\n\t,G.TheFirstOfQuarter AS _KEY_SALE_DATE\n\t,IIF(RIGHT(A.dv_hash_key_h_product,1) >'5','2AABAF4E8EC2D733FB40F5A010AA1695','0650CA4123816C5A30F443C0590373E9') AS _KEY_SOLUTION\n\t,CAST(SUM(H.TotalBeforeVAT) AS BIGINT) AS Amount\nfrom \"DWH\".\"dbo\".\"dv__l_orderdetail\" A\ninner join \"DWH\".\"dbo\".\"dv__h_order\" B ON A.dv_hash_key_h_order = B.dv_hash_key_h_order\ninner join \"DWH\".\"dbo\".\"dv__l_opportunity_order\" C ON C.dv_hash_key_h_order = B.dv_hash_key_h_order\ninner join \"DWH\".\"dbo\".\"dv__h_opportunity\" D ON D.dv_hash_key_h_opportunity = C.dv_hash_key_h_opportunity\ninner join \"DWH\".\"dbo\".\"dv__l_opportunity_customer_user_department\" E ON E.dv_hash_key_h_opportunity = D.dv_hash_key_h_opportunity\ninner join \"DWH\".\"dbo\".\"dv__s_bv_h_order_lastest\" F ON F.dv_hash_key_h_order = A.dv_hash_key_h_order\ninner join Staging__CMIS_dbo_Dim_Date G  ON  CAST(G.Date_Key AS DATE ) = CAST(F.CreatedDate AS DATE ) \ninner join \"DWH\".\"dbo\".\"dv__s_bv_l_orderdetail_lastest\" H ON H.dv_hash_key_l_orderdetail = A.dv_hash_key_l_orderdetail\nGROUP BY \nE.dv_hash_key_h_user\n,E.dv_hash_key_h_department\n,G.TheFirstOfQuarter\n,IIF(RIGHT(A.dv_hash_key_h_product,1) >'5','2AABAF4E8EC2D733FB40F5A010AA1695','0650CA4123816C5A30F443C0590373E9')\nHAVING SUM(H.TotalBeforeVAT) > 1000", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.mart__profit": {"database": "DWH", "schema": "dbo", "name": "mart__profit", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\3_mart\\mart__profit.sql", "original_file_path": "models\\dv\\3_mart\\mart__profit.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.mart__profit", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "3_mart", "mart__profit"], "alias": "mart__profit", "checksum": {"name": "sha256", "checksum": "1d5ba8ded28b38ad2be2a838410e09ca113991708f628af498060cd74632efd3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\3_mart\\mart__profit.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1689307661.4037251, "relation_name": "\"DWH\".\"dbo\".\"mart__profit\"", "raw_code": "select \r\n\t\tCONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\r\n        ISNULL(NULLIF(UPPER(TRIM(CAST(D.dv_hash_key_h_opportunity AS VARCHAR(MAX)))), ''), '^^'), '||',\r\n        ISNULL(NULLIF(UPPER(TRIM(CAST(E.dv_hash_key_h_user AS VARCHAR(MAX)))), ''), '^^'), '||',\r\n        ISNULL(NULLIF(UPPER(TRIM(CAST(E.dv_hash_key_h_department AS VARCHAR(MAX)))), ''), '^^'), '||',\r\n\t\tISNULL(NULLIF(UPPER(TRIM(CAST(CAST(J.LockDate AS DATE) AS VARCHAR(MAX)))), ''), '^^'), '||',\r\n        ISNULL(NULLIF(UPPER(TRIM(CAST(A.dv_hash_key_h_product AS VARCHAR(MAX)))), ''), '^^')\r\n    ), '^^||^^||^^||^^')), 2) AS  _KEY_PROFIT\r\n\t,D.dv_hash_key_h_opportunity AS _KEY_OPP\r\n    ,E.dv_hash_key_h_user AS _KEY_EMPLOYE\r\n\t,E.dv_hash_key_h_department AS _KEY_DEPARTMENT\r\n    ,CAST(J.LockDate AS DATE) AS _KEY_SALE_DATE\r\n\t,A.dv_hash_key_h_product AS _KEY_SOLUTION\r\n\t,SUM(COALESCE(T.Profit, S.Profit, R.Profit) * (I.TotalBeforeVAT / K.TotalBeforeVAT)) AS Amount\r\nfrom {{ ref('dv__l_orderdetail') }} A \r\n\tinner join {{ ref('dv__h_order') }} B ON A.dv_hash_key_h_order = B.dv_hash_key_h_order\r\n\tinner join {{ ref('dv__l_opportunity_order') }} C ON C.dv_hash_key_h_order = B.dv_hash_key_h_order\r\n\tinner join {{ ref('dv__h_opportunity') }} D ON D.dv_hash_key_h_opportunity = C.dv_hash_key_h_opportunity\r\n\tinner join {{ ref('dv__l_opportunity_customer_user_department') }} E ON E.dv_hash_key_h_opportunity = D.dv_hash_key_h_opportunity\r\n\tinner join {{ ref('dv__l_opportunity_contract') }} F ON F.dv_hash_key_h_opportunity = D.dv_hash_key_h_opportunity\r\n\tinner join {{ ref('dv__h_contract') }} G ON G.dv_hash_key_h_contract = F.dv_hash_key_h_contract\r\n\tinner join {{ ref('dv__l_contract_lockstatus') }} H ON H.dv_hash_key_h_contract = G.dv_hash_key_h_contract\r\n\tinner join {{ ref('dv__s_bv_l_contract_lockstatus_cleaned_lastest') }} J ON J.dv_hash_key_l_contract_lockstatus = H.dv_hash_key_l_contract_lockstatus\r\n\tinner join {{ ref('dv__s_bv_l_orderdetail_lastest') }} I ON I.dv_hash_key_l_orderdetail = A.dv_hash_key_l_orderdetail\r\n\tinner join {{ ref('dv__s_bv_h_order_lastest') }} K ON K.dv_hash_key_h_order = B.dv_hash_key_h_order\r\n\tinner join {{ ref('dv__s_bv_h_opportunity_lastest') }} L ON L.dv_hash_key_h_opportunity = D.dv_hash_key_h_opportunity\r\n\tinner join {{ ref('dv__s_bv_h_contract_cleaned_lastest') }} M ON M.dv_hash_key_h_contract = G.dv_hash_key_h_contract\r\n\tleft join  {{ ref('dv__l_opportunity_businessplan') }} N ON N.dv_hash_key_h_opportunity = D.dv_hash_key_h_opportunity\r\n\tleft join  {{ ref('dv__l_opportunity_estimatecontract') }} O ON O.dv_hash_key_h_opportunity = D.dv_hash_key_h_opportunity\r\n\tleft join  {{ ref('dv__l_opportunity_finalizationcontract') }} P ON P.dv_hash_key_h_opportunity = D.dv_hash_key_h_opportunity\r\n\tleft join  {{ ref('dv__s_bv_h_businessplan_cleaned_lastest') }} R ON R.dv_hash_key_h_businessplan =N.dv_hash_key_h_businessplan\r\n\tleft join  {{ ref('dv__s_bv_h_estimatecontract_cleaned_lastest') }} S ON S.dv_hash_key_h_estimatecontract =O.dv_hash_key_h_estimatecontract\r\n\tleft join  {{ ref('dv__s_bv_h_finalizationcontract_cleaned_lastest') }} T ON T.dv_hash_key_h_finalizationcontract =P.dv_hash_key_h_finalizationcontract\r\nGROUP BY\r\nD.dv_hash_key_h_opportunity\r\n    ,E.dv_hash_key_h_user \r\n\t,E.dv_hash_key_h_department\r\n    ,CAST(J.LockDate AS DATE) \r\n\t,A.dv_hash_key_h_product;", "language": "sql", "refs": [["dv__l_orderdetail"], ["dv__h_order"], ["dv__l_opportunity_order"], ["dv__h_opportunity"], ["dv__l_opportunity_customer_user_department"], ["dv__l_opportunity_contract"], ["dv__h_contract"], ["dv__l_contract_lockstatus"], ["dv__s_bv_l_contract_lockstatus_cleaned_lastest"], ["dv__s_bv_l_orderdetail_lastest"], ["dv__s_bv_h_order_lastest"], ["dv__s_bv_h_opportunity_lastest"], ["dv__s_bv_h_contract_cleaned_lastest"], ["dv__l_opportunity_businessplan"], ["dv__l_opportunity_estimatecontract"], ["dv__l_opportunity_finalizationcontract"], ["dv__s_bv_h_businessplan_cleaned_lastest"], ["dv__s_bv_h_estimatecontract_cleaned_lastest"], ["dv__s_bv_h_finalizationcontract_cleaned_lastest"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__l_orderdetail", "model.build_dv_for_cmc_use_automate_dv.dv__h_order", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_order", "model.build_dv_for_cmc_use_automate_dv.dv__h_opportunity", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_customer_user_department", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_contract", "model.build_dv_for_cmc_use_automate_dv.dv__h_contract", "model.build_dv_for_cmc_use_automate_dv.dv__l_contract_lockstatus", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_contract_lockstatus_cleaned_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_orderdetail_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_order_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_opportunity_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_contract_cleaned_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_businessplan", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_estimatecontract", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_finalizationcontract", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_businessplan_cleaned_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_estimatecontract_cleaned_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_finalizationcontract_cleaned_lastest"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\3_mart\\mart__profit.sql", "compiled": true, "compiled_code": "select \n\t\tCONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(D.dv_hash_key_h_opportunity AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(E.dv_hash_key_h_user AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(E.dv_hash_key_h_department AS VARCHAR(MAX)))), ''), '^^'), '||',\n\t\tISNULL(NULLIF(UPPER(TRIM(CAST(CAST(J.LockDate AS DATE) AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(A.dv_hash_key_h_product AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^||^^')), 2) AS  _KEY_PROFIT\n\t,D.dv_hash_key_h_opportunity AS _KEY_OPP\n    ,E.dv_hash_key_h_user AS _KEY_EMPLOYE\n\t,E.dv_hash_key_h_department AS _KEY_DEPARTMENT\n    ,CAST(J.LockDate AS DATE) AS _KEY_SALE_DATE\n\t,A.dv_hash_key_h_product AS _KEY_SOLUTION\n\t,SUM(COALESCE(T.Profit, S.Profit, R.Profit) * (I.TotalBeforeVAT / K.TotalBeforeVAT)) AS Amount\nfrom \"DWH\".\"dbo\".\"dv__l_orderdetail\" A \n\tinner join \"DWH\".\"dbo\".\"dv__h_order\" B ON A.dv_hash_key_h_order = B.dv_hash_key_h_order\n\tinner join \"DWH\".\"dbo\".\"dv__l_opportunity_order\" C ON C.dv_hash_key_h_order = B.dv_hash_key_h_order\n\tinner join \"DWH\".\"dbo\".\"dv__h_opportunity\" D ON D.dv_hash_key_h_opportunity = C.dv_hash_key_h_opportunity\n\tinner join \"DWH\".\"dbo\".\"dv__l_opportunity_customer_user_department\" E ON E.dv_hash_key_h_opportunity = D.dv_hash_key_h_opportunity\n\tinner join \"DWH\".\"dbo\".\"dv__l_opportunity_contract\" F ON F.dv_hash_key_h_opportunity = D.dv_hash_key_h_opportunity\n\tinner join \"DWH\".\"dbo\".\"dv__h_contract\" G ON G.dv_hash_key_h_contract = F.dv_hash_key_h_contract\n\tinner join \"DWH\".\"dbo\".\"dv__l_contract_lockstatus\" H ON H.dv_hash_key_h_contract = G.dv_hash_key_h_contract\n\tinner join \"DWH\".\"dbo\".\"dv__s_bv_l_contract_lockstatus_cleaned_lastest\" J ON J.dv_hash_key_l_contract_lockstatus = H.dv_hash_key_l_contract_lockstatus\n\tinner join \"DWH\".\"dbo\".\"dv__s_bv_l_orderdetail_lastest\" I ON I.dv_hash_key_l_orderdetail = A.dv_hash_key_l_orderdetail\n\tinner join \"DWH\".\"dbo\".\"dv__s_bv_h_order_lastest\" K ON K.dv_hash_key_h_order = B.dv_hash_key_h_order\n\tinner join \"DWH\".\"dbo\".\"dv__s_bv_h_opportunity_lastest\" L ON L.dv_hash_key_h_opportunity = D.dv_hash_key_h_opportunity\n\tinner join \"DWH\".\"dbo\".\"dv__s_bv_h_contract_cleaned_lastest\" M ON M.dv_hash_key_h_contract = G.dv_hash_key_h_contract\n\tleft join  \"DWH\".\"dbo\".\"dv__l_opportunity_businessplan\" N ON N.dv_hash_key_h_opportunity = D.dv_hash_key_h_opportunity\n\tleft join  \"DWH\".\"dbo\".\"dv__l_opportunity_estimatecontract\" O ON O.dv_hash_key_h_opportunity = D.dv_hash_key_h_opportunity\n\tleft join  \"DWH\".\"dbo\".\"dv__l_opportunity_finalizationcontract\" P ON P.dv_hash_key_h_opportunity = D.dv_hash_key_h_opportunity\n\tleft join  \"DWH\".\"dbo\".\"dv__s_bv_h_businessplan_cleaned_lastest\" R ON R.dv_hash_key_h_businessplan =N.dv_hash_key_h_businessplan\n\tleft join  \"DWH\".\"dbo\".\"dv__s_bv_h_estimatecontract_cleaned_lastest\" S ON S.dv_hash_key_h_estimatecontract =O.dv_hash_key_h_estimatecontract\n\tleft join  \"DWH\".\"dbo\".\"dv__s_bv_h_finalizationcontract_cleaned_lastest\" T ON T.dv_hash_key_h_finalizationcontract =P.dv_hash_key_h_finalizationcontract\nGROUP BY\nD.dv_hash_key_h_opportunity\n    ,E.dv_hash_key_h_user \n\t,E.dv_hash_key_h_department\n    ,CAST(J.LockDate AS DATE) \n\t,A.dv_hash_key_h_product;", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.mart__sale": {"database": "DWH", "schema": "dbo", "name": "mart__sale", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\3_mart\\mart__sale.sql", "original_file_path": "models\\dv\\3_mart\\mart__sale.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.mart__sale", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "3_mart", "mart__sale"], "alias": "mart__sale", "checksum": {"name": "sha256", "checksum": "f2667fb2a89b7207bd51c66e88d0ad6ce60b72d068b0ef679b540a8811a99f64"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\3_mart\\mart__sale.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1689307661.4077234, "relation_name": "\"DWH\".\"dbo\".\"mart__sale\"", "raw_code": "select\r\n\tCONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\r\n        ISNULL(NULLIF(UPPER(TRIM(CAST(D.dv_hash_key_h_opportunity AS VARCHAR(MAX)))), ''), '^^'), '||',\r\n        ISNULL(NULLIF(UPPER(TRIM(CAST(E.dv_hash_key_h_user AS VARCHAR(MAX)))), ''), '^^'), '||',\r\n        ISNULL(NULLIF(UPPER(TRIM(CAST(E.dv_hash_key_h_department AS VARCHAR(MAX)))), ''), '^^'), '||',\r\n\t\tISNULL(NULLIF(UPPER(TRIM(CAST(CAST(J.LockDate AS DATE) AS VARCHAR(MAX)))), ''), '^^'), '||',\r\n        ISNULL(NULLIF(UPPER(TRIM(CAST(A.dv_hash_key_h_product AS VARCHAR(MAX)))), ''), '^^')\r\n    ), '^^||^^||^^||^^')), 2) AS  _KEY_SALE\r\n\t,D.dv_hash_key_h_opportunity AS _KEY_OPP\r\n    ,E.dv_hash_key_h_user AS _KEY_EMPLOYE\r\n\t,E.dv_hash_key_h_department AS _KEY_DEPARTMENT\r\n    ,CAST(J.LockDate AS DATE) AS _KEY_SALE_DATE\r\n\t,A.dv_hash_key_h_product AS _KEY_SOLUTION\r\n\t,SUM(I.TotalBeforeVAT) AS [Amount Exclude VAT]\r\nfrom {{ ref('dv__l_orderdetail') }} A \r\n\tinner join {{ ref('dv__h_order') }} B ON A.dv_hash_key_h_order = B.dv_hash_key_h_order\r\n\tinner join {{ ref('dv__l_opportunity_order') }} C ON C.dv_hash_key_h_order = B.dv_hash_key_h_order\r\n\tinner join {{ ref('dv__h_opportunity') }} D ON D.dv_hash_key_h_opportunity = C.dv_hash_key_h_opportunity\r\n\tinner join {{ ref('dv__l_opportunity_customer_user_department') }} E ON E.dv_hash_key_h_opportunity = D.dv_hash_key_h_opportunity\r\n\tinner join {{ ref('dv__l_opportunity_contract') }} F ON F.dv_hash_key_h_opportunity = D.dv_hash_key_h_opportunity\r\n\tinner join {{ ref('dv__h_contract') }} G ON G.dv_hash_key_h_contract = F.dv_hash_key_h_contract\r\n\tinner join {{ ref('dv__l_contract_lockstatus') }} H ON H.dv_hash_key_h_contract = G.dv_hash_key_h_contract\r\n\tinner join {{ ref('dv__s_bv_l_contract_lockstatus_cleaned_lastest') }} J ON J.dv_hash_key_l_contract_lockstatus = H.dv_hash_key_l_contract_lockstatus\r\n\tinner join {{ ref('dv__s_bv_l_orderdetail_lastest') }} I ON I.dv_hash_key_l_orderdetail = A.dv_hash_key_l_orderdetail\r\n\tinner join {{ ref('dv__s_bv_h_order_lastest') }} K ON K.dv_hash_key_h_order = B.dv_hash_key_h_order\r\n\tinner join {{ ref('dv__s_bv_h_opportunity_lastest') }} L ON L.dv_hash_key_h_opportunity = D.dv_hash_key_h_opportunity\r\n\tinner join {{ ref('dv__s_bv_h_contract_cleaned_lastest') }} M ON M.dv_hash_key_h_contract = G.dv_hash_key_h_contract\r\nGROUP BY\r\nD.dv_hash_key_h_opportunity\r\n    ,E.dv_hash_key_h_user \r\n\t,E.dv_hash_key_h_department\r\n    ,CAST(J.LockDate AS DATE) \r\n\t,A.dv_hash_key_h_product", "language": "sql", "refs": [["dv__l_orderdetail"], ["dv__h_order"], ["dv__l_opportunity_order"], ["dv__h_opportunity"], ["dv__l_opportunity_customer_user_department"], ["dv__l_opportunity_contract"], ["dv__h_contract"], ["dv__l_contract_lockstatus"], ["dv__s_bv_l_contract_lockstatus_cleaned_lastest"], ["dv__s_bv_l_orderdetail_lastest"], ["dv__s_bv_h_order_lastest"], ["dv__s_bv_h_opportunity_lastest"], ["dv__s_bv_h_contract_cleaned_lastest"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__l_orderdetail", "model.build_dv_for_cmc_use_automate_dv.dv__h_order", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_order", "model.build_dv_for_cmc_use_automate_dv.dv__h_opportunity", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_customer_user_department", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_contract", "model.build_dv_for_cmc_use_automate_dv.dv__h_contract", "model.build_dv_for_cmc_use_automate_dv.dv__l_contract_lockstatus", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_contract_lockstatus_cleaned_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_orderdetail_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_order_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_opportunity_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_contract_cleaned_lastest"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\3_mart\\mart__sale.sql", "compiled": true, "compiled_code": "select\n\tCONVERT(CHAR(32), HASHBYTES('MD5', NULLIF(CONCAT(\n        ISNULL(NULLIF(UPPER(TRIM(CAST(D.dv_hash_key_h_opportunity AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(E.dv_hash_key_h_user AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(E.dv_hash_key_h_department AS VARCHAR(MAX)))), ''), '^^'), '||',\n\t\tISNULL(NULLIF(UPPER(TRIM(CAST(CAST(J.LockDate AS DATE) AS VARCHAR(MAX)))), ''), '^^'), '||',\n        ISNULL(NULLIF(UPPER(TRIM(CAST(A.dv_hash_key_h_product AS VARCHAR(MAX)))), ''), '^^')\n    ), '^^||^^||^^||^^')), 2) AS  _KEY_SALE\n\t,D.dv_hash_key_h_opportunity AS _KEY_OPP\n    ,E.dv_hash_key_h_user AS _KEY_EMPLOYE\n\t,E.dv_hash_key_h_department AS _KEY_DEPARTMENT\n    ,CAST(J.LockDate AS DATE) AS _KEY_SALE_DATE\n\t,A.dv_hash_key_h_product AS _KEY_SOLUTION\n\t,SUM(I.TotalBeforeVAT) AS [Amount Exclude VAT]\nfrom \"DWH\".\"dbo\".\"dv__l_orderdetail\" A \n\tinner join \"DWH\".\"dbo\".\"dv__h_order\" B ON A.dv_hash_key_h_order = B.dv_hash_key_h_order\n\tinner join \"DWH\".\"dbo\".\"dv__l_opportunity_order\" C ON C.dv_hash_key_h_order = B.dv_hash_key_h_order\n\tinner join \"DWH\".\"dbo\".\"dv__h_opportunity\" D ON D.dv_hash_key_h_opportunity = C.dv_hash_key_h_opportunity\n\tinner join \"DWH\".\"dbo\".\"dv__l_opportunity_customer_user_department\" E ON E.dv_hash_key_h_opportunity = D.dv_hash_key_h_opportunity\n\tinner join \"DWH\".\"dbo\".\"dv__l_opportunity_contract\" F ON F.dv_hash_key_h_opportunity = D.dv_hash_key_h_opportunity\n\tinner join \"DWH\".\"dbo\".\"dv__h_contract\" G ON G.dv_hash_key_h_contract = F.dv_hash_key_h_contract\n\tinner join \"DWH\".\"dbo\".\"dv__l_contract_lockstatus\" H ON H.dv_hash_key_h_contract = G.dv_hash_key_h_contract\n\tinner join \"DWH\".\"dbo\".\"dv__s_bv_l_contract_lockstatus_cleaned_lastest\" J ON J.dv_hash_key_l_contract_lockstatus = H.dv_hash_key_l_contract_lockstatus\n\tinner join \"DWH\".\"dbo\".\"dv__s_bv_l_orderdetail_lastest\" I ON I.dv_hash_key_l_orderdetail = A.dv_hash_key_l_orderdetail\n\tinner join \"DWH\".\"dbo\".\"dv__s_bv_h_order_lastest\" K ON K.dv_hash_key_h_order = B.dv_hash_key_h_order\n\tinner join \"DWH\".\"dbo\".\"dv__s_bv_h_opportunity_lastest\" L ON L.dv_hash_key_h_opportunity = D.dv_hash_key_h_opportunity\n\tinner join \"DWH\".\"dbo\".\"dv__s_bv_h_contract_cleaned_lastest\" M ON M.dv_hash_key_h_contract = G.dv_hash_key_h_contract\nGROUP BY\nD.dv_hash_key_h_opportunity\n    ,E.dv_hash_key_h_user \n\t,E.dv_hash_key_h_department\n    ,CAST(J.LockDate AS DATE) \n\t,A.dv_hash_key_h_product", "extra_ctes_injected": true, "extra_ctes": []}, "model.build_dv_for_cmc_use_automate_dv.mart__solution": {"database": "DWH", "schema": "dbo", "name": "mart__solution", "resource_type": "model", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "dv\\3_mart\\mart__solution.sql", "original_file_path": "models\\dv\\3_mart\\mart__solution.sql", "unique_id": "model.build_dv_for_cmc_use_automate_dv.mart__solution", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "3_mart", "mart__solution"], "alias": "mart__solution", "checksum": {"name": "sha256", "checksum": "d71552cfb1b824d9851fa9595049fd34c4c184109b1c53a74394964c0a377cff"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\build_dv_for_cmc_use_automate_dv\\models\\dv\\3_mart\\mart__solution.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1689307661.410724, "relation_name": "\"DWH\".\"dbo\".\"mart__solution\"", "raw_code": "select \r\n\tA.dv_hash_key_h_product as _KEY_SOLUTION\r\n\t,A.Code as SolutionCode\r\n\t,A.Name as SolutionName\r\n\t,A.Description as SolutionDesc \r\n\t,A.Activate \r\n\t,A.ParentID as SolutionParentID \r\n\t,A.ADN \r\n\t,cast(\r\n\t\tIIF(A.Code LIKE 'BM%', IIF(A.Code NOT LIKE 'BM1%', 'BigMove', N'Truy\u1ec1n th\u1ed1ng'), N'Truy\u1ec1n th\u1ed1ng') \r\n\tas varchar(50)\r\n\t)\t\r\n\tAS [Solution Type]\r\nfrom {{ ref('dv__s_bv_h_product_lastest') }} A", "language": "sql", "refs": [["dv__s_bv_h_product_lastest"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_product_lastest"]}, "compiled_path": "target\\compiled\\build_dv_for_cmc_use_automate_dv\\models\\dv\\3_mart\\mart__solution.sql", "compiled": true, "compiled_code": "select \n\tA.dv_hash_key_h_product as _KEY_SOLUTION\n\t,A.Code as SolutionCode\n\t,A.Name as SolutionName\n\t,A.Description as SolutionDesc \n\t,A.Activate \n\t,A.ParentID as SolutionParentID \n\t,A.ADN \n\t,cast(\n\t\tIIF(A.Code LIKE 'BM%', IIF(A.Code NOT LIKE 'BM1%', 'BigMove', N'Truy\u1ec1n th\u1ed1ng'), N'Truy\u1ec1n th\u1ed1ng') \n\tas varchar(50)\n\t)\t\n\tAS [Solution Type]\nfrom \"DWH\".\"dbo\".\"dv__s_bv_h_product_lastest\" A", "extra_ctes_injected": true, "extra_ctes": []}}, "sources": {"source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Opportunities": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_Opportunities", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Opportunities", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_Opportunities"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_Opportunities", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Danh s\u00e1ch m\u00e3 v\u1ee5 vi\u1ec7c  Module: Kinh doanh\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_Opportunities\"", "created_at": 1689307661.516336}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Groups": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_Groups", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Groups", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_Groups"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_Groups", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Danh s\u00e1ch b\u1ed9 ph\u1eadn/ph\u00f2ng ban  Module: CMIS: C\u01a1 c\u1ea5u t\u1ed5 ch\u1ee9c\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_Groups\"", "created_at": 1689307661.516336}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_GroupHistories": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_GroupHistories", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_GroupHistories", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_GroupHistories"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_GroupHistories", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "L\u1ecbch s\u1eed thay \u0111\u1ed5i b\u1ed9 ph\u1eadn  Module: CMIS: C\u01a1 c\u1ea5u t\u1ed5 ch\u1ee9c\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_GroupHistories\"", "created_at": 1689307661.5173502}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_ct00": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_ct00", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_ct00", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_ct00"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_ct00", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "S\u1ed5 c\u00e1i Module: GL DB: FAST\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_ct00\"", "created_at": 1689307661.5173502}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Orders": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_Orders", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Orders", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_Orders"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_Orders", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0110\u01a1n h\u00e0ng Module: Kinh doanh\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_Orders\"", "created_at": 1689307661.5173502}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_OrderDetails": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_OrderDetails", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_OrderDetails", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_OrderDetails"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_OrderDetails", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "\u0110\u01a1n h\u00e0ng - Chi ti\u1ebft SPDV Module: Kinh doanh\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_OrderDetails\"", "created_at": 1689307661.5173502}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Contracts": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_Contracts", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Contracts", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_Contracts"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_Contracts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Phi\u1ebfu H\u1ee3p \u0111\u1ed3ng Module: Kinh doanh\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_Contracts\"", "created_at": 1689307661.518334}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_ContractDetails": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_ContractDetails", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_ContractDetails", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_ContractDetails"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_ContractDetails", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Chi ti\u1ebft H\u0110\r\nModule: Kinh doanh", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_ContractDetails\"", "created_at": 1689307661.518334}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_EstimateContracts": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_EstimateContracts", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_EstimateContracts", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_EstimateContracts"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_EstimateContracts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "D\u1ef1 to\u00e1n h\u1ee3p \u0111\u1ed3ng Module: Kinh doanh\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_EstimateContracts\"", "created_at": 1689307661.518334}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_FinalizationContracts": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_FinalizationContracts", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_FinalizationContracts", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_FinalizationContracts"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_FinalizationContracts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Phi\u1ebfu Quy\u1ebft to\u00e1n h\u1ee3p \u0111\u1ed3ng Module: Kinh doanh\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_FinalizationContracts\"", "created_at": 1689307661.5193367}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_BusinessPlans": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_BusinessPlans", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_BusinessPlans", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_BusinessPlans"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_BusinessPlans", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "PAKD: Ph\u01b0\u01a1ng \u00e1n kinh doanh Module: Ph\u01b0\u01a1ng \u00e1n kinh doanh\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_BusinessPlans\"", "created_at": 1689307661.5193367}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Estimates": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_Estimates", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Estimates", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_Estimates"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_Estimates", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Phi\u1ebfu D\u1ef1 to\u00e1n (DTTV, DTPATK, DTTK) + DTTK: D\u1ef1 to\u00e1n tri\u1ec3n khai + DTTV: D\u1ef1 to\u00e1n t\u01b0 v\u1ea5n + DTPATK: D\u1ef1 to\u00e1n ph\u01b0\u01a1ng \u00e1n tri\u1ec3n khai Module: D\u1ef1 to\u00e1n\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_Estimates\"", "created_at": 1689307661.5193367}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_FinalizationEstimates": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_FinalizationEstimates", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_FinalizationEstimates", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_FinalizationEstimates"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_FinalizationEstimates", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Phi\u1ebfu Quy\u1ebft to\u00e1n tri\u1ec3n khai (QTTK) Module: Quy\u1ebft to\u00e1n tri\u1ec3n khai\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_FinalizationEstimates\"", "created_at": 1689307661.5193367}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_ContractLockStatus": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_ContractLockStatus", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_ContractLockStatus", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_ContractLockStatus"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_ContractLockStatus", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "L\u1ecbch s\u1eed m\u1edf/kh\u00f3a h\u1ee3p \u0111\u1ed3ng Module: Kinh doanh\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_ContractLockStatus\"", "created_at": 1689307661.5193367}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_ContractLockTypes": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_ContractLockTypes", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_ContractLockTypes", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_ContractLockTypes"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_ContractLockTypes", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tr\u1ea1ng th\u00e1i m\u1edf/kh\u00f3a h\u1ee3p \u0111\u1ed3ng Module: Kinh doanh\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_ContractLockTypes\"", "created_at": 1689307661.5203433}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Customers": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_Customers", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Customers", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_Customers"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_Customers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Danh s\u00e1ch kh\u00e1ch h\u00e0ng. Module: CMIS - Kh\u00e1ch h\u00e0ng. ID, Code \u0111\u01b0\u1ee3c \u0111\u01b0a v\u00e0o HUB c\u00f2n c\u00e1c thu\u1ed9c t\u00ednh c\u00f2n l\u1ea1i \u0111\u01b0a v\u00e0o SAT\n", "columns": {"ID": {"name": "ID", "description": "M\u00e3 t\u1ef1 t\u0103ng c\u1ee7a kh\u00e1ch h\u00e0ng, li\u00ean k\u1ebft n\u1ed9i b\u1ed9 trong DB. \u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 Hash v\u00e0o HUB_CUSTOMER\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Code": {"name": "Code", "description": "M\u00e3 kh\u00e1ch h\u00e0ng theo quy t\u1eafc l\u00e0 duy nh\u1ea5t nh\u01b0ng hi\u1ec7n \u0111ang ph\u00e1t hi\u1ec7n tr\u00f9ng. \u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 Hash v\u00e0o HUB_CUSTOMER\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_Customers\"", "created_at": 1689307661.5203433}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_CustomerTypes": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_CustomerTypes", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_CustomerTypes", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_CustomerTypes"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_CustomerTypes", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Ph\u00e2n lo\u1ea1i kh\u00e1ch h\u00e0ng theo tr\u1ea1ng th\u00e1i Module: CMIS - Kh\u00e1ch h\u00e0ng. \u0110\u01b0a v\u00e0o Ref (ID l\u00e0 PK)\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_CustomerTypes\"", "created_at": 1689307661.5203433}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_IndustryTypes": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_IndustryTypes", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_IndustryTypes", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_IndustryTypes"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_IndustryTypes", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Danh m\u1ee5c Industry Module: CMIS - Kh\u00e1ch h\u00e0ng \u0110\u01b0a v\u00e0o REF_ (ID l\u00e0 PK)\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_IndustryTypes\"", "created_at": 1689307661.5203433}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_EnvironmentTypes": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_EnvironmentTypes", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_EnvironmentTypes", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_EnvironmentTypes"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_EnvironmentTypes", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Danh m\u1ee5c Th\u1ecb tr\u01b0\u1eddng (kh\u00e1ch h\u00e0ng) Module: CMIS - Master data \u0110\u01b0a v\u00e0o Ref (ID l\u00e0 PK)\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_EnvironmentTypes\"", "created_at": 1689307661.5203433}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_UserCustomers": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_UserCustomers", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_UserCustomers", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_UserCustomers"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_UserCustomers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Th\u00f4ng tin NVKD ph\u1ee5 tr\u00e1ch KH (AM, Sub) Module: CMIS - Kinh doanh - Kh\u00e1ch h\u00e0ng Nh\u00e2n vi\u00ean n\u00e0o \u0111ang h\u1ed7 tr\u1ee3 cho kh\u00e1ch h\u00e0ng n\u00e0o\n", "columns": {"UserID": {"name": "UserID", "description": "M\u00e3 nh\u00e2n vi\u00ean (qu\u1ea3n l\u00fd n\u1ed9i t\u1ea1i trong CMIS)  S\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u01b0a v\u00e0o LNK_USERCUSTOMER\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CustomerID": {"name": "CustomerID", "description": "M\u00e3 kh\u00e1ch (qu\u1ea3n l\u00fd n\u1ed9i t\u1ea1i trong CMIS) \n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_UserCustomers\"", "created_at": 1689307661.5213358}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Users": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_Users", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Users", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_Users"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_Users", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Danh s\u00e1ch nh\u00e2n vi\u00ean Module: CMIS - Master data\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_Users\"", "created_at": 1689307661.5213358}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Titles": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_Titles", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Titles", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_Titles"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_Titles", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Danh m\u1ee5c ch\u1ee9c danh Module: CMIS - Master data\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_Titles\"", "created_at": 1689307661.5213358}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_OpportunityStatus": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_OpportunityStatus", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_OpportunityStatus", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_OpportunityStatus"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_OpportunityStatus", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tr\u1ea1ng th\u00e1i c\u01a1 h\u1ed9i Module: CMIS - Master data\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_OpportunityStatus\"", "created_at": 1689307661.5213358}, "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Branches": {"database": "DWH", "schema": "dbo", "name": "Staging__CMIS_dbo_Branches", "resource_type": "source", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "models\\dv\\_DEVDW__sources.yml", "original_file_path": "models\\dv\\_DEVDW__sources.yml", "unique_id": "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Branches", "fqn": ["build_dv_for_cmc_use_automate_dv", "dv", "DWH", "Staging__CMIS_dbo_Branches"], "source_name": "DWH", "source_description": "", "loader": "", "identifier": "Staging__CMIS_dbo_Branches", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "s\u1ea3n ph\u1ea9m c\u1ee7a CMC", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DWH\".\"dbo\".\"Staging__CMIS_dbo_Branches\"", "created_at": 1689307661.5213358}}, "macros": {"macro.dbt_fabric.fabric__get_show_grant_sql": {"name": "fabric__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_fabric.fabric__get_show_grant_sql", "macro_sql": "{% macro fabric__get_show_grant_sql(relation) %}\n    select\n        GRANTEE as grantee,\n        PRIVILEGE_TYPE as privilege_type\n    from INFORMATION_SCHEMA.TABLE_PRIVILEGES {{ information_schema_hints() }}\n    where TABLE_CATALOG = '{{ relation.database }}'\n      and TABLE_SCHEMA = '{{ relation.schema }}'\n      and TABLE_NAME = '{{ relation.identifier }}'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.902976, "supported_languages": null}, "macro.dbt_fabric.fabric__get_grant_sql": {"name": "fabric__get_grant_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_fabric.fabric__get_grant_sql", "macro_sql": "\n\n\n{%- macro fabric__get_grant_sql(relation, privilege, grantees) -%}\n    {%- set grantees_safe = [] -%}\n    {%- for grantee in grantees -%}\n        {%- set grantee_safe = \"[\" ~ grantee ~ \"]\" -%}\n        {%- do grantees_safe.append(grantee_safe) -%}\n    {%- endfor -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees_safe | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9050205, "supported_languages": null}, "macro.dbt_fabric.fabric__get_revoke_sql": {"name": "fabric__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_fabric.fabric__get_revoke_sql", "macro_sql": "{%- macro fabric__get_revoke_sql(relation, privilege, grantees) -%}\n    {%- set grantees_safe = [] -%}\n    {%- for grantee in grantees -%}\n        {%- set grantee_safe = \"[\" ~ grantee ~ \"]\" -%}\n        {%- do grantees_safe.append(grantee_safe) -%}\n    {%- endfor -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees_safe | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.906029, "supported_languages": null}, "macro.dbt_fabric.get_provision_sql": {"name": "get_provision_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_fabric.get_provision_sql", "macro_sql": "{% macro get_provision_sql(relation, privilege, grantees) %}\n    {% for grantee in grantees %}\n        if not exists(select name from sys.database_principals where name = '{{ grantee }}')\n        create user [{{ grantee }}] from external provider;\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9070282, "supported_languages": null}, "macro.dbt_fabric.fabric__apply_grants": {"name": "fabric__apply_grants", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_fabric.fabric__apply_grants", "macro_sql": "{% macro fabric__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n\n            {% if config.get('auto_provision_aad_principals', False) %}\n                {% set provision_statement_list = get_dcl_statement_list(relation, needs_granting, get_provision_sql) %}\n            {% else %}\n                {% set provision_statement_list = [] %}\n            {% endif %}\n\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + provision_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9090273, "supported_languages": null}, "macro.dbt_fabric.fabric__get_columns_in_relation": {"name": "fabric__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_fabric.fabric__get_columns_in_relation", "macro_sql": "{% macro fabric__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n\n    with mapping as (\n        select\n            row_number() over (partition by object_name(c.object_id) order by c.column_id) as ordinal_position,\n            c.name collate database_default as column_name,\n            t.name as data_type,\n            c.max_length as character_maximum_length,\n            c.precision as numeric_precision,\n            c.scale as numeric_scale\n        from [{{ 'tempdb' if '#' in relation.identifier else relation.database }}].sys.columns c {{ information_schema_hints() }}\n        inner join sys.types t {{ information_schema_hints() }}\n        on c.user_type_id = t.user_type_id\n        where c.object_id = object_id('{{ 'tempdb..' ~ relation.include(database=false, schema=false) if '#' in relation.identifier else relation }}')\n    )\n\n    select\n        column_name,\n        data_type,\n        character_maximum_length,\n        numeric_precision,\n        numeric_scale\n    from mapping\n    order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.information_schema_hints", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9150279, "supported_languages": null}, "macro.dbt_fabric.fabric__get_columns_in_query": {"name": "fabric__get_columns_in_query", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_fabric.fabric__get_columns_in_query", "macro_sql": "{% macro fabric__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select TOP 0 * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where 0 = 1\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.916028, "supported_languages": null}, "macro.dbt_fabric.fabric__alter_column_type": {"name": "fabric__alter_column_type", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_fabric.fabric__alter_column_type", "macro_sql": "{% macro fabric__alter_column_type(relation, column_name, new_column_type) %}\n\n    {%- set table_name= tmp_relation.include(database=False).include(schema=False)-%}\n    {%- set schema_name = tmp_relation.include(database=False).include(identifier=False) -%}\n\n    {% set generate_tmp_relation_script %}\n        SELECT TRIM(REPLACE(STRING_AGG(ColumnName + ' ', ',-'), '-', CHAR(10)))  AS ColumnDef\n        FROM\n        (\n            SELECT\n            CAST(c.COLUMN_NAME AS VARCHAR) AS ColumnName\n            FROM INFORMATION_SCHEMA.TABLES t\n            JOIN INFORMATION_SCHEMA.COLUMNS c\n                ON t.TABLE_SCHEMA = c.TABLE_SCHEMA\n                AND t.TABLE_NAME = c.TABLE_NAME\n                WHERE t.TABLE_NAME = REPLACE('{{table_name}}','\"','')\n                AND t.TABLE_SCHEMA = REPLACE('{{schema_name}}','\"','')\n                AND c.COLUMN_NAME <> REPLACE('{{column_name}}','\"','')\n        ) T\n    {% endset %}\n\n    {%- set query_result = run_query(generate_tmp_relation_script) -%}\n    {%- set query_result_text = query_result.rows[0][0] -%}\n\n    {% set tempTableName %}\n        {{ relation.schema }}.{{ relation.identifier }}_{{ range(1300, 19000) | random }}\n    {% endset %}\n\n    {% set tempTable %}\n        CREATE TABLE {{tempTableName}}\n        AS SELECT {{query_result_text}}, CAST({{ column_name }} AS {{new_column_type}}) AS {{column_name}} FROM {{ relation.schema }}.{{ relation.identifier }}\n    {% endset %}\n\n    {% call statement('create_temp_table') -%}\n        {{ tempTable }}\n    {%- endcall %}\n\n    {% set dropTable %}\n        DROP TABLE {{ relation.schema }}.{{ relation.identifier }}\n    {% endset %}\n\n    {% call statement('drop_table') -%}\n        {{ dropTable }}\n    {%- endcall %}\n\n    {% set createTable %}\n        CREATE TABLE {{ relation.schema }}.{{ relation.identifier }}\n        AS SELECT * FROM {{tempTableName}}\n    {% endset %}\n\n    {% call statement('create_Table') -%}\n        {{ createTable }}\n    {%- endcall %}\n\n    {% set dropTempTable %}\n        DROP TABLE {{tempTableName}}\n    {% endset %}\n\n    {% call statement('drop_temp_table') -%}\n        {{ dropTempTable }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.919033, "supported_languages": null}, "macro.dbt_fabric.fabric__alter_relation_add_remove_columns": {"name": "fabric__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_fabric.fabric__alter_relation_add_remove_columns", "macro_sql": "{% macro fabric__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  {% call statement('add_drop_columns') -%}\n    {% if add_columns %}\n        alter {{ relation.type }} {{ relation }}\n        add {% for column in add_columns %}\"{{ column.name }}\" {{ column.data_type }}{{ ', ' if not loop.last }}{% endfor %};\n    {% endif %}\n\n    {% if remove_columns %}\n        alter {{ relation.type }} {{ relation }}\n        drop column {% for column in remove_columns %}\"{{ column.name }}\"{{ ',' if not loop.last }}{% endfor %};\n    {% endif %}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9210315, "supported_languages": null}, "macro.dbt_fabric.fabric__create_clustered_columnstore_index": {"name": "fabric__create_clustered_columnstore_index", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.fabric__create_clustered_columnstore_index", "macro_sql": "{% macro fabric__create_clustered_columnstore_index(relation) -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9210315, "supported_languages": null}, "macro.dbt_fabric.drop_xml_indexes": {"name": "drop_xml_indexes", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.drop_xml_indexes", "macro_sql": "{% macro drop_xml_indexes() -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9210315, "supported_languages": null}, "macro.dbt_fabric.drop_spatial_indexes": {"name": "drop_spatial_indexes", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.drop_spatial_indexes", "macro_sql": "{% macro drop_spatial_indexes() -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9210315, "supported_languages": null}, "macro.dbt_fabric.drop_fk_constraints": {"name": "drop_fk_constraints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.drop_fk_constraints", "macro_sql": "{% macro drop_fk_constraints() -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9220312, "supported_languages": null}, "macro.dbt_fabric.drop_pk_constraints": {"name": "drop_pk_constraints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.drop_pk_constraints", "macro_sql": "{% macro drop_pk_constraints() -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9220312, "supported_languages": null}, "macro.dbt_fabric.drop_all_indexes_on_table": {"name": "drop_all_indexes_on_table", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.drop_all_indexes_on_table", "macro_sql": "{% macro drop_all_indexes_on_table() -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9220312, "supported_languages": null}, "macro.dbt_fabric.create_clustered_index": {"name": "create_clustered_index", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.create_clustered_index", "macro_sql": "{% macro create_clustered_index(columns, unique=False) -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9220312, "supported_languages": null}, "macro.dbt_fabric.create_nonclustered_index": {"name": "create_nonclustered_index", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.create_nonclustered_index", "macro_sql": "{% macro create_nonclustered_index(columns, includes=False) %}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9220312, "supported_languages": null}, "macro.dbt_fabric.use_database_hint": {"name": "use_database_hint", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.use_database_hint", "macro_sql": "{% macro use_database_hint() %}\n    {{ return(adapter.dispatch('use_database_hint')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__use_database_hint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9250312, "supported_languages": null}, "macro.dbt_fabric.default__use_database_hint": {"name": "default__use_database_hint", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.default__use_database_hint", "macro_sql": "{% macro default__use_database_hint() %}{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9250312, "supported_languages": null}, "macro.dbt_fabric.fabric__use_database_hint": {"name": "fabric__use_database_hint", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__use_database_hint", "macro_sql": "{% macro fabric__use_database_hint() %}\n    {# USE [{{ relation.database }}]; #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9250312, "supported_languages": null}, "macro.dbt_fabric.information_schema_hints": {"name": "information_schema_hints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.information_schema_hints", "macro_sql": "{% macro information_schema_hints() %}\n    {{ return(adapter.dispatch('information_schema_hints')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.926031, "supported_languages": null}, "macro.dbt_fabric.default__information_schema_hints": {"name": "default__information_schema_hints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.default__information_schema_hints", "macro_sql": "{% macro default__information_schema_hints() %}{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.926031, "supported_languages": null}, "macro.dbt_fabric.fabric__information_schema_hints": {"name": "fabric__information_schema_hints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__information_schema_hints", "macro_sql": "{% macro fabric__information_schema_hints() %}{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.926031, "supported_languages": null}, "macro.dbt_fabric.fabric__get_catalog": {"name": "fabric__get_catalog", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__get_catalog", "macro_sql": "{% macro fabric__get_catalog(information_schemas, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    with\n    principals as (\n        select\n            name as principal_name,\n            principal_id as principal_id\n        from\n            sys.database_principals\n    ),\n\n    schemas as (\n        select\n            name as schema_name,\n            schema_id as schema_id,\n            principal_id as principal_id\n        from\n            sys.schemas\n    ),\n\n    tables as (\n        select\n            name as table_name,\n            schema_id as schema_id,\n            principal_id as principal_id,\n            'BASE TABLE' as table_type\n        from\n            sys.tables\n    ),\n\n    tables_with_metadata as (\n        select\n            table_name,\n            schema_name,\n            coalesce(tables.principal_id, schemas.principal_id) as owner_principal_id,\n            table_type\n        from\n            tables\n        join schemas on tables.schema_id = schemas.schema_id\n    ),\n\n    views as (\n        select\n            name as table_name,\n            schema_id as schema_id,\n            principal_id as principal_id,\n            'VIEW' as table_type\n        from\n            sys.views\n    ),\n\n    views_with_metadata as (\n        select\n            table_name,\n            schema_name,\n            coalesce(views.principal_id, schemas.principal_id) as owner_principal_id,\n            table_type\n        from\n            views\n        join schemas on views.schema_id = schemas.schema_id\n    ),\n\n    tables_and_views as (\n        select\n            table_name,\n            schema_name,\n            principal_name,\n            table_type\n        from\n            tables_with_metadata\n        join principals on tables_with_metadata.owner_principal_id = principals.principal_id\n        union all\n        select\n            table_name,\n            schema_name,\n            principal_name,\n            table_type\n        from\n            views_with_metadata\n        join principals on views_with_metadata.owner_principal_id = principals.principal_id\n    ),\n\n    cols as (\n\n        select\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n            column_name,\n            ordinal_position as column_index,\n            data_type as column_type\n        from INFORMATION_SCHEMA.COLUMNS\n\n    )\n\n    select\n        cols.table_database,\n        tv.schema_name as table_schema,\n        tv.table_name,\n        tv.table_type,\n        null as table_comment,\n        tv.principal_name as table_owner,\n        cols.column_name,\n        cols.column_index,\n        cols.column_type,\n        null as column_comment\n    from tables_and_views tv\n             join cols on tv.schema_name = cols.table_schema and tv.table_name = cols.table_name\n    order by column_index\n\n    {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.927031, "supported_languages": null}, "macro.dbt_fabric.fabric__information_schema_name": {"name": "fabric__information_schema_name", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__information_schema_name", "macro_sql": "{% macro fabric__information_schema_name(database) -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.927031, "supported_languages": null}, "macro.dbt_fabric.fabric__list_schemas": {"name": "fabric__list_schemas", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__list_schemas", "macro_sql": "{% macro fabric__list_schemas(database) %}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) -%}\n    {{ use_database_hint() }}\n    select  name as [schema]\n    from sys.schemas\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.use_database_hint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.927031, "supported_languages": null}, "macro.dbt_fabric.fabric__check_schema_exists": {"name": "fabric__check_schema_exists", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__check_schema_exists", "macro_sql": "{% macro fabric__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n\n    SELECT count(*) as schema_exist FROM sys.schemas WHERE name = '{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9280312, "supported_languages": null}, "macro.dbt_fabric.fabric__list_relations_without_caching": {"name": "fabric__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__list_relations_without_caching", "macro_sql": "{% macro fabric__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      table_catalog as [database],\n      table_name as [name],\n      table_schema as [schema],\n      case when table_type = 'BASE TABLE' then 'table'\n           when table_type = 'VIEW' then 'view'\n           else table_type\n      end as table_type\n\n    from [{{ schema_relation.database }}].INFORMATION_SCHEMA.TABLES\n    where table_schema like '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9290435, "supported_languages": null}, "macro.dbt_fabric.fabric__make_temp_relation": {"name": "fabric__make_temp_relation", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_fabric.fabric__make_temp_relation", "macro_sql": "{% macro fabric__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9330318, "supported_languages": null}, "macro.dbt_fabric.fabric__drop_relation": {"name": "fabric__drop_relation", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_fabric.fabric__drop_relation", "macro_sql": "{% macro fabric__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    {{ fabric__drop_relation_script(relation) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.fabric__drop_relation_script"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9330318, "supported_languages": null}, "macro.dbt_fabric.fabric__drop_relation_script": {"name": "fabric__drop_relation_script", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_fabric.fabric__drop_relation_script", "macro_sql": "{% macro fabric__drop_relation_script(relation) -%}\n\n    {% call statement('find_references', fetch_result=true) %}\n        {{ use_database_hint() }}\n        select\n            sch.name as schema_name,\n            obj.name as view_name\n        from sys.sql_expression_dependencies refs\n        inner join sys.objects obj\n        on refs.referencing_id = obj.object_id\n        inner join sys.schemas sch\n        on obj.schema_id = sch.schema_id\n        where refs.referenced_database_name = '{{ relation.database }}'\n        and refs.referenced_schema_name = '{{ relation.schema }}'\n        and refs.referenced_entity_name = '{{ relation.identifier }}'\n        and refs.referencing_class = 1\n        and obj.type = 'V'\n    {% endcall %}\n    {% set references = load_result('find_references')['data'] %}\n    {% for reference in references -%}\n        -- dropping referenced view {{ reference[0] }}.{{ reference[1] }}\n        {{ fabric__drop_relation_script(relation.incorporate(\n            type=\"view\",\n            path={\"schema\": reference[0], \"identifier\": reference[1]})) }}\n    {% endfor %}\n\n    {% if relation.type == 'view' -%}\n        {% set object_id_type = 'V' %}\n    {% elif relation.type == 'table'%}\n        {% set object_id_type = 'U' %}\n    {%- else -%}\n        {{ exceptions.raise_not_implemented('Invalid relation being dropped: ' ~ relation) }}\n    {% endif %}\n\n    {{ use_database_hint() }}\n    EXEC('DROP {{ relation.type }} IF EXISTS {{ relation.include(database=False) }};');\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.use_database_hint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.935045, "supported_languages": null}, "macro.dbt_fabric.fabric__rename_relation": {"name": "fabric__rename_relation", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_fabric.fabric__rename_relation", "macro_sql": "{% macro fabric__rename_relation(from_relation, to_relation) -%}\n  {% if to_relation.type == 'view' %}\n    {% call statement('get_view_definition', fetch_result=True) %}\n        SELECT m.[definition] AS VIEW_DEFINITION\n        FROM sys.objects o\n        INNER JOIN sys.sql_modules m\n            ON m.[object_id] = o.[object_id]\n        INNER JOIN sys.views v\n            ON o.[object_id] = v.[object_id]\n        INNER JOIN sys.schemas s\n            ON o.schema_id = s.schema_id\n            AND s.schema_id = v.schema_id\n        WHERE s.name = '{{ from_relation.schema }}'\n            AND v.name = '{{ from_relation.identifier }}'\n            AND o.[type] = 'V';\n    {% endcall %}\n\n    {% set view_def_full = load_result('get_view_definition')['data'][0][0] %}\n    {# Jinja does not allow bitwise operators and we need re.I | re.M here. So calculated manually this becomes 10. #}\n    {% set final_view_sql = modules.re.sub(\"create\\s+view\\s+.*?\\s+as\\s+\",\"\",view_def_full, 10) %}\n\n    {% call statement('create_new_view') %}\n        {{ create_view_as(to_relation, final_view_sql) }}\n    {% endcall %}\n    {% call statement('drop_old_view') %}\n        EXEC('DROP VIEW IF EXISTS {{ from_relation.include(database=False) }};');\n    {% endcall %}\n  {% endif %}\n  {% if to_relation.type == 'table' %}\n      {% call statement('rename_relation') %}\n        EXEC('create table {{ to_relation.include(database=False) }} as select * from {{ from_relation.include(database=False) }}');\n      {%- endcall %}\n      {{ fabric__drop_relation(from_relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt_fabric.fabric__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.940028, "supported_languages": null}, "macro.dbt_fabric.fabric__truncate_relation": {"name": "fabric__truncate_relation", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_fabric.fabric__truncate_relation", "macro_sql": "{% macro fabric__truncate_relation(relation) -%}\n\n  {% set tempTableName %}\n    {{ relation.include(database=False).identifier.replace(\"#\", \"\") }}_{{ range(21000, 109000) | random }}\n  {% endset %}\n\n  {% call statement('truncate_relation') -%}\n    CREATE TABLE {{ tempTableName }} AS SELECT * FROM {{ relation }} WHERE 1=2\n    EXEC('DROP TABLE IF EXISTS {{ relation.include(database=False) }};');\n    EXEC('CREATE TABLE {{ relation.include(database=False) }} AS SELECT * FROM {{ tempTableName }};');\n    EXEC('DROP TABLE IF EXISTS {{ tempTableName }};');\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9410276, "supported_languages": null}, "macro.dbt_fabric.fabric__create_schema": {"name": "fabric__create_schema", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt_fabric.fabric__create_schema", "macro_sql": "{% macro fabric__create_schema(relation) -%}\n  {% call statement('create_schema') -%}\n    {{ use_database_hint() }}\n    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ relation.schema }}')\n    BEGIN\n    EXEC('CREATE SCHEMA [{{ relation.schema }}]')\n    END\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.use_database_hint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9430277, "supported_languages": null}, "macro.dbt_fabric.fabric__create_schema_with_authorization": {"name": "fabric__create_schema_with_authorization", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt_fabric.fabric__create_schema_with_authorization", "macro_sql": "{% macro fabric__create_schema_with_authorization(relation, schema_authorization) -%}\n  {% call statement('create_schema') -%}\n    {{ use_database_hint() }}\n    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ relation.schema }}')\n    BEGIN\n    EXEC('CREATE SCHEMA [{{ relation.schema }}] AUTHORIZATION [{{ schema_authorization }}]')\n    END\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.use_database_hint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9430277, "supported_languages": null}, "macro.dbt_fabric.fabric__drop_schema": {"name": "fabric__drop_schema", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt_fabric.fabric__drop_schema", "macro_sql": "{% macro fabric__drop_schema(relation) -%}\n  {%- set relations_in_schema = list_relations_without_caching(relation) %}\n\n  {% for row in relations_in_schema %}\n    {%- set schema_relation = api.Relation.create(database=relation.database,\n                                               schema=relation.schema,\n                                               identifier=row[1],\n                                               type=row[3]\n                                               ) -%}\n    {% do drop_relation(schema_relation) %}\n  {%- endfor %}\n\n  {% call statement('drop_schema') -%}\n      EXEC('DROP SCHEMA IF EXISTS {{ relation.schema }}')\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.list_relations_without_caching", "macro.dbt.drop_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9440277, "supported_languages": null}, "macro.dbt_fabric.fabric__get_incremental_default_sql": {"name": "fabric__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\incremental\\incremental_strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental_strategies.sql", "unique_id": "macro.dbt_fabric.fabric__get_incremental_default_sql", "macro_sql": "{% macro fabric__get_incremental_default_sql(arg_dict) %}\n\n    {% if arg_dict[\"unique_key\"] %}\n        {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n    {% else %}\n        {% do return(get_incremental_append_sql(arg_dict)) %}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9450278, "supported_languages": null}, "macro.dbt_fabric.fabric__get_merge_sql": {"name": "fabric__get_merge_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt_fabric.fabric__get_merge_sql", "macro_sql": "{% macro fabric__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) %}\n  {{ default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9470272, "supported_languages": null}, "macro.dbt_fabric.fabric__get_insert_overwrite_merge_sql": {"name": "fabric__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt_fabric.fabric__get_insert_overwrite_merge_sql", "macro_sql": "{% macro fabric__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) %}\n  {{ default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9470272, "supported_languages": null}, "macro.dbt_fabric.fabric__get_delete_insert_merge_sql": {"name": "fabric__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt_fabric.fabric__get_delete_insert_merge_sql", "macro_sql": "{% macro fabric__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) %}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{ target }}\n            where exists (\n                select null\n                from {{ source }}\n                where\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n\n            )\n            {% if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {% endif %};\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9490275, "supported_languages": null}, "macro.dbt_fabric.fabric__create_table_as": {"name": "fabric__create_table_as", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt_fabric.fabric__create_table_as", "macro_sql": "{% macro fabric__create_table_as(temporary, relation, sql) -%}\n\n   {% set tmp_relation = relation.incorporate(\n   path={\"identifier\": relation.identifier.replace(\"#\", \"\") ~ '_temp_view'},\n   type='view')-%}\n   {% do run_query(fabric__drop_relation_script(tmp_relation)) %}\n   {% do run_query(fabric__drop_relation_script(relation)) %}\n   {{ fabric__create_view_as(tmp_relation, sql) }}\n   EXEC('CREATE TABLE {{ relation.include(database=False) }} AS (SELECT * FROM {{ tmp_relation.include(database=False) }});');\n   {{ fabric__drop_relation_script(tmp_relation) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_fabric.fabric__drop_relation_script", "macro.dbt_fabric.fabric__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9510276, "supported_languages": null}, "macro.dbt_fabric.fabric__create_view_as": {"name": "fabric__create_view_as", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt_fabric.fabric__create_view_as", "macro_sql": "{% macro fabric__create_view_as(relation, sql) -%}\n    {{ fabric__create_view_exec(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__create_view_exec"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9510276, "supported_languages": null}, "macro.dbt_fabric.fabric__create_view_exec": {"name": "fabric__create_view_exec", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt_fabric.fabric__create_view_exec", "macro_sql": "{% macro fabric__create_view_exec(relation, sql) -%}\n    {#- TODO: add contracts here when in dbt 1.5 -#}\n    {%- set temp_view_sql = sql.replace(\"'\", \"''\") -%}\n    {{ use_database_hint() }}\n    EXEC('create view {{ relation.include(database=False) }} as {{ temp_view_sql }};');\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt_fabric.use_database_hint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9520297, "supported_languages": null}, "macro.dbt_fabric.fabric__get_binding_char": {"name": "fabric__get_binding_char", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__get_binding_char", "macro_sql": "{% macro fabric__get_binding_char() %}\n  {{ return('?') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9540324, "supported_languages": null}, "macro.dbt_fabric.fabric__get_batch_size": {"name": "fabric__get_batch_size", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__get_batch_size", "macro_sql": "{% macro fabric__get_batch_size() %}\n  {{ return(400) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9540324, "supported_languages": null}, "macro.dbt_fabric.calc_batch_size": {"name": "calc_batch_size", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_fabric.calc_batch_size", "macro_sql": "{% macro calc_batch_size(num_columns) %}\n    {#\n        SQL Server allows for a max of 2100 parameters in a single statement.\n        Check if the max_batch_size fits with the number of columns, otherwise\n        reduce the batch size so it fits.\n    #}\n    {% set max_batch_size = get_batch_size() %}\n    {% set calculated_batch = (2100 / num_columns)|int %}\n    {% set batch_size = [max_batch_size, calculated_batch] | min %}\n\n    {{ return(batch_size) }}\n{%  endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9550314, "supported_languages": null}, "macro.dbt_fabric.fabric__load_csv_rows": {"name": "fabric__load_csv_rows", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__load_csv_rows", "macro_sql": "{% macro fabric__load_csv_rows(model, agate_table) %}\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set batch_size = calc_batch_size(agate_table.column_names|length) %}\n  {% set bindings = [] %}\n  {% set statements = [] %}\n\n  {{ log(\"Inserting batches of \" ~ batch_size ~ \" records\") }}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv", "macro.dbt_fabric.calc_batch_size", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.957031, "supported_languages": null}, "macro.dbt_fabric.fabric__post_snapshot": {"name": "fabric__post_snapshot", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt_fabric.fabric__post_snapshot", "macro_sql": "{% macro fabric__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9590309, "supported_languages": null}, "macro.dbt_fabric.fabric__create_columns": {"name": "fabric__create_columns", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt_fabric.fabric__create_columns", "macro_sql": "{% macro fabric__create_columns(relation, columns) %}\n  {# default__ macro uses \"add column\"\n     TSQL preferes just \"add\"\n  #}\n\n  {% set columns %}\n    {% for column in columns %}\n      , CAST(NULL AS {{column.data_type}}) AS {{column_name}}\n    {% endfor %}\n  {% endset %}\n\n  {% set tempTableName %}\n    {{ relation.schema }}.{{ relation.identifier }}_{{ range(1300, 19000) | random }}\n  {% endset %}\n\n  {% set tempTable %}\n      CREATE TABLE {{tempTableName}}\n      AS SELECT * {{columns}} FROM {{ relation.schema }}.{{ relation.identifier }}\n  {% endset %}\n\n  {% call statement('create_temp_table') -%}\n      {{ tempTable }}\n  {%- endcall %}\n\n  {% set dropTable %}\n      DROP TABLE {{ relation.schema }}.{{ relation.identifier }}\n  {% endset %}\n\n  {% call statement('drop_table') -%}\n      {{ dropTable }}\n  {%- endcall %}\n\n  {% set createTable %}\n      CREATE TABLE {{ relation.schema }}.{{ relation.identifier }}\n      AS SELECT * FROM {{tempTableName}}\n  {% endset %}\n\n  {% call statement('create_Table') -%}\n      {{ createTable }}\n  {%- endcall %}\n\n  {% set dropTempTable %}\n      DROP TABLE {{tempTableName}}\n  {% endset %}\n\n  {% call statement('drop_temp_table') -%}\n      {{ dropTempTable }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9610307, "supported_languages": null}, "macro.dbt_fabric.fabric__get_true_sql": {"name": "fabric__get_true_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt_fabric.fabric__get_true_sql", "macro_sql": "{% macro fabric__get_true_sql() %}\n  {{ return('1=1') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9610307, "supported_languages": null}, "macro.dbt_fabric.fabric__snapshot_merge_sql": {"name": "fabric__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt_fabric.fabric__snapshot_merge_sql", "macro_sql": "{% macro fabric__snapshot_merge_sql(target, source, insert_cols) %}\n  {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n  {%- set target_table = target.include(database=False) -%}\n  {%- set source_table = source.include(database=False) -%}\n\n  {% set target_columns_list = [] %}\n\n  {% for column in insert_cols %}\n    {% set target_columns_list = target_columns_list.append(\"DBT_INTERNAL_SOURCE.\"+column)  %}\n  {% endfor %}\n\n  {%- set target_columns = target_columns_list | join(', ') -%}\n\n  UPDATE DBT_INTERNAL_DEST\n  SET dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n  FROM {{ target_table }} as DBT_INTERNAL_DEST\n  INNER JOIN {{ source_table }} as DBT_INTERNAL_SOURCE\n  on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n  WHERE DBT_INTERNAL_DEST.dbt_valid_to is null\n  AND DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete');\n\n  INSERT INTO {{ target_table }} ({{ insert_cols_csv }})\n  SELECT {{target_columns}} FROM {{ source_table }} as DBT_INTERNAL_SOURCE\n  WHERE  DBT_INTERNAL_SOURCE.dbt_change_type = 'insert';\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9630582, "supported_languages": null}, "macro.dbt_fabric.fabric__snapshot_hash_arguments": {"name": "fabric__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt_fabric.fabric__snapshot_hash_arguments", "macro_sql": "{% macro fabric__snapshot_hash_arguments(args) %}\n    CONVERT(VARCHAR(32), HashBytes('MD5', {% for arg in args %}\n        coalesce(cast({{ arg }} as varchar(8000)), '') {% if not loop.last %} + '|' + {% endif %}\n    {% endfor %}), 2)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9640312, "supported_languages": null}, "macro.dbt_fabric.fabric__get_test_sql": {"name": "fabric__get_test_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__get_test_sql", "macro_sql": "{% macro fabric__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ \"top (\" ~ limit ~ ')' if limit != none }}\n      {{ fail_calc }} as failures,\n      case when {{ fail_calc }} {{ warn_if }}\n        then 'true' else 'false' end as should_warn,\n      case when {{ fail_calc }} {{ error_if }}\n        then 'true' else 'false' end as should_error\n    from (\n      {{ main_sql }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9640312, "supported_languages": null}, "macro.dbt_fabric.materialization_test_fabric": {"name": "materialization_test_fabric", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt_fabric.materialization_test_fabric", "macro_sql": "{%- materialization test, adapter='fabric' -%}\n\n  {% set relations = [] %}\n\n  {% set identifier = model['alias'] %}\n  {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n  {% set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n\n  {% if old_relation %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% elif not old_relation %}\n    {% do adapter.create_schema(target_relation) %}\n  {% endif %}\n\n  {% call statement(auto_begin=True) %}\n      {{ create_table_as(False, target_relation, sql) }}\n  {% endcall %}\n\n  {% set main_sql %}\n      select *\n      from {{ target_relation }}\n  {% endset %}\n\n  {{ adapter.commit() }}\n\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {% if should_store_failures() %}\n    {% do relations.append(target_relation) %}\n  {% elif not should_store_failures() %}\n    {% do adapter.drop_relation(target_relation) %}\n  {% endif %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql", "macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.969033, "supported_languages": ["sql"]}, "macro.dbt_fabric.fabric__any_value": {"name": "fabric__any_value", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt_fabric.fabric__any_value", "macro_sql": "{% macro fabric__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.969033, "supported_languages": null}, "macro.dbt_fabric.fabric__array_construct": {"name": "fabric__array_construct", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt_fabric.fabric__array_construct", "macro_sql": "{% macro fabric__array_construct(inputs, data_type) -%}\n    JSON_ARRAY({{ inputs|join(' , ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9700322, "supported_languages": null}, "macro.dbt_fabric.fabric__cast_bool_to_text": {"name": "fabric__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt_fabric.fabric__cast_bool_to_text", "macro_sql": "{% macro fabric__cast_bool_to_text(field) %}\n    case {{ field }}\n        when 1 then 'true'\n        when 0 then 'false'\n        else null\n    end\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9700322, "supported_languages": null}, "macro.dbt_fabric.fabric__concat": {"name": "fabric__concat", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt_fabric.fabric__concat", "macro_sql": "{% macro fabric__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9710288, "supported_languages": null}, "macro.dbt_fabric.fabric__dateadd": {"name": "fabric__dateadd", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt_fabric.fabric__dateadd", "macro_sql": "{% macro fabric__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        cast({{ from_date_or_timestamp }} as datetime2(6))\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9710288, "supported_languages": null}, "macro.dbt_fabric.fabric__date_trunc": {"name": "fabric__date_trunc", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt_fabric.fabric__date_trunc", "macro_sql": "{% macro fabric__date_trunc(datepart, date) %}\n    CAST(DATEADD({{datepart}}, DATEDIFF({{datepart}}, 0, {{date}}), 0) AS DATE)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9710288, "supported_languages": null}, "macro.dbt_fabric.fabric__hash": {"name": "fabric__hash", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt_fabric.fabric__hash", "macro_sql": "{% macro fabric__hash(field) %}\n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), {{field}}), '')), 2))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9720275, "supported_languages": null}, "macro.dbt_fabric.fabric__last_day": {"name": "fabric__last_day", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt_fabric.fabric__last_day", "macro_sql": "{% macro fabric__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    \tCAST(DATEADD(QUARTER, DATEDIFF(QUARTER, 0, {{ date }}) + 1, -1) AS DATE)\n    {%- elif datepart == 'month' -%}\n        EOMONTH ( {{ date }})\n    {%- elif datepart == 'year' -%}\n        CAST(DATEADD(YEAR, DATEDIFF(year, 0, {{ date }}) + 1, -1) AS DATE)\n    {%- else -%}\n        {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9730275, "supported_languages": null}, "macro.dbt_fabric.fabric__length": {"name": "fabric__length", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt_fabric.fabric__length", "macro_sql": "{% macro fabric__length(expression) %}\n\n    len( {{ expression }} )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9730275, "supported_languages": null}, "macro.dbt_fabric.fabric__listagg": {"name": "fabric__listagg", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt_fabric.fabric__listagg", "macro_sql": "{% macro fabric__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg({{ measure }}, {{ delimiter_text }})\n        {%- if order_by_clause != None %}\n            within group ({{ order_by_clause }})\n        {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9730275, "supported_languages": null}, "macro.dbt_fabric.fabric__position": {"name": "fabric__position", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt_fabric.fabric__position", "macro_sql": "{% macro fabric__position(substring_text, string_text) %}\n\n    CHARINDEX(\n        {{ substring_text }},\n        {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9740279, "supported_languages": null}, "macro.dbt_fabric.fabric__safe_cast": {"name": "fabric__safe_cast", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt_fabric.fabric__safe_cast", "macro_sql": "{% macro fabric__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9740279, "supported_languages": null}, "macro.dbt_fabric.fabric__split_part": {"name": "fabric__split_part", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt_fabric.fabric__split_part", "macro_sql": "{% macro fabric__split_part(string_text, delimiter_text, part_number) %}\n\n    LTRIM(CAST(('<X>'+REPLACE({{ string_text }},{{ delimiter_text }} ,'</X><X>')+'</X>') AS XML).value('(/X)[{{ part_number }}]', 'VARCHAR(128)'))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9750278, "supported_languages": null}, "macro.dbt_fabric.fabric__current_timestamp": {"name": "fabric__current_timestamp", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_fabric.fabric__current_timestamp", "macro_sql": "{% macro fabric__current_timestamp() -%}\n  CAST(SYSDATETIME() AS DATETIME2(6))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9750278, "supported_languages": null}, "macro.dbt_fabric.fabric__snapshot_string_as_time": {"name": "fabric__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_fabric.fabric__snapshot_string_as_time", "macro_sql": "{% macro fabric__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"CONVERT(DATETIME2(6), '\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9750278, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9780278, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9780278, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9780278, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.979028, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.979028, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9800277, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9800277, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9800277, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9810278, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9810278, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9820278, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9820278, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9830277, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9840276, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9840276, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9850466, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9880474, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.991032, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.991032, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9920301, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9920301, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9930317, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9940434, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9950314, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9950314, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9970317, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9970317, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.998046, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9990597, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9990597, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307656.9990597, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0000312, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0030336, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0040326, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0040326, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0040326, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0050313, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0050313, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.006043, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.006043, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0070312, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0070312, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0080316, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.009031, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.009031, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.009031, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.010032, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0110314, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0150313, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0160391, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0160391, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0160391, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0170567, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0180316, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0180316, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0190349, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0200315, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0200315, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0200315, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0210323, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0210323, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0220315, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0230503, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0230503, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0240312, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0240312, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0250313, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0250313, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0250313, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_fabric.fabric__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.026033, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0270326, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0270326, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0270326, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.028035, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.028035, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.028035, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.028035, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0310314, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0330312, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0350277, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.036031, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0390313, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0400314, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0400314, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.041033, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0420547, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0420547, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0430312, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0440311, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0440311, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0450313, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0450313, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.046032, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0470314, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0470314, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0480318, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0480318, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0490315, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0510316, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0510316, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0520303, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0520303, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0530345, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0550303, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0560315, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.058031, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.058031, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.060031, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.068031, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0700352, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0780315, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0810313, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0810313, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0830448, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0840604, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0850642, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0930316, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0950313, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.0980313, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.099034, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.101065, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.101065, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1020303, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1030324, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1040297, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1040297, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1040297, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1050322, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1060288, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1060288, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1070325, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1080325, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1080325, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.109032, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1100516, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1140316, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1160314, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1170313, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1170313, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.118032, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1190317, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1200385, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1200385, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1250277, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.131027, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1330276, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1330276, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1340277, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1340277, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.135043, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.136039, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.136039, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1370337, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1370337, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1380336, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1390326, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1410315, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1460316, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1520293, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.153033, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.153033, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.154034, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.154034, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.154034, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.155032, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1560311, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1570318, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1570318, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1580315, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.167031, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1680312, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1690354, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.175032, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.175032, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.175032, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1770318, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1770318, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1770318, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1800382, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1820316, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1830316, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1840317, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1890318, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1890318, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1900318, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1920319, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1920319, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.193032, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1940317, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.195032, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.196033, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.196033, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.196033, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.197032, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.197032, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.197032, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1980526, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1980526, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1990674, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.1990674, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2000318, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2000318, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2010322, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2010322, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.202031, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.203033, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2050319, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2050319, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2050319, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2050319, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2060335, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2060335, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2060335, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2070317, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2070317, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2070317, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2080317, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2080317, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2080317, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.209044, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.209044, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.209044, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2100575, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2100575, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2110617, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2110617, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.212032, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.212032, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.212032, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2130592, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2130592, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2130592, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2140317, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2140317, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2150319, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2150319, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2150319, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2160416, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2160416, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2170303, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2190344, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2200537, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2200537, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2210329, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2210329, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2220318, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2220318, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2230318, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2230318, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2230318, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2240317, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2240317, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2250316, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2250316, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.226033, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.226033, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2270324, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2280316, "supported_languages": null}, "macro.automate_dv.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\helpers\\dateadd.sql", "original_file_path": "macros\\internal\\helpers\\dateadd.sql", "unique_id": "macro.automate_dv.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\r\n    {{ return(adapter.dispatch('dateadd', 'automate_dv')(datepart=datepart,\r\n                                                     interval=interval,\r\n                                                     from_date_or_timestamp=from_date_or_timestamp)) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.fabric__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2280316, "supported_languages": null}, "macro.automate_dv.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\helpers\\dateadd.sql", "original_file_path": "macros\\internal\\helpers\\dateadd.sql", "unique_id": "macro.automate_dv.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\r\n\r\n    {{ dateadd(datepart, interval, from_date_or_timestamp) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2290325, "supported_languages": null}, "macro.automate_dv.fabric__dateadd": {"name": "fabric__dateadd", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\helpers\\dateadd.sql", "original_file_path": "macros\\internal\\helpers\\dateadd.sql", "unique_id": "macro.automate_dv.fabric__dateadd", "macro_sql": "{% macro fabric__dateadd(datepart, interval, from_date_or_timestamp) %}\r\n\r\n    dateadd(\r\n        millisecond,\r\n        86399999,\r\n        CAST({{ from_date_or_timestamp }} AS DATETIME2)\r\n    )\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2290325, "supported_languages": null}, "macro.automate_dv.is_list": {"name": "is_list", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\helpers\\is_checks.sql", "original_file_path": "macros\\internal\\helpers\\is_checks.sql", "unique_id": "macro.automate_dv.is_list", "macro_sql": "\r\n\r\n{%- macro is_list(obj, empty_is_false=false) -%}\r\n\r\n    {%- if obj is iterable and obj is not string and obj is not mapping -%}\r\n        {%- if obj is none and obj is undefined and not obj and empty_is_false -%}\r\n            {%- do return(false) -%}\r\n        {%- endif -%}\r\n\r\n        {%- do return(true) -%}\r\n    {%- else -%}\r\n        {%- do return(false) -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.231032, "supported_languages": null}, "macro.automate_dv.is_nothing": {"name": "is_nothing", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\helpers\\is_checks.sql", "original_file_path": "macros\\internal\\helpers\\is_checks.sql", "unique_id": "macro.automate_dv.is_nothing", "macro_sql": "{%- macro is_nothing(obj) -%}\r\n\r\n    {%- if obj is none or obj is undefined or not obj or automate_dv.is_list(obj, empty_is_false=true) -%}\r\n        {%- do return(true) -%}\r\n    {%- else -%}\r\n        {%- do return(false) -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.231032, "supported_languages": null}, "macro.automate_dv.is_something": {"name": "is_something", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\helpers\\is_checks.sql", "original_file_path": "macros\\internal\\helpers\\is_checks.sql", "unique_id": "macro.automate_dv.is_something", "macro_sql": "{%- macro is_something(obj) -%}\r\n\r\n    {%- if obj is not none and obj is defined and obj -%}\r\n        {#- if an empty list, do not consider the object something -#}\r\n        {% if automate_dv.is_list(empty_is_false=true) %}\r\n            {%- do return(true) -%}\r\n        {%- else -%}\r\n            {%- do return(false) -%}\r\n        {%- endif -%}\r\n    {%- else -%}\r\n        {%- do return(false) -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.232032, "supported_languages": null}, "macro.automate_dv.is_expression": {"name": "is_expression", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\helpers\\is_checks.sql", "original_file_path": "macros\\internal\\helpers\\is_checks.sql", "unique_id": "macro.automate_dv.is_expression", "macro_sql": "{%- macro is_expression(obj) -%}\r\n\r\n    {%- if obj is string -%}\r\n        {%- if (obj | first == \"'\" and obj | last == \"'\") or (\"(\" in obj and \")\" in obj) or \"::\" in obj -%}\r\n            {%- do return(true) -%}\r\n        {%- else -%}\r\n            {%- do return(false) -%}\r\n        {%- endif -%}\r\n    {%- else -%}\r\n        {%- do return(false) -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2330287, "supported_languages": null}, "macro.automate_dv.prepend_generated_by": {"name": "prepend_generated_by", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\helpers\\prepend_generated_by.sql", "original_file_path": "macros\\internal\\helpers\\prepend_generated_by.sql", "unique_id": "macro.automate_dv.prepend_generated_by", "macro_sql": "\r\n\r\n{%- macro prepend_generated_by() -%}\r\n-- Generated by AutomateDV (formerly known as dbtvault)\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2340322, "supported_languages": null}, "macro.automate_dv.log_relation_sources": {"name": "log_relation_sources", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\helpers\\logging\\log_relation_sources.sql", "original_file_path": "macros\\internal\\helpers\\logging\\log_relation_sources.sql", "unique_id": "macro.automate_dv.log_relation_sources", "macro_sql": "{% macro log_relation_sources(relation, source_count) %}\r\n    {{ return(adapter.dispatch('log_relation_sources', 'automate_dv')(relation=relation, source_count=source_count)) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.default__log_relation_sources"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.235032, "supported_languages": null}, "macro.automate_dv.default__log_relation_sources": {"name": "default__log_relation_sources", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\helpers\\logging\\log_relation_sources.sql", "original_file_path": "macros\\internal\\helpers\\logging\\log_relation_sources.sql", "unique_id": "macro.automate_dv.default__log_relation_sources", "macro_sql": "{% macro default__log_relation_sources(relation, source_count) %}\r\n\r\n    {%- if 'docs' not in invocation_args_dict['rpc_method'] and execute -%}\r\n\r\n        {%- do dbt_utils.log_info('Loading {} from {} source(s)'.format(\"{}.{}.{}\".format(relation.database, relation.schema, relation.identifier),\r\n                                                                        source_count)) -%}\r\n    {%- endif -%}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2360392, "supported_languages": null}, "macro.automate_dv.databricks__log_relation_sources": {"name": "databricks__log_relation_sources", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\helpers\\logging\\log_relation_sources.sql", "original_file_path": "macros\\internal\\helpers\\logging\\log_relation_sources.sql", "unique_id": "macro.automate_dv.databricks__log_relation_sources", "macro_sql": "{% macro databricks__log_relation_sources(relation, source_count) %}\r\n\r\n    {%- if 'docs' not in invocation_args_dict['rpc_method'] and execute -%}\r\n\r\n        {%- do dbt_utils.log_info('Loading {} from {} source(s)'.format(\"{}.{}\".format(relation.schema, relation.identifier),\r\n                                                                        source_count)) -%}\r\n    {%- endif -%}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.237059, "supported_languages": null}, "macro.automate_dv.extract_column_names": {"name": "extract_column_names", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\helpers\\stage_processing_macros\\extract_column_names.sql", "original_file_path": "macros\\internal\\helpers\\stage_processing_macros\\extract_column_names.sql", "unique_id": "macro.automate_dv.extract_column_names", "macro_sql": "\r\n\r\n{%- macro extract_column_names(columns_dict=none) -%}\r\n\r\n    {%- set extracted_column_names = [] -%}\r\n\r\n    {%- if columns_dict is mapping -%}\r\n        {%- for key, value in columns_dict.items() -%}\r\n            {%- do extracted_column_names.append(key) -%}\r\n        {%- endfor -%}\r\n\r\n        {%- do return(extracted_column_names) -%}\r\n    {%- else -%}\r\n        {%- do return([]) -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2380323, "supported_languages": null}, "macro.automate_dv.extract_null_column_names": {"name": "extract_null_column_names", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\helpers\\stage_processing_macros\\extract_null_column_names.sql", "original_file_path": "macros\\internal\\helpers\\stage_processing_macros\\extract_null_column_names.sql", "unique_id": "macro.automate_dv.extract_null_column_names", "macro_sql": "\r\n\r\n{%- macro extract_null_column_names(columns_dict=none) -%}\r\n\r\n    {%- set extracted_column_names = [] -%}\r\n\r\n    {%- if columns_dict is mapping -%}\r\n        {%- for key, value in columns_dict.items() -%}\r\n            {%- if automate_dv.is_something(value) -%}\r\n                {% if automate_dv.is_list(value) %}\r\n                    {% for col_name in value %}\r\n                        {%- do extracted_column_names.append(col_name) -%}\r\n                        {%- do extracted_column_names.append(col_name ~ \"_ORIGINAL\") -%}\r\n                    {% endfor %}\r\n                {%  else %}\r\n                    {%- do extracted_column_names.append(value) -%}\r\n                    {%- do extracted_column_names.append(value ~ \"_ORIGINAL\") -%}\r\n                {% endif %}\r\n            {%- endif -%}\r\n        {%- endfor -%}\r\n\r\n        {%- do return(extracted_column_names) -%}\r\n    {%- else -%}\r\n        {%- do return([]) -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_something", "macro.automate_dv.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2400336, "supported_languages": null}, "macro.automate_dv.print_list": {"name": "print_list", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\helpers\\stage_processing_macros\\print_list.sql", "original_file_path": "macros\\internal\\helpers\\stage_processing_macros\\print_list.sql", "unique_id": "macro.automate_dv.print_list", "macro_sql": "\r\n\r\n{%- macro print_list(list_to_print=none, indent=4, columns_to_escape=none) -%}\r\n\r\n    {%- for col_name in list_to_print -%}\r\n        {%- if col_name | lower in columns_to_escape | map('lower') | list -%}\r\n            {{- automate_dv.escape_column_name(col_name) | indent(indent) -}}{{ \",\\n    \" if not loop.last }}\r\n        {%- else -%}\r\n            {{- col_name | indent(indent) -}}{{ \",\\n    \" if not loop.last }}\r\n        {%- endif -%}\r\n    {%- endfor -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2410316, "supported_languages": null}, "macro.automate_dv.process_columns_to_escape": {"name": "process_columns_to_escape", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\helpers\\stage_processing_macros\\process_columns_to_escape.sql", "original_file_path": "macros\\internal\\helpers\\stage_processing_macros\\process_columns_to_escape.sql", "unique_id": "macro.automate_dv.process_columns_to_escape", "macro_sql": "\r\n\r\n{%- macro process_columns_to_escape(derived_columns_list=none) -%}\r\n\r\n    {%- if derived_columns_list -%}\r\n\r\n        {%- set ns = namespace(columns_to_escape=[]) -%}\r\n        {%- set escape_char_left, escape_char_right = automate_dv.get_escape_characters() -%}\r\n        {%- set quote_pattern = '\\{}([a-zA-Z\\s]+)\\{}'.format(escape_char_left, escape_char_right) -%}\r\n        {%- set re = modules.re -%}\r\n\r\n        {%- for col_name, col_def in derived_columns_list.items() -%}\r\n\r\n            {%- if col_def is mapping -%}\r\n                {%- if col_def['escape'] == true -%}\r\n                    {%- if automate_dv.is_list(col_def['source_column']) -%}\r\n                        {%- set ns.columns_to_escape = ns.columns_to_escape + col_def['source_column'] -%}\r\n                    {%- else -%}\r\n                        {%- set ns.columns_to_escape = ns.columns_to_escape + [col_def['source_column']] -%}\r\n                    {%- endif -%}\r\n                {%- endif -%}\r\n            {%- elif col_def is string -%}\r\n\r\n                {#- Find a quoted string in the column definition so that we can escape it everywhere else -#}\r\n                {% set is_match = re.findall(quote_pattern, col_def, re.IGNORECASE) %}\r\n\r\n                {%- if is_match -%}\r\n                    {%- set ns.columns_to_escape = ns.columns_to_escape + is_match -%}\r\n                {%- endif -%}\r\n            {%- endif -%}\r\n        {%- endfor -%}\r\n\r\n        {%- do return(ns.columns_to_escape | unique | list) -%}\r\n    {%- else -%}\r\n        {%- do return([]) -%}\r\n    {%- endif -%}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.get_escape_characters", "macro.automate_dv.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2450316, "supported_languages": null}, "macro.automate_dv.process_columns_to_select": {"name": "process_columns_to_select", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\helpers\\stage_processing_macros\\process_columns_to_select.sql", "original_file_path": "macros\\internal\\helpers\\stage_processing_macros\\process_columns_to_select.sql", "unique_id": "macro.automate_dv.process_columns_to_select", "macro_sql": "\r\n\r\n{%- macro process_columns_to_select(columns_list=none, exclude_columns_list=none) -%}\r\n\r\n    {% set columns_list = columns_list | list %}\r\n    {% set exclude_columns_list = exclude_columns_list | list %}\r\n\r\n    {% set columns_to_select = [] %}\r\n\r\n    {% if not automate_dv.is_list(columns_list) or not automate_dv.is_list(exclude_columns_list)  %}\r\n\r\n        {{- exceptions.raise_compiler_error(\"One or both arguments are not of list type.\") -}}\r\n\r\n    {%- endif -%}\r\n\r\n    {%- if automate_dv.is_something(columns_list) and automate_dv.is_something(exclude_columns_list) -%}\r\n\r\n        {%- for col in columns_list -%}\r\n\r\n            {%- if (col | upper) not in (exclude_columns_list | map('upper') | list) -%}\r\n                {%- do columns_to_select.append(col) -%}\r\n            {%- endif -%}\r\n\r\n        {%- endfor -%}\r\n\r\n    {%- endif -%}\r\n\r\n    {%- do return(columns_to_select) -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_list", "macro.automate_dv.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.246034, "supported_languages": null}, "macro.automate_dv.process_hash_column_excludes": {"name": "process_hash_column_excludes", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\helpers\\stage_processing_macros\\process_hash_column_excludes.sql", "original_file_path": "macros\\internal\\helpers\\stage_processing_macros\\process_hash_column_excludes.sql", "unique_id": "macro.automate_dv.process_hash_column_excludes", "macro_sql": "\r\n\r\n{%- macro process_hash_column_excludes(hash_columns=none, source_columns=none) -%}\r\n\r\n    {%- set processed_hash_columns = {} -%}\r\n\r\n    {%- for col, col_mapping in hash_columns.items() -%}\r\n\r\n        {%- if col_mapping is mapping -%}\r\n            {%- if col_mapping.exclude_columns -%}\r\n\r\n                {%- if col_mapping.columns -%}\r\n\r\n                    {%- set columns_to_hash = automate_dv.process_columns_to_select(source_columns, col_mapping.columns) -%}\r\n\r\n                    {%- do hash_columns[col].pop('exclude_columns') -%}\r\n                    {%- do hash_columns[col].update({'columns': columns_to_hash}) -%}\r\n\r\n                    {%- do processed_hash_columns.update({col: hash_columns[col]}) -%}\r\n                {%- else -%}\r\n\r\n                    {%- do hash_columns[col].pop('exclude_columns') -%}\r\n                    {%- do hash_columns[col].update({'columns': source_columns}) -%}\r\n\r\n                    {%- do processed_hash_columns.update({col: hash_columns[col]}) -%}\r\n                {%- endif -%}\r\n            {%- else -%}\r\n                {%- do processed_hash_columns.update({col: col_mapping}) -%}\r\n            {%- endif -%}\r\n        {%- else -%}\r\n            {%- do processed_hash_columns.update({col: col_mapping}) -%}\r\n        {%- endif -%}\r\n\r\n    {%- endfor -%}\r\n\r\n    {%- do return(processed_hash_columns) -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.process_columns_to_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2510355, "supported_languages": null}, "macro.automate_dv.alias": {"name": "alias", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\alias.sql", "original_file_path": "macros\\internal\\metadata_processing\\alias.sql", "unique_id": "macro.automate_dv.alias", "macro_sql": "\r\n\r\n{%- macro alias(alias_config=none, prefix=none) -%}\r\n\r\n    {{- adapter.dispatch('alias', 'automate_dv')(alias_config=alias_config, prefix=prefix) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__alias"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2550354, "supported_languages": null}, "macro.automate_dv.default__alias": {"name": "default__alias", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\alias.sql", "original_file_path": "macros\\internal\\metadata_processing\\alias.sql", "unique_id": "macro.automate_dv.default__alias", "macro_sql": "\r\n\r\n{%- macro default__alias(alias_config=none, prefix=none) -%}\r\n\r\n{%- if alias_config is defined and alias_config is not none and alias_config -%}\r\n\r\n    {%- if alias_config is mapping -%}\r\n\r\n        {%- if alias_config['source_column'] and alias_config['alias'] -%}\r\n\r\n            {%- if prefix -%}\r\n                {{prefix}}.{{ alias_config['source_column'] }} AS {{ alias_config['alias'] }}\r\n            {%- else -%}\r\n                {{ alias_config['source_column'] }} AS {{ alias_config['alias'] }}\r\n            {%- endif -%}\r\n\r\n        {%- endif -%}\r\n\r\n    {%- else -%}\r\n\r\n        {%- if prefix -%}\r\n\r\n        {{- automate_dv.prefix([alias_config], prefix) -}}\r\n\r\n        {%- else -%}\r\n\r\n        {{ alias_config }}\r\n\r\n        {%- endif -%}\r\n\r\n    {%- endif -%}\r\n\r\n{%- else -%}\r\n\r\n    {%- if execute -%}\r\n\r\n        {{ exceptions.raise_compiler_error(\"Invalid alias configuration:\\nexpected format: {source_column: 'column', alias: 'column_alias'}\\ngot: \" ~ alias_config) }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endif -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2580323, "supported_languages": null}, "macro.automate_dv.alias_all": {"name": "alias_all", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\alias_all.sql", "original_file_path": "macros\\internal\\metadata_processing\\alias_all.sql", "unique_id": "macro.automate_dv.alias_all", "macro_sql": "\r\n\r\n{%- macro alias_all(columns=none, prefix=none) -%}\r\n\r\n    {{- adapter.dispatch('alias_all', 'automate_dv')(columns=columns, prefix=prefix) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2600327, "supported_languages": null}, "macro.automate_dv.default__alias_all": {"name": "default__alias_all", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\alias_all.sql", "original_file_path": "macros\\internal\\metadata_processing\\alias_all.sql", "unique_id": "macro.automate_dv.default__alias_all", "macro_sql": "\r\n\r\n{%- macro default__alias_all(columns, prefix) -%}\r\n\r\n{%- if automate_dv.is_list(columns) -%}\r\n\r\n    {%- set processed_columns = [] -%}\r\n\r\n    {%- for col in columns -%}\r\n        {%- if col | lower not in processed_columns | map('lower') | list -%}\r\n\r\n            {{ automate_dv.alias(alias_config=col, prefix=prefix) }}\r\n            {%- if not loop.last -%} , {% endif -%}\r\n\r\n            {%- if col is mapping -%}\r\n                {%- if col['source_column'] | lower and col['alias'] | lower -%}\r\n                    {%- do processed_columns.append(col['source_column']) -%}\r\n                {% endif -%}\r\n            {%- else -%}\r\n                {%- do processed_columns.append(col) -%}\r\n            {% endif -%}\r\n        {% endif -%}\r\n    {%- endfor -%}\r\n\r\n{%- elif columns is string -%}\r\n\r\n{{ automate_dv.alias(alias_config=columns, prefix=prefix) }}\r\n\r\n{%- else -%}\r\n\r\n    {%- if execute -%}\r\n        {{ exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list or a string.\") }}\r\n    {%- endif %}\r\n\r\n{%- endif %}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_list", "macro.automate_dv.alias"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.264033, "supported_languages": null}, "macro.automate_dv.as_constant": {"name": "as_constant", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\as_constant.sql", "original_file_path": "macros\\internal\\metadata_processing\\as_constant.sql", "unique_id": "macro.automate_dv.as_constant", "macro_sql": "\r\n\r\n{%- macro as_constant(column_str=none) -%}\r\n\r\n    {{- adapter.dispatch('as_constant', 'automate_dv')(column_str=column_str) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__as_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.266031, "supported_languages": null}, "macro.automate_dv.default__as_constant": {"name": "default__as_constant", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\as_constant.sql", "original_file_path": "macros\\internal\\metadata_processing\\as_constant.sql", "unique_id": "macro.automate_dv.default__as_constant", "macro_sql": "\r\n\r\n{%- macro default__as_constant(column_str) -%}\r\n\r\n    {%- if column_str is not none and column_str is string and column_str -%}\r\n\r\n        {%- if column_str | first == \"!\" -%}\r\n\r\n            {{- return(\"'\" ~ column_str[1:] ~ \"'\") -}}\r\n\r\n        {%- else -%}\r\n\r\n            {{- return(column_str) -}}\r\n\r\n        {%- endif -%}\r\n    {%- else -%}\r\n        {%- if execute -%}\r\n            {{ exceptions.raise_compiler_error(\"Invalid columns_str object provided. Must be a string and not null.\") }}\r\n        {%- endif %}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2670312, "supported_languages": null}, "macro.automate_dv.check_required_parameters": {"name": "check_required_parameters", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\check_required_parameters.sql", "original_file_path": "macros\\internal\\metadata_processing\\check_required_parameters.sql", "unique_id": "macro.automate_dv.check_required_parameters", "macro_sql": "\r\n\r\n{%- macro check_required_parameters() -%}\r\n\r\n    {%- set ns = namespace(missing_parameters=[]) -%}\r\n\r\n    {%- if kwargs is not none -%}\r\n\r\n        {%- for k, v in kwargs.items() %}\r\n            {%- do ns.missing_parameters.append(k) if v is none -%}\r\n        {%- endfor -%}\r\n\r\n        {%- if ns.missing_parameters -%}\r\n            {{- exceptions.raise_compiler_error(\"Required parameter(s) missing or none in '{}': {}\".format(this, ns.missing_parameters | join(\", \"))) -}}\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.271039, "supported_languages": null}, "macro.automate_dv.concat_ws": {"name": "concat_ws", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\concat_ws.sql", "original_file_path": "macros\\internal\\metadata_processing\\concat_ws.sql", "unique_id": "macro.automate_dv.concat_ws", "macro_sql": "\r\n\r\n{%- macro concat_ws(string_list, separator=\"||\") -%}\r\n\r\n    {{- adapter.dispatch('concat_ws', 'automate_dv')(string_list=string_list, separator=separator) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.fabric__concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2730331, "supported_languages": null}, "macro.automate_dv.default__concat_ws": {"name": "default__concat_ws", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\concat_ws.sql", "original_file_path": "macros\\internal\\metadata_processing\\concat_ws.sql", "unique_id": "macro.automate_dv.default__concat_ws", "macro_sql": "\r\n\r\n{%- macro default__concat_ws(string_list, separator=\"||\") -%}\r\n\r\nCONCAT(\r\n{%- for str in string_list %}\r\n    {{ str }}\r\n{%- if not loop.last %}, '{{ separator }}', {%- endif -%}\r\n{%- endfor %}\r\n)\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2740335, "supported_languages": null}, "macro.automate_dv.bigquery__concat_ws": {"name": "bigquery__concat_ws", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\concat_ws.sql", "original_file_path": "macros\\internal\\metadata_processing\\concat_ws.sql", "unique_id": "macro.automate_dv.bigquery__concat_ws", "macro_sql": "{%- macro bigquery__concat_ws(string_list, separator=\"||\") -%}\r\n\r\n    {{ automate_dv.default__concat_ws(string_list=string_list, separator=separator) }}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.default__concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2750328, "supported_languages": null}, "macro.automate_dv.fabric__concat_ws": {"name": "fabric__concat_ws", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\concat_ws.sql", "original_file_path": "macros\\internal\\metadata_processing\\concat_ws.sql", "unique_id": "macro.automate_dv.fabric__concat_ws", "macro_sql": "{%- macro fabric__concat_ws(string_list, separator=\"||\") -%}\r\n\r\n    {{ automate_dv.default__concat_ws(string_list=string_list, separator=separator) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2750328, "supported_languages": null}, "macro.automate_dv.escape_column_name": {"name": "escape_column_name", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\escape_column_name.sql", "original_file_path": "macros\\internal\\metadata_processing\\escape_column_name.sql", "unique_id": "macro.automate_dv.escape_column_name", "macro_sql": "\r\n\r\n{%- macro escape_column_name(column) -%}\r\n\r\n    {{- adapter.dispatch('escape_column_name', 'automate_dv')(column=column) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2760324, "supported_languages": null}, "macro.automate_dv.default__escape_column_name": {"name": "default__escape_column_name", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\escape_column_name.sql", "original_file_path": "macros\\internal\\metadata_processing\\escape_column_name.sql", "unique_id": "macro.automate_dv.default__escape_column_name", "macro_sql": "\r\n\r\n{%- macro default__escape_column_name(column) -%}\r\n\r\n    {# Do not escape a constant (single quoted) value #}\r\n    {%- if column | first == \"'\" and column | last == \"'\" -%}\r\n        {%- set escaped_column_name = column -%}\r\n    {%- else -%}\r\n        {%- set escape_char_left, escape_char_right = automate_dv.get_escape_characters() -%}\r\n\r\n        {%- set escaped_column_name = escape_char_left ~ column | replace(escape_char_left, '') | replace(escape_char_right, '') | trim ~ escape_char_right -%}\r\n    {%- endif -%}\r\n\r\n    {%- do return(escaped_column_name) -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.get_escape_characters"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.278034, "supported_languages": null}, "macro.automate_dv.escape_column_names": {"name": "escape_column_names", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "original_file_path": "macros\\internal\\metadata_processing\\escape_column_names.sql", "unique_id": "macro.automate_dv.escape_column_names", "macro_sql": "\r\n\r\n{%- macro escape_column_names(columns=none) -%}\r\n\r\n    {%- if automate_dv.is_list(columns) -%}\r\n        {%- set columns = automate_dv.expand_column_list(columns) -%}\r\n    {%- endif -%}\r\n\r\n    {%- if automate_dv.is_something(columns) -%}\r\n\r\n        {%- set col_string = '' -%}\r\n        {%- set col_list = [] -%}\r\n        {%- set col_mapping = {} -%}\r\n\r\n        {%- if columns is string -%}\r\n\r\n            {%- set col_string = automate_dv.escape_column_name(columns) -%}\r\n\r\n        {%- elif automate_dv.is_list(columns) -%}\r\n\r\n            {%- for col in columns -%}\r\n\r\n                {%- if col is string -%}\r\n\r\n                    {%- set escaped_col = automate_dv.escape_column_name(col) -%}\r\n\r\n                    {%- do col_list.append(escaped_col) -%}\r\n\r\n                {%- else -%}\r\n\r\n                    {%- if execute -%}\r\n                        {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string.\") -}}\r\n                    {%- endif -%}\r\n\r\n                {%- endif -%}\r\n\r\n            {%- endfor -%}\r\n\r\n        {%- elif columns is mapping -%}\r\n\r\n            {%- if columns['source_column'] and columns['alias'] -%}\r\n\r\n                {%- set escaped_source_col = automate_dv.escape_column_name(columns['source_column']) -%}\r\n                {%- set escaped_alias_col = automate_dv.escape_column_name(columns['alias']) -%}\r\n                {%- set col_mapping = {\"source_column\": escaped_source_col, \"alias\": escaped_alias_col} -%}\r\n\r\n            {%- else -%}\r\n\r\n                {%- if execute -%}\r\n                    {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string, a list of strings, or a dictionary of hashdiff metadata.\") -}}\r\n                {%- endif %}\r\n\r\n            {%- endif -%}\r\n\r\n        {%- else -%}\r\n\r\n            {%- if execute -%}\r\n                {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string, a list of strings, or a dictionary of hashdiff metadata.\") -}}\r\n            {%- endif %}\r\n\r\n        {%- endif -%}\r\n\r\n    {%- elif columns == '' -%}\r\n\r\n        {%- if execute -%}\r\n            {{- exceptions.raise_compiler_error(\"Expected a column name or a list of column names, got an empty string\") -}}\r\n        {%- endif -%}\r\n\r\n    {%- endif -%}\r\n\r\n    {%- if columns is none -%}\r\n\r\n        {%- do return(none) -%}\r\n\r\n    {%- elif columns == [] -%}\r\n\r\n        {%- do return([]) -%}\r\n\r\n    {%- elif columns == {} -%}\r\n\r\n        {%- do return({}) -%}\r\n\r\n    {%- elif columns is string -%}\r\n\r\n        {%- do return(col_string) -%}\r\n\r\n    {%- elif automate_dv.is_list(columns) -%}\r\n\r\n        {%- do return(col_list) -%}\r\n\r\n    {%- elif columns is mapping -%}\r\n\r\n        {%- do return(col_mapping) -%}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_list", "macro.automate_dv.expand_column_list", "macro.automate_dv.is_something", "macro.automate_dv.escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2920322, "supported_languages": null}, "macro.automate_dv.expand_column_list": {"name": "expand_column_list", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\expand_column_list.sql", "original_file_path": "macros\\internal\\metadata_processing\\expand_column_list.sql", "unique_id": "macro.automate_dv.expand_column_list", "macro_sql": "\r\n\r\n{%- macro expand_column_list(columns=none) -%}\r\n\r\n{%- if not columns -%}\r\n    {%- do return([]) -%}\r\n{%- endif -%}\r\n\r\n{%- set col_list = [] -%}\r\n\r\n{%- if automate_dv.is_list(columns) -%}\r\n\r\n    {%- set columns = columns | reject(\"none\") %}\r\n\r\n    {%- for col in columns -%}\r\n\r\n        {%- if col is string -%}\r\n\r\n            {%- do col_list.append(col) -%}\r\n\r\n        {#- If list of lists -#}\r\n        {%- elif automate_dv.is_list(col) -%}\r\n\r\n            {%- for cols in col -%}\r\n\r\n                {%- do col_list.append(cols) -%}\r\n\r\n            {%- endfor -%}\r\n        {%- elif col is mapping -%}\r\n\r\n            {%- do col_list.append(col) -%}\r\n\r\n        {%- else -%}\r\n\r\n            {%- if execute -%}\r\n                {{- exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list of lists, dictionaries or strings.\") -}}\r\n            {%- endif %}\r\n\r\n        {%- endif -%}\r\n\r\n    {%- endfor -%}\r\n{%- else -%}\r\n\r\n    {%- if execute -%}\r\n        {{- exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list.\") -}}\r\n    {%- endif %}\r\n\r\n{%- endif -%}\r\n\r\n{%- do return(col_list) -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2960303, "supported_languages": null}, "macro.automate_dv.get_escape_characters": {"name": "get_escape_characters", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\get_escape_characters.sql", "original_file_path": "macros\\internal\\metadata_processing\\get_escape_characters.sql", "unique_id": "macro.automate_dv.get_escape_characters", "macro_sql": "{% macro get_escape_characters() -%}\r\n\r\n    {%- set escape_char_left, escape_char_right = adapter.dispatch('get_escape_characters', 'automate_dv')() -%}\r\n\r\n    {%- do return((var('escape_char_left', escape_char_left), var('escape_char_right', escape_char_right))) -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.fabric__get_escape_characters"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.2980325, "supported_languages": null}, "macro.automate_dv.snowflake__get_escape_characters": {"name": "snowflake__get_escape_characters", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\get_escape_characters.sql", "original_file_path": "macros\\internal\\metadata_processing\\get_escape_characters.sql", "unique_id": "macro.automate_dv.snowflake__get_escape_characters", "macro_sql": "\r\n\r\n{%- macro snowflake__get_escape_characters() %}\r\n    {%- do return (('\"', '\"')) -%}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.299031, "supported_languages": null}, "macro.automate_dv.bigquery__get_escape_characters": {"name": "bigquery__get_escape_characters", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\get_escape_characters.sql", "original_file_path": "macros\\internal\\metadata_processing\\get_escape_characters.sql", "unique_id": "macro.automate_dv.bigquery__get_escape_characters", "macro_sql": "\r\n\r\n{%- macro bigquery__get_escape_characters() %}\r\n    {%- do return (('`', '`')) -%}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.300032, "supported_languages": null}, "macro.automate_dv.fabric__get_escape_characters": {"name": "fabric__get_escape_characters", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\get_escape_characters.sql", "original_file_path": "macros\\internal\\metadata_processing\\get_escape_characters.sql", "unique_id": "macro.automate_dv.fabric__get_escape_characters", "macro_sql": "\r\n\r\n{%- macro fabric__get_escape_characters() %}\r\n    {%- do return (('\"', '\"')) -%}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.300032, "supported_languages": null}, "macro.automate_dv.databricks__get_escape_characters": {"name": "databricks__get_escape_characters", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\get_escape_characters.sql", "original_file_path": "macros\\internal\\metadata_processing\\get_escape_characters.sql", "unique_id": "macro.automate_dv.databricks__get_escape_characters", "macro_sql": "\r\n\r\n{%- macro databricks__get_escape_characters() %}\r\n    {%- do return (('`', '`')) -%}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.301034, "supported_languages": null}, "macro.automate_dv.postgres__get_escape_characters": {"name": "postgres__get_escape_characters", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\get_escape_characters.sql", "original_file_path": "macros\\internal\\metadata_processing\\get_escape_characters.sql", "unique_id": "macro.automate_dv.postgres__get_escape_characters", "macro_sql": "\r\n\r\n{%- macro postgres__get_escape_characters() %}\r\n    {%- do return (('\"', '\"')) -%}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.301034, "supported_languages": null}, "macro.automate_dv.multikey": {"name": "multikey", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\multikey.sql", "original_file_path": "macros\\internal\\metadata_processing\\multikey.sql", "unique_id": "macro.automate_dv.multikey", "macro_sql": "\r\n\r\n{%- macro multikey(columns, prefix=none, condition=none, operator='AND') -%}\r\n\r\n    {{- adapter.dispatch('multikey', 'automate_dv')(columns=columns, prefix=prefix, condition=condition, operator=operator) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.3050308, "supported_languages": null}, "macro.automate_dv.default__multikey": {"name": "default__multikey", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\multikey.sql", "original_file_path": "macros\\internal\\metadata_processing\\multikey.sql", "unique_id": "macro.automate_dv.default__multikey", "macro_sql": "\r\n\r\n{%- macro default__multikey(columns, prefix=none, condition=none, operator='AND') -%}\r\n\r\n    {%- if prefix is string -%}\r\n        {%- set prefix = [prefix] -%}\r\n    {%- endif -%}\r\n\r\n    {%- if columns is string -%}\r\n        {%- set columns = [columns] -%}\r\n    {%- endif -%}\r\n\r\n    {%- if condition in ['<>', '!=', '='] -%}\r\n        {%- for col in columns -%}\r\n            {%- if prefix -%}\r\n                {{- automate_dv.prefix([col], prefix[0], alias_target='target') }} {{ condition }} {{ automate_dv.prefix([col], prefix[1]) -}}\r\n            {%- endif %}\r\n            {%- if not loop.last %} {{ operator }} {% endif -%}\r\n        {% endfor -%}\r\n    {%- else -%}\r\n        {%- if automate_dv.is_list(columns) -%}\r\n            {%- for col in columns -%}\r\n                {{ (prefix[0] ~ '.') if prefix }}{{ col }} {{ condition if condition else '' }}\r\n                {%- if not loop.last -%} {{ \"\\n    \" ~ operator }} {% endif -%}\r\n            {%- endfor -%}\r\n        {%- else -%}\r\n            {{ prefix[0] ~ '.' if prefix }}{{ columns }} {{ condition if condition else '' }}\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.prefix", "macro.automate_dv.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.30803, "supported_languages": null}, "macro.automate_dv.process_payload_column_excludes": {"name": "process_payload_column_excludes", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\internal\\metadata_processing\\process_payload_column_excludes.sql", "original_file_path": "macros\\internal\\metadata_processing\\process_payload_column_excludes.sql", "unique_id": "macro.automate_dv.process_payload_column_excludes", "macro_sql": "\r\n\r\n{%- macro process_payload_column_excludes(src_pk, src_hashdiff, src_payload, src_extra_columns,\r\n                                          src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {%- if src_payload is not mapping -%}\r\n        {%- do return(src_payload) -%}\r\n    {%- endif -%}\r\n\r\n    {%- set source_model_cols = adapter.get_columns_in_relation(ref(source_model)) -%}\r\n    {%- set columns_in_metadata = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff,\r\n                                                                       src_payload, src_extra_columns,\r\n                                                                       src_eff, src_ldts, src_source]) | map('lower') | list -%}\r\n\r\n    {%- set payload_cols = [] -%}\r\n    {%- for col in source_model_cols -%}\r\n        {%- if col.column | lower not in columns_in_metadata -%}\r\n            {%- do payload_cols.append(col.column) -%}\r\n        {%- endif -%}\r\n    {%- endfor -%}\r\n\r\n    {%- if 'exclude_columns' in src_payload.keys() -%}\r\n        {%- set table_excludes_columns = src_payload.exclude_columns -%}\r\n\r\n        {%- if table_excludes_columns -%}\r\n\r\n            {%- set excluded_payload = [] -%}\r\n            {%- set exclude_columns_list = src_payload.columns | map('lower') | list -%}\r\n\r\n            {%- for col in payload_cols -%}\r\n               {%- if col | lower not in exclude_columns_list -%}\r\n                   {%- do excluded_payload.append(col) -%}\r\n               {%- endif -%}\r\n            {%- endfor -%}\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n\r\n    {%- do return(excluded_payload) -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.313034, "supported_languages": null}, "macro.automate_dv.drop_temporary_special": {"name": "drop_temporary_special", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\drop_temporary.sql", "original_file_path": "macros\\materialisations\\drop_temporary.sql", "unique_id": "macro.automate_dv.drop_temporary_special", "macro_sql": "{% macro drop_temporary_special(tmp_relation) %}\r\n    {# In databricks and sqlserver a temporary view/table can only be dropped by #}\r\n    {# the connection or session that created it so drop it now before the commit below closes this session #}\r\n\r\n    {%- set drop_query_name = 'DROP_QUERY-' ~ i -%}\r\n    {% call statement(drop_query_name, fetch_result=True) -%}\r\n        {% if target.type == 'databricks' %}\r\n            DROP VIEW {{ tmp_relation }};\r\n        {% elif target.type == 'sqlserver' %}\r\n            DROP TABLE {{ tmp_relation }};\r\n        {% endif %}\r\n    {%- endcall %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.3160324, "supported_languages": null}, "macro.automate_dv.materialization_bridge_incremental_default": {"name": "materialization_bridge_incremental_default", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\incremental_bridge_materialization.sql", "original_file_path": "macros\\materialisations\\incremental_bridge_materialization.sql", "unique_id": "macro.automate_dv.materialization_bridge_incremental_default", "macro_sql": "\r\n\r\n{%- materialization bridge_incremental, default -%}\r\n\r\n  {%- set full_refresh_mode = should_full_refresh() -%}\r\n\r\n  {% if target.type == \"sqlserver\" %}\r\n      {%- set target_relation = this.incorporate(type='table') -%}\r\n  {%  else %}\r\n      {%- set target_relation = this -%}\r\n  {% endif %}\r\n  {%- set existing_relation = load_relation(this) -%}\r\n  {%- set tmp_relation = make_temp_relation(target_relation) -%}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  {%- set to_drop = [] -%}\r\n  {%- if existing_relation is none -%}\r\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\r\n  {%- elif existing_relation.is_view or full_refresh_mode -%}\r\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\r\n      {%- set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" -%}\r\n      {%- set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) -%}\r\n      {%- do adapter.drop_relation(backup_relation) -%}\r\n\r\n      {%- do adapter.rename_relation(target_relation, backup_relation) -%}\r\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\r\n      {%- do to_drop.append(backup_relation) -%}\r\n  {%- else -%}\r\n\r\n      {%- set tmp_relation = make_temp_relation(target_relation) -%}\r\n      {%- do run_query(create_table_as(True, tmp_relation, sql)) -%}\r\n      {%- do adapter.expand_target_column_types(\r\n             from_relation=tmp_relation,\r\n             to_relation=target_relation) -%}\r\n      {%- set build_sql = automate_dv.incremental_bridge_replace(tmp_relation, target_relation) -%}\r\n{%- endif -%}\r\n\r\n  {%- call statement(\"main\") -%}\r\n      {{ build_sql }}\r\n  {%- endcall -%}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  -- `COMMIT` happens here\r\n  {%- do adapter.commit() -%}\r\n\r\n  {%- for rel in to_drop -%}\r\n      {%- do adapter.drop_relation(rel) -%}\r\n  {%- endfor -%}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.automate_dv.incremental_bridge_replace", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.323032, "supported_languages": ["sql"]}, "macro.automate_dv.incremental_pit_replace": {"name": "incremental_pit_replace", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\incremental_pit_bridge_replace.sql", "original_file_path": "macros\\materialisations\\incremental_pit_bridge_replace.sql", "unique_id": "macro.automate_dv.incremental_pit_replace", "macro_sql": "{% macro incremental_pit_replace(tmp_relation, target_relation, statement_name=\"main\") %}\r\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\r\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\r\n\r\n    TRUNCATE TABLE {{ target_relation }};\r\n\r\n    INSERT INTO {{ target_relation }} ({{ dest_cols_csv }})\r\n    (\r\n       SELECT {{ dest_cols_csv }}\r\n       FROM {{ tmp_relation }}\r\n    );\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.3250308, "supported_languages": null}, "macro.automate_dv.incremental_bridge_replace": {"name": "incremental_bridge_replace", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\incremental_pit_bridge_replace.sql", "original_file_path": "macros\\materialisations\\incremental_pit_bridge_replace.sql", "unique_id": "macro.automate_dv.incremental_bridge_replace", "macro_sql": "{% macro incremental_bridge_replace(tmp_relation, target_relation, statement_name=\"main\") %}\r\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\r\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\r\n\r\n    TRUNCATE TABLE {{ target_relation }};\r\n\r\n    INSERT INTO {{ target_relation }} ({{ dest_cols_csv }})\r\n    (\r\n       SELECT {{ dest_cols_csv }}\r\n       FROM {{ tmp_relation }}\r\n    );\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.3260326, "supported_languages": null}, "macro.automate_dv.materialization_pit_incremental_default": {"name": "materialization_pit_incremental_default", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\incremental_pit_materialization.sql", "original_file_path": "macros\\materialisations\\incremental_pit_materialization.sql", "unique_id": "macro.automate_dv.materialization_pit_incremental_default", "macro_sql": "\r\n\r\n{%- materialization pit_incremental, default -%}\r\n\r\n  {%- set full_refresh_mode = should_full_refresh() -%}\r\n\r\n  {% if target.type == \"sqlserver\" %}\r\n      {%- set target_relation = this.incorporate(type='table') -%}\r\n  {%  else %}\r\n      {%- set target_relation = this -%}\r\n  {% endif %}\r\n  {%- set existing_relation = load_relation(this) -%}\r\n  {%- set tmp_relation = make_temp_relation(target_relation) -%}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  {%- set to_drop = [] -%}\r\n  {%- if existing_relation is none -%}\r\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\r\n  {%- elif existing_relation.is_view or full_refresh_mode -%}\r\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\r\n      {%- set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" -%}\r\n      {%- set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) -%}\r\n      {%- do adapter.drop_relation(backup_relation) -%}\r\n\r\n      {%- do adapter.rename_relation(target_relation, backup_relation) -%}\r\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\r\n      {%- do to_drop.append(backup_relation) -%}\r\n  {%- else -%}\r\n\r\n      {%- set tmp_relation = make_temp_relation(target_relation) -%}\r\n      {%- do run_query(create_table_as(True, tmp_relation, sql)) -%}\r\n      {%- do adapter.expand_target_column_types(\r\n             from_relation=tmp_relation,\r\n             to_relation=target_relation) -%}\r\n      {%- set build_sql = automate_dv.incremental_pit_replace(tmp_relation, target_relation) -%}\r\n{%- endif -%}\r\n\r\n  {%- call statement(\"main\") -%}\r\n      {{ build_sql }}\r\n  {%- endcall -%}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  -- `COMMIT` happens here\r\n  {%- do adapter.commit() -%}\r\n\r\n  {%- for rel in to_drop -%}\r\n      {%- do adapter.drop_relation(rel) -%}\r\n  {%- endfor -%}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.automate_dv.incremental_pit_replace", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.3320293, "supported_languages": ["sql"]}, "macro.automate_dv.is_any_incremental": {"name": "is_any_incremental", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\mat_is_checks.sql", "original_file_path": "macros\\materialisations\\mat_is_checks.sql", "unique_id": "macro.automate_dv.is_any_incremental", "macro_sql": "\r\n\r\n{%- macro is_any_incremental() -%}\r\n    {%- if automate_dv.is_vault_insert_by_period() or automate_dv.is_vault_insert_by_rank() or automate_dv.is_pit_incremental() or automate_dv.is_bridge_incremental() or is_incremental() -%}\r\n        {%- do return(true) -%}\r\n    {%- else -%}\r\n        {%- do return(false) -%}\r\n    {%- endif -%}\r\n{%- endmacro -%}\r\n\r\n\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.is_vault_insert_by_period", "macro.automate_dv.is_vault_insert_by_rank", "macro.automate_dv.is_pit_incremental", "macro.automate_dv.is_bridge_incremental", "macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.3360376, "supported_languages": null}, "macro.automate_dv.is_vault_insert_by_period": {"name": "is_vault_insert_by_period", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\mat_is_checks.sql", "original_file_path": "macros\\materialisations\\mat_is_checks.sql", "unique_id": "macro.automate_dv.is_vault_insert_by_period", "macro_sql": "{% macro is_vault_insert_by_period() %}\r\n    {% if not execute %}\r\n        {{ return(False) }}\r\n    {% else %}\r\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\r\n\r\n            {{ return(relation is not none\r\n                      and relation.type == 'table'\r\n                      and model.config.materialized == 'vault_insert_by_period'\r\n                      and not should_full_refresh()) }}\r\n    {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.3380322, "supported_languages": null}, "macro.automate_dv.is_vault_insert_by_rank": {"name": "is_vault_insert_by_rank", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\mat_is_checks.sql", "original_file_path": "macros\\materialisations\\mat_is_checks.sql", "unique_id": "macro.automate_dv.is_vault_insert_by_rank", "macro_sql": "{% macro is_vault_insert_by_rank() %}\r\n    {#-- do not run introspective queries in parsing #}\r\n    {% if not execute %}\r\n        {{ return(False) }}\r\n    {% else %}\r\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\r\n\r\n            {{ return(relation is not none\r\n                      and relation.type == 'table'\r\n                      and model.config.materialized == 'vault_insert_by_rank'\r\n                      and not should_full_refresh()) }}\r\n    {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.34003, "supported_languages": null}, "macro.automate_dv.is_bridge_incremental": {"name": "is_bridge_incremental", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\mat_is_checks.sql", "original_file_path": "macros\\materialisations\\mat_is_checks.sql", "unique_id": "macro.automate_dv.is_bridge_incremental", "macro_sql": "{% macro is_bridge_incremental() %}\r\n    {#-- do not run introspective queries in parsing #}\r\n    {% if not execute %}\r\n        {{ return(False) }}\r\n    {% else %}\r\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\r\n\r\n            {{ return(relation is not none\r\n                      and relation.type == 'table'\r\n                      and model.config.materialized == 'bridge_incremental'\r\n                      and not should_full_refresh()) }}\r\n    {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.3410304, "supported_languages": null}, "macro.automate_dv.is_pit_incremental": {"name": "is_pit_incremental", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\mat_is_checks.sql", "original_file_path": "macros\\materialisations\\mat_is_checks.sql", "unique_id": "macro.automate_dv.is_pit_incremental", "macro_sql": "{% macro is_pit_incremental() %}\r\n    {#-- do not run introspective queries in parsing #}\r\n    {% if not execute %}\r\n        {{ return(False) }}\r\n    {% else %}\r\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\r\n\r\n            {{ return(relation is not none\r\n                      and relation.type == 'table'\r\n                      and model.config.materialized == 'pit_incremental'\r\n                      and not should_full_refresh()) }}\r\n    {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.34304, "supported_languages": null}, "macro.automate_dv.check_placeholder": {"name": "check_placeholder", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\shared_helpers.sql", "original_file_path": "macros\\materialisations\\shared_helpers.sql", "unique_id": "macro.automate_dv.check_placeholder", "macro_sql": "\r\n\r\n{%- macro check_placeholder(model_sql, placeholder='__PERIOD_FILTER__') -%}\r\n\r\n    {%- if model_sql.find(placeholder) == -1 -%}\r\n    {%- set error_message -%}\r\n    Model '{{ model.unique_id }}' does not include the required string '{{ placeholder }}' in its sql\r\n        {%- endset -%}\r\n        {{- exceptions.raise_compiler_error(error_message) -}}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.3450348, "supported_languages": null}, "macro.automate_dv.materialization_vault_insert_by_period_default": {"name": "materialization_vault_insert_by_period_default", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\vault_insert_by_period_materialization.sql", "original_file_path": "macros\\materialisations\\vault_insert_by_period_materialization.sql", "unique_id": "macro.automate_dv.materialization_vault_insert_by_period_default", "macro_sql": "{% materialization vault_insert_by_period, default -%}\r\n\r\n    {% if target.type == \"postgres\" and execute %}\r\n        {{ exceptions.raise_compiler_error(\"The vault_insert_by_period materialisation is currently unavailable on Postgres.\") }}\r\n    {% endif %}\r\n\r\n    {%- set full_refresh_mode = (should_full_refresh()) -%}\r\n\r\n    {% if target.type == \"sqlserver\" %}\r\n        {%- set target_relation = this.incorporate(type='table') -%}\r\n    {%  else %}\r\n        {%- set target_relation = this -%}\r\n    {% endif %}\r\n    {%- set existing_relation = load_relation(this) -%}\r\n    {%- set tmp_relation = make_temp_relation(target_relation) -%}\r\n\r\n    {%- set timestamp_field = config.require('timestamp_field') -%}\r\n    {%- set date_source_models = config.get('date_source_models', default=none) -%}\r\n\r\n    {%- set start_stop_dates = automate_dv.get_start_stop_dates(timestamp_field, date_source_models) | as_native -%}\r\n\r\n    {%- set period = config.get('period', default='day') -%}\r\n    {%- set to_drop = [] -%}\r\n\r\n    {%- do automate_dv.check_placeholder(sql) -%}\r\n\r\n    {%- do automate_dv.check_num_periods(start_stop_dates.start_date, start_stop_dates.stop_date, period) -%}\r\n\r\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n    -- `BEGIN` happens here:\r\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n    {% if existing_relation is none %}\r\n\r\n        {% set filtered_sql = automate_dv.replace_placeholder_with_period_filter(sql, timestamp_field,\r\n                                                                       start_stop_dates.start_date,\r\n                                                                       start_stop_dates.stop_date,\r\n                                                                       0, period) %}\r\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\r\n        {% do to_drop.append(tmp_relation) %}\r\n\r\n    {% elif existing_relation.is_view %}\r\n\r\n        {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table (vault_insert_by_period).\") }}\r\n        {% do adapter.drop_relation(existing_relation) %}\r\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\r\n\r\n        {% set filtered_sql = automate_dv.replace_placeholder_with_period_filter(sql, timestamp_field,\r\n                                                                       start_stop_dates.start_date,\r\n                                                                       start_stop_dates.stop_date,\r\n                                                                       0, period) %}\r\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\r\n\r\n    {% elif full_refresh_mode %}\r\n        {% set filtered_sql = automate_dv.replace_placeholder_with_period_filter(sql, timestamp_field,\r\n                                                                       start_stop_dates.start_date,\r\n                                                                       start_stop_dates.stop_date,\r\n                                                                       0, period) %}\r\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\r\n    {% else %}\r\n        {% set period_boundaries = automate_dv.get_period_boundaries(target_relation,\r\n                                                                  timestamp_field,\r\n                                                                  start_stop_dates.start_date,\r\n                                                                  start_stop_dates.stop_date,\r\n                                                                  period) %}\r\n\r\n        {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\r\n        {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\r\n        {%- set loop_vars = {'sum_rows_inserted': 0} -%}\r\n\r\n        {% for i in range(period_boundaries.num_periods) -%}\r\n\r\n            {%- set iteration_number = i + 1 -%}\r\n\r\n            {%- set period_of_load = automate_dv.get_period_of_load(period, i, period_boundaries.start_timestamp) -%}\r\n\r\n            {{ dbt_utils.log_info(\"Running for {} {} of {} ({}) [{}]\".format(period, iteration_number, period_boundaries.num_periods, period_of_load, model.unique_id)) }}\r\n\r\n            {% set tmp_relation = make_temp_relation(target_relation) %}\r\n\r\n            {% set tmp_table_sql = automate_dv.get_period_filter_sql(target_cols_csv, sql, timestamp_field, period,\r\n                                                                  period_boundaries.start_timestamp,\r\n                                                                  period_boundaries.stop_timestamp, i) %}\r\n\r\n\r\n\r\n            {# This call statement drops and then creates a temporary table #}\r\n            {# but MSSQL will fail to drop any temporary table created by a previous loop iteration #}\r\n            {# See MSSQL note and drop code below #}\r\n\r\n            {# [ ] TODO check dbt postgres implementation for a possible fix #}\r\n            {% call statement() -%}\r\n                {{ create_table_as(True, tmp_relation, tmp_table_sql) }}\r\n            {%- endcall %}\r\n\r\n            {{ adapter.expand_target_column_types(from_relation=tmp_relation,\r\n                                                  to_relation=target_relation) }}\r\n\r\n            {%- set insert_query_name = 'main-' ~ i -%}\r\n            {% call statement(insert_query_name, fetch_result=True) -%}\r\n                INSERT INTO {{ target_relation }} ({{ target_cols_csv }})\r\n                (\r\n                    SELECT {{ target_cols_csv }}\r\n                    FROM {{ tmp_relation.include(schema=True) }}\r\n                );\r\n            {%- endcall %}\r\n\r\n            {% set result = load_result(insert_query_name) %}\r\n\r\n            {% if 'response' in result.keys() %} {# added in v0.19.0 #}\r\n                {%- if not result['response']['rows_affected'] %}\r\n                    {% if target.type == \"databricks\" and result['data'] | length > 0 %}\r\n                        {% set rows_inserted = result['data'][0][1] | int %}\r\n                    {% else %}\r\n                        {% set rows_inserted = 0 %}\r\n                    {% endif %}\r\n                {%- else %}\r\n                    {% set rows_inserted = result['response']['rows_affected'] %}\r\n                {%- endif %}\r\n            {% else %} {# older versions #}\r\n                {% set rows_inserted = result['status'].split(\" \")[2] | int %}\r\n            {% endif %}\r\n\r\n            {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\r\n            {%- do loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %}\r\n\r\n            {{ dbt_utils.log_info(\"Ran for {} {} of {} ({}); {} records inserted [{}]\".format(period, iteration_number,\r\n                                                                                              period_boundaries.num_periods,\r\n                                                                                              period_of_load, rows_inserted,\r\n                                                                                              model.unique_id)) }}\r\n\r\n            {# In databricks and sqlserver a temporary view/table can only be dropped by #}\r\n            {# the connection or session that created it so drop it now before the commit below closes this session #}                                                                            model.unique_id)) }}\r\n            {% if target.type in ['databricks', 'sqlserver'] %}\r\n                {{ automate_dv.drop_temporary_special(tmp_relation) }}\r\n            {% else %}\r\n                {% do to_drop.append(tmp_relation) %}\r\n            {% endif %}\r\n\r\n            {% do adapter.commit() %}\r\n\r\n        {% endfor %}\r\n\r\n        {% call noop_statement('main', \"INSERT {}\".format(loop_vars['sum_rows_inserted']) ) -%}\r\n            {{ tmp_table_sql }}\r\n        {%- endcall %}\r\n\r\n    {% endif %}\r\n\r\n    {% if build_sql is defined %}\r\n        {% call statement(\"main\", fetch_result=True) %}\r\n            {{ build_sql }}\r\n        {% endcall %}\r\n\r\n        {% set result = load_result('main') %}\r\n\r\n        {% if 'response' in result.keys() %} {# added in v0.19.0 #}\r\n            {%- if not result['response']['rows_affected'] %}\r\n                {% if target.type == \"databricks\" and result['data'] | length > 0 %}\r\n                    {% set rows_inserted = result['data'][0][1] | int %}\r\n                {% else %}\r\n                    {% set rows_inserted = 0 %}\r\n                {% endif %}\r\n            {%- else %}\r\n                {% set rows_inserted = result['response']['rows_affected'] %}\r\n            {%- endif %}\r\n        {% else %} {# older versions #}\r\n            {% set rows_inserted = result['status'].split(\" \")[2] | int %}\r\n        {% endif %}\r\n\r\n        {% call noop_statement('main', \"BASE LOAD {}\".format(rows_inserted)) -%}\r\n            {{ build_sql }}\r\n        {%- endcall %}\r\n\r\n        -- `COMMIT` happens here\r\n        {% do adapter.commit() %}\r\n    {% endif %}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n    {% for rel in to_drop %}\r\n        {% if rel.type is not none %}\r\n            {% do adapter.drop_relation(rel) %}\r\n        {% endif %}\r\n    {% endfor %}\r\n\r\n    {% set target_relation = target_relation.incorporate(type='table') %}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n    {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.automate_dv.get_start_stop_dates", "macro.automate_dv.check_placeholder", "macro.automate_dv.check_num_periods", "macro.dbt.run_hooks", "macro.automate_dv.replace_placeholder_with_period_filter", "macro.dbt.create_table_as", "macro.automate_dv.get_period_boundaries", "macro.automate_dv.get_period_of_load", "macro.dbt_utils.log_info", "macro.automate_dv.get_period_filter_sql", "macro.dbt.statement", "macro.automate_dv.drop_temporary_special", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.3930333, "supported_languages": ["sql"]}, "macro.automate_dv.materialization_vault_insert_by_rank_default": {"name": "materialization_vault_insert_by_rank_default", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\vault_insert_by_rank_materialization.sql", "original_file_path": "macros\\materialisations\\vault_insert_by_rank_materialization.sql", "unique_id": "macro.automate_dv.materialization_vault_insert_by_rank_default", "macro_sql": "{% materialization vault_insert_by_rank, default -%}\r\n\r\n    {% if target.type == \"postgres\" and execute %}\r\n        {{ exceptions.raise_compiler_error(\"The vault_insert_by_rank materialisation is currently unavailable on Postgres.\") }}\r\n    {% endif %}\r\n\r\n    {%- set full_refresh_mode = (should_full_refresh()) -%}\r\n\r\n    {% if target.type == \"sqlserver\" %}\r\n        {%- set target_relation = this.incorporate(type='table') -%}\r\n    {%  else %}\r\n        {%- set target_relation = this -%}\r\n    {% endif %}\r\n    {%- set existing_relation = load_relation(this) -%}\r\n    {%- set tmp_relation = make_temp_relation(target_relation) -%}\r\n\r\n    {%- set rank_column = config.require('rank_column') -%}\r\n    {%- set rank_source_models = config.require('rank_source_models') -%}\r\n\r\n    {%- set min_max_ranks = automate_dv.get_min_max_ranks(rank_column, rank_source_models) | as_native -%}\r\n\r\n    {%- set to_drop = [] -%}\r\n\r\n    {%- do automate_dv.check_placeholder(sql, \"__RANK_FILTER__\") -%}\r\n\r\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n    -- `BEGIN` happens here:\r\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n    {% if existing_relation is none %}\r\n\r\n        {% set filtered_sql = automate_dv.replace_placeholder_with_rank_filter(sql, rank_column, 1) %}\r\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\r\n\r\n        {% do to_drop.append(tmp_relation) %}\r\n\r\n    {% elif existing_relation.is_view %}\r\n\r\n        {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table (vault_insert_by_rank).\") }}\r\n        {% do adapter.drop_relation(existing_relation) %}\r\n\r\n        {% set filtered_sql = automate_dv.replace_placeholder_with_rank_filter(sql, rank_column, 1) %}\r\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\r\n\r\n    {% elif full_refresh_mode %}\r\n        {% set filtered_sql = automate_dv.replace_placeholder_with_rank_filter(sql, rank_column, 1) %}\r\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\r\n    {% else %}\r\n\r\n        {% if min_max_ranks.max_rank | int > 100000 %}\r\n            {%- set error_message -%}\r\n            'Max iterations is 100,000. Consider using a different rank column\r\n            or loading a smaller amount of data.\r\n            vault_insert_by materialisations are not intended for this purpose,\r\n            please see https://automate_dv.readthedocs.io/en/latest/materialisations/'\r\n            {%- endset -%}\r\n\r\n            {{- exceptions.raise_compiler_error(error_message) -}}\r\n        {% else %}\r\n            {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\r\n            {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\r\n            {%- set loop_vars = {'sum_rows_inserted': 0} -%}\r\n\r\n            {% for i in range(min_max_ranks.max_rank | int ) -%}\r\n\r\n                {%- set iteration_number = i + 1 -%}\r\n\r\n                {%- set filtered_sql = automate_dv.replace_placeholder_with_rank_filter(sql, rank_column, iteration_number) -%}\r\n\r\n                {{ dbt_utils.log_info(\"Running for {} {} of {} on column '{}' [{}]\".format('rank', iteration_number, min_max_ranks.max_rank, rank_column, model.unique_id)) }}\r\n\r\n                {% set tmp_relation = make_temp_relation(target_relation) %}\r\n\r\n                {# This call statement drops and then creates a temporary table #}\r\n                {# but MSSQL will fail to drop any temporary table created by a previous loop iteration #}\r\n                {# See MSSQL note and drop code below #}\r\n                {% call statement() -%}\r\n                    {{ create_table_as(True, tmp_relation, filtered_sql) }}\r\n                {%- endcall %}\r\n\r\n                {{ adapter.expand_target_column_types(from_relation=tmp_relation,\r\n                                                      to_relation=target_relation) }}\r\n\r\n                {%- set insert_query_name = 'main-' ~ i -%}\r\n                {% call statement(insert_query_name, fetch_result=True) -%}\r\n                    INSERT INTO {{ target_relation }} ({{ target_cols_csv }})\r\n                    (\r\n                        SELECT {{ target_cols_csv }}\r\n                        FROM {{ tmp_relation.include(schema=True) }}\r\n                    );\r\n                {%- endcall %}\r\n\r\n                {% set result = load_result(insert_query_name) %}\r\n                {% if 'response' in result.keys() %} {# added in v0.19.0 #}\r\n                    {# Investigate for Databricks #}\r\n                    {%- if result['response']['rows_affected'] == None %}\r\n                        {% set rows_inserted = 0 %}\r\n                    {%- else %}\r\n                        {% set rows_inserted = result['response']['rows_affected'] %}\r\n                    {%- endif %}\r\n\r\n                {% else %} {# older versions #}\r\n                    {% set rows_inserted = result['status'].split(\" \")[2] | int %}\r\n                {% endif %}\r\n\r\n                {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\r\n                {%- do loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %}\r\n\r\n                {{ dbt_utils.log_info(\"Ran for {} {} of {}; {} records inserted [{}]\".format('rank', iteration_number,\r\n                                                                                              min_max_ranks.max_rank,\r\n                                                                                              rows_inserted,\r\n                                                                                              model.unique_id)) }}\r\n\r\n                {# In databricks and sqlserver a temporary view/table can only be dropped by #}\r\n                {# the connection or session that created it so drop it now before the commit below closes this session #}                                                                            model.unique_id)) }}\r\n                {% if target.type in ['databricks', 'sqlserver'] %}\r\n                    {{ automate_dv.drop_temporary_special(tmp_relation) }}\r\n                {% else %}\r\n                    {% do to_drop.append(tmp_relation) %}\r\n                {% endif %}\r\n\r\n                {% do adapter.commit() %}\r\n\r\n            {% endfor %}\r\n            {% call noop_statement('main', \"INSERT {}\".format(loop_vars['sum_rows_inserted']) ) -%}\r\n                {{ filtered_sql }}\r\n            {%- endcall %}\r\n        {% endif %}\r\n\r\n    {% endif %}\r\n\r\n    {% if build_sql is defined %}\r\n        {% call statement(\"main\", fetch_result=True) %}\r\n            {{ build_sql }}\r\n        {% endcall %}\r\n\r\n        {% set result = load_result('main') %}\r\n\r\n        {% if 'response' in result.keys() %} {# added in v0.19.0 #}\r\n            {% set rows_inserted = result['response']['rows_affected'] %}\r\n        {% else %} {# older versions #}\r\n            {% set rows_inserted = result['status'].split(\" \")[2] | int %}\r\n        {% endif %}\r\n\r\n        {% call noop_statement('main', \"BASE LOAD {}\".format(rows_inserted)) -%}\r\n            {{ build_sql }}\r\n        {%- endcall %}\r\n\r\n        -- `COMMIT` happens here\r\n        {% do adapter.commit() %}\r\n    {% endif %}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n    {% for rel in to_drop %}\r\n        {% if rel.type is not none %}\r\n            {% do adapter.drop_relation(rel) %}\r\n        {% endif %}\r\n    {% endfor %}\r\n\r\n    {% set target_relation = target_relation.incorporate(type='table') %}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n    {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.automate_dv.get_min_max_ranks", "macro.automate_dv.check_placeholder", "macro.dbt.run_hooks", "macro.automate_dv.replace_placeholder_with_rank_filter", "macro.dbt.create_table_as", "macro.dbt_utils.log_info", "macro.dbt.statement", "macro.automate_dv.drop_temporary_special", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4190326, "supported_languages": ["sql"]}, "macro.automate_dv.check_num_periods": {"name": "check_num_periods", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\check_datediff.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\check_datediff.sql", "unique_id": "macro.automate_dv.check_num_periods", "macro_sql": "\r\n\r\n{%- macro check_num_periods(start_date, stop_date, period) -%}\r\n\r\n    {% set num_periods = adapter.dispatch('check_num_periods', 'automate_dv')(\r\n                                          start_date=start_date,\r\n                                          stop_date=stop_date,\r\n                                          period=period) %}\r\n\r\n    {%- if num_periods > 100000 -%}\r\n        {%- set error_message -%}\r\n        'Max iterations is 100,000. Consider using a different datepart value (e.g. day)\r\n        or loading data for a shorter time period.\r\n        vault_insert_by materialisations are not intended for this purpose,\r\n        please see https://automate_dv.readthedocs.io/en/latest/materialisations/'\r\n        {%- endset -%}\r\n\r\n        {{- exceptions.raise_compiler_error(error_message) -}}\r\n    {%- endif -%}\r\n\r\n    {% do return(num_periods) %}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.fabric__check_num_periods"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4220326, "supported_languages": null}, "macro.automate_dv.default__check_num_periods": {"name": "default__check_num_periods", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\check_datediff.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\check_datediff.sql", "unique_id": "macro.automate_dv.default__check_num_periods", "macro_sql": "{% macro default__check_num_periods(start_date, stop_date, period) %}\r\n\r\n    {% set num_periods_check_sql %}\r\n    SELECT {{ datediff('start_timestamp', 'stop_timestamp', period) }} AS NUM_PERIODS\r\n    FROM\r\n    (SELECT CAST('{{ start_date }}' AS {{ dbt.type_timestamp() }}) AS start_timestamp,\r\n        CAST(NULLIF('{{ stop_date | lower }}', 'none') AS {{ dbt.type_timestamp() }}) AS stop_timestamp)\r\n    {% endset %}\r\n    {% set num_periods_dict = automate_dv.get_query_results_as_dict(num_periods_check_sql) %}\r\n    {% set num_periods = num_periods_dict['NUM_PERIODS'][0] | int %}\r\n\r\n    {% do return(num_periods) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt.type_timestamp", "macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4240315, "supported_languages": null}, "macro.automate_dv.fabric__check_num_periods": {"name": "fabric__check_num_periods", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\check_datediff.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\check_datediff.sql", "unique_id": "macro.automate_dv.fabric__check_num_periods", "macro_sql": "{% macro fabric__check_num_periods(start_date, stop_date, period) %}\r\n\r\n    {% set num_periods_check_sql %}\r\n    SELECT DATEDIFF_BIG({{ period }}, CAST('{{ start_date }}' AS DATETIME2),\r\n        CAST(NULLIF('{{ stop_date | lower }}', 'none') AS DATETIME2)) AS NUM_PERIODS\r\n    {% endset %}\r\n    {% set num_periods_dict = automate_dv.get_query_results_as_dict(num_periods_check_sql) %}\r\n    {% set num_periods = num_periods_dict['NUM_PERIODS'][0] | int %}\r\n\r\n    {% do return(num_periods) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4240315, "supported_languages": null}, "macro.automate_dv.get_period_boundaries": {"name": "get_period_boundaries", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "unique_id": "macro.automate_dv.get_period_boundaries", "macro_sql": "\r\n\r\n{%- macro get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\r\n\r\n    {% set macro = adapter.dispatch('get_period_boundaries',\r\n                                    'automate_dv')(target_relation=target_relation,\r\n                                                   timestamp_field=timestamp_field,\r\n                                                   start_date=start_date,\r\n                                                   stop_date=stop_date,\r\n                                                   period=period) %}\r\n\r\n    {% do return(macro) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.fabric__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4320278, "supported_languages": null}, "macro.automate_dv.default__get_period_boundaries": {"name": "default__get_period_boundaries", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "unique_id": "macro.automate_dv.default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\r\n    {%- set from_date_or_timestamp = \"NULLIF('{}','none')::TIMESTAMP\".format(stop_date | lower) -%}\r\n\r\n    {% set period_boundary_sql -%}\r\n        WITH period_data AS (\r\n            SELECT\r\n                COALESCE(MAX({{ timestamp_field }}), '{{ start_date }}')::TIMESTAMP AS start_timestamp,\r\n                COALESCE({{ automate_dv.dateadd('millisecond', 86399999, from_date_or_timestamp) }},\r\n                         {{ current_timestamp() }} ) AS stop_timestamp\r\n            FROM {{ target_relation }}\r\n        )\r\n        SELECT\r\n            start_timestamp,\r\n            stop_timestamp,\r\n            {{ datediff('start_timestamp',\r\n                                  'stop_timestamp',\r\n                                  period) }} + 1 AS num_periods\r\n        FROM period_data\r\n    {%- endset %}\r\n\r\n    {% set period_boundaries_dict = automate_dv.get_query_results_as_dict(period_boundary_sql) %}\r\n\r\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\r\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\r\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\r\n\r\n    {% do return(period_boundaries) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.dateadd", "macro.dbt.current_timestamp", "macro.dbt.datediff", "macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4340281, "supported_languages": null}, "macro.automate_dv.bigquery__get_period_boundaries": {"name": "bigquery__get_period_boundaries", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "unique_id": "macro.automate_dv.bigquery__get_period_boundaries", "macro_sql": "{% macro bigquery__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\r\n\r\n    {%- set from_date_or_timestamp = \"NULLIF('{}','none')\".format(stop_date | lower) -%}\r\n\r\n    {% set period_boundary_sql -%}\r\n        with data as (\r\n            select\r\n                COALESCE(CAST(MAX({{ timestamp_field }}) AS DATETIME), CAST('{{ start_date }}' AS DATETIME)) as START_TIMESTAMP,\r\n                COALESCE({{ automate_dv.dateadd('millisecond', 86399999, from_date_or_timestamp) }},\r\n                         CAST({{ current_timestamp() }} AS DATETIME)) as STOP_TIMESTAMP\r\n            from {{ target_relation }}\r\n        )\r\n        select\r\n            START_TIMESTAMP,\r\n            STOP_TIMESTAMP,\r\n            {{ datediff('start_timestamp', 'stop_timestamp', period) }} + 1 as NUM_PERIODS\r\n        from data\r\n    {%- endset %}\r\n\r\n\r\n    {% set period_boundaries_dict = automate_dv.get_query_results_as_dict(period_boundary_sql) %}\r\n\r\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\r\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\r\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\r\n\r\n    {% do return(period_boundaries) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.dateadd", "macro.dbt.current_timestamp", "macro.dbt.datediff", "macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4360301, "supported_languages": null}, "macro.automate_dv.fabric__get_period_boundaries": {"name": "fabric__get_period_boundaries", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "unique_id": "macro.automate_dv.fabric__get_period_boundaries", "macro_sql": "{% macro fabric__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\r\n\r\n    {#  MSSQL cannot CAST datetime2 strings with more than 7 decimal places #}\r\n    {% set start_date = start_date[0:27] %}\r\n    {% set stop_date = stop_date[0:27] %}\r\n    {%- set from_date_or_timestamp = \"CAST(NULLIF('{}','none') AS DATETIME2)\".format(stop_date | lower) %}\r\n\r\n    {% set period_boundary_sql -%}\r\n        WITH period_data AS (\r\n            SELECT\r\n                CAST(COALESCE(MAX({{ timestamp_field }}), CAST('{{ start_date }}' AS DATETIME2)) AS DATETIME2) AS start_timestamp,\r\n                CAST(COALESCE({{ automate_dv.dateadd('millisecond', 86399999, from_date_or_timestamp) }},\r\n                         {{ current_timestamp() }} ) AS DATETIME2) AS stop_timestamp\r\n            FROM {{ target_relation }}\r\n        )\r\n        SELECT\r\n            start_timestamp,\r\n            stop_timestamp,\r\n            {{ datediff('start_timestamp', 'stop_timestamp', period) }} + 1 AS num_periods\r\n        FROM period_data\r\n    {%- endset %}\r\n\r\n    {% set period_boundaries_dict = automate_dv.get_query_results_as_dict(period_boundary_sql) %}\r\n\r\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\r\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\r\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\r\n\r\n    {% do return(period_boundaries) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.dateadd", "macro.dbt.current_timestamp", "macro.dbt.datediff", "macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4380293, "supported_languages": null}, "macro.automate_dv.databricks__get_period_boundaries": {"name": "databricks__get_period_boundaries", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "unique_id": "macro.automate_dv.databricks__get_period_boundaries", "macro_sql": "{% macro databricks__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\r\n\r\n    {%- set from_date_or_timestamp = \"NULLIF('{}','none')::TIMESTAMP\".format(stop_date | lower) -%}\r\n\r\n    {% set period_boundary_sql -%}\r\n\r\n        WITH period_data AS (\r\n            SELECT\r\n                COALESCE(MAX({{ timestamp_field }}), CAST('{{ start_date }}' AS TIMESTAMP)) AS start_timestamp,\r\n                COALESCE({{ automate_dv.dateadd('millisecond', 86399999, from_date_or_timestamp) }},\r\n                         {{ current_timestamp() }}) AS stop_timestamp\r\n            FROM {{ target_relation }}\r\n        )\r\n        SELECT\r\n            IF(stop_timestamp < start_timestamp, stop_timestamp, start_timestamp) AS start_timestamp,\r\n            stop_timestamp,\r\n            {{ datediff('start_timestamp', 'stop_timestamp', period) }} + 1 AS num_periods\r\n\r\n        FROM period_data\r\n    {%- endset %}\r\n\r\n    {% set period_boundaries_dict = automate_dv.get_query_results_as_dict(period_boundary_sql) %}\r\n\r\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\r\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\r\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\r\n\r\n    {% do return(period_boundaries) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.dateadd", "macro.dbt.current_timestamp", "macro.dbt.datediff", "macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.440028, "supported_languages": null}, "macro.automate_dv.postgres__get_period_boundaries": {"name": "postgres__get_period_boundaries", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_boundaries.sql", "unique_id": "macro.automate_dv.postgres__get_period_boundaries", "macro_sql": "{% macro postgres__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\r\n\r\n    {% set period_boundary_sql -%}\r\n        WITH period_data AS (\r\n            SELECT\r\n                COALESCE(MAX({{ timestamp_field }}), '{{ start_date }}')::TIMESTAMP AS start_timestamp,\r\n                COALESCE({{ automate_dv.dateadd('millisecond', 86399999, \"NULLIF('\" ~ stop_date | lower ~ \"','none')::TIMESTAMP\") }},\r\n                         {{ current_timestamp() }} ) AS stop_timestamp\r\n            FROM {{ target_relation }}\r\n        )\r\n        SELECT\r\n            start_timestamp,\r\n            stop_timestamp,\r\n            {{ datediff('start_timestamp', 'stop_timestamp', period) }} + 1 AS num_periods\r\n        FROM period_data\r\n    {%- endset %}\r\n\r\n    {% set period_boundaries_dict = automate_dv.get_query_results_as_dict(period_boundary_sql) %}\r\n\r\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\r\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\r\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\r\n\r\n    {% do return(period_boundaries) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.dateadd", "macro.dbt.current_timestamp", "macro.dbt.datediff", "macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4420278, "supported_languages": null}, "macro.automate_dv.get_period_filter_sql": {"name": "get_period_filter_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "unique_id": "macro.automate_dv.get_period_filter_sql", "macro_sql": "\r\n\r\n{%- macro get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\r\n\r\n    {% set macro = adapter.dispatch('get_period_filter_sql',\r\n                                    'automate_dv')(target_cols_csv=target_cols_csv,\r\n                                                   base_sql=base_sql,\r\n                                                   timestamp_field=timestamp_field,\r\n                                                   period=period,\r\n                                                   start_timestamp=start_timestamp,\r\n                                                   stop_timestamp=stop_timestamp,\r\n                                                   offset=offset) %}\r\n    {% do return(macro) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.fabric__get_period_filter_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.445028, "supported_languages": null}, "macro.automate_dv.default__get_period_filter_sql": {"name": "default__get_period_filter_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "unique_id": "macro.automate_dv.default__get_period_filter_sql", "macro_sql": "{% macro default__get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\r\n\r\n    {%- set filtered_sql = {'sql': base_sql} -%}\r\n\r\n    {%- do filtered_sql.update({'sql': automate_dv.replace_placeholder_with_period_filter(filtered_sql.sql,\r\n                                                                                       timestamp_field,\r\n                                                                                       start_timestamp,\r\n                                                                                       stop_timestamp,\r\n                                                                                       offset, period)}) -%}\r\n    select {{ target_cols_csv }} from ({{ filtered_sql.sql }})\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4460282, "supported_languages": null}, "macro.automate_dv.fabric__get_period_filter_sql": {"name": "fabric__get_period_filter_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "unique_id": "macro.automate_dv.fabric__get_period_filter_sql", "macro_sql": "{% macro fabric__get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\r\n\r\n    {%- set filtered_sql = {'sql': base_sql} -%}\r\n\r\n    {%- do filtered_sql.update({'sql': automate_dv.replace_placeholder_with_period_filter(filtered_sql.sql,\r\n                                                                                       timestamp_field,\r\n                                                                                       start_timestamp,\r\n                                                                                       stop_timestamp,\r\n                                                                                       offset, period)}) -%}\r\n    {# MSSQL does not allow CTEs in a subquery #}\r\n    {{ filtered_sql.sql }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4470282, "supported_languages": null}, "macro.automate_dv.postgres__get_period_filter_sql": {"name": "postgres__get_period_filter_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_filter_sql.sql", "unique_id": "macro.automate_dv.postgres__get_period_filter_sql", "macro_sql": "{% macro postgres__get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\r\n\r\n    {%- set filtered_sql = {'sql': base_sql} -%}\r\n\r\n    {%- do filtered_sql.update({'sql': automate_dv.replace_placeholder_with_period_filter(filtered_sql.sql,\r\n                                                                                       timestamp_field,\r\n                                                                                       start_timestamp,\r\n                                                                                       stop_timestamp,\r\n                                                                                       offset, period)}) -%}\r\n    select {{ target_cols_csv }} from ({{ filtered_sql.sql }})\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4480283, "supported_languages": null}, "macro.automate_dv.get_period_of_load": {"name": "get_period_of_load", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "unique_id": "macro.automate_dv.get_period_of_load", "macro_sql": "\r\n\r\n{%- macro get_period_of_load(period, offset, start_timestamp) -%}\r\n\r\n    {% set macro = adapter.dispatch('get_period_of_load',\r\n                                    'automate_dv')(period=period,\r\n                                                   offset=offset,\r\n                                                   start_timestamp=start_timestamp) %}\r\n\r\n    {% do return(macro) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.fabric__get_period_of_load"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.450028, "supported_languages": null}, "macro.automate_dv.default__get_period_of_load": {"name": "default__get_period_of_load", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "unique_id": "macro.automate_dv.default__get_period_of_load", "macro_sql": "\r\n\r\n\r\n{%- macro default__get_period_of_load(period, offset, start_timestamp) -%}\r\n\r\n    {% set period_of_load_sql -%}\r\n        SELECT DATE_TRUNC('{{ period }}', DATEADD({{ period }}, {{ offset }}, TO_DATE('{{ start_timestamp }}'))) AS period_of_load\r\n    {%- endset %}\r\n\r\n    {% set period_of_load_dict = automate_dv.get_query_results_as_dict(period_of_load_sql) %}\r\n\r\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\r\n\r\n    {% do return(period_of_load) %}\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.451028, "supported_languages": null}, "macro.automate_dv.bigquery__get_period_of_load": {"name": "bigquery__get_period_of_load", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "unique_id": "macro.automate_dv.bigquery__get_period_of_load", "macro_sql": "{%- macro bigquery__get_period_of_load(period, offset, start_timestamp) -%}\r\n\r\n    {% set period_of_load_sql -%}\r\n        SELECT DATE_TRUNC(DATE_ADD( DATE('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), {{ period }}  ) AS PERIOD_OF_LOAD\r\n    {%- endset %}\r\n\r\n    {% set period_of_load_dict = automate_dv.get_query_results_as_dict(period_of_load_sql) %}\r\n\r\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\r\n\r\n    {% do return(period_of_load) %}\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4520354, "supported_languages": null}, "macro.automate_dv.fabric__get_period_of_load": {"name": "fabric__get_period_of_load", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "unique_id": "macro.automate_dv.fabric__get_period_of_load", "macro_sql": "{%- macro fabric__get_period_of_load(period, offset, start_timestamp) -%}\r\n    {#  MSSQL cannot CAST datetime2 strings with more than 7 decimal places #}\r\n    {% set start_timestamp_mssql = start_timestamp[0:23] %}\r\n\r\n    {% set period_of_load_sql -%}\r\n        SELECT DATEADD({{ period }}, DATEDIFF({{period}}, 0, DATEADD({{ period }}, {{ offset }}, CAST('{{ start_timestamp_mssql }}' AS DATETIME2))), 0) AS period_of_load\r\n    {%- endset %}\r\n\r\n    {% set period_of_load_dict = automate_dv.get_query_results_as_dict(period_of_load_sql) %}\r\n\r\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\r\n\r\n    {% do return(period_of_load) %}\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4540334, "supported_languages": null}, "macro.automate_dv.databricks__get_period_of_load": {"name": "databricks__get_period_of_load", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "unique_id": "macro.automate_dv.databricks__get_period_of_load", "macro_sql": "{%- macro databricks__get_period_of_load(period, offset, start_timestamp) -%}\r\n    {% do return(automate_dv.default__get_period_of_load(period=period, offset=offset, start_timestamp=start_timestamp)) %}\r\n{%- endmacro -%}\r\n\r\n\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.default__get_period_of_load"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4550302, "supported_languages": null}, "macro.automate_dv.postgres__get_period_of_load": {"name": "postgres__get_period_of_load", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_period_of_load.sql", "unique_id": "macro.automate_dv.postgres__get_period_of_load", "macro_sql": "{%- macro postgres__get_period_of_load(period, offset, start_timestamp) -%}\r\n    {# Postgres uses different DateTime arithmetic #}\r\n    {% set period_of_load_sql -%}\r\n        SELECT DATE_TRUNC('{{ period }}',\r\n               TO_TIMESTAMP('{{ start_timestamp }}', 'YYYY-MM-DD HH24:MI:SS') + interval '{{ offset }} {{ period }}'\r\n        ) AS period_of_load\r\n    {%- endset %}\r\n\r\n    {% set period_of_load_dict = automate_dv.get_query_results_as_dict(period_of_load_sql) %}\r\n\r\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\r\n\r\n    {% do return(period_of_load) %}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4560292, "supported_languages": null}, "macro.automate_dv.get_start_stop_dates": {"name": "get_start_stop_dates", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\get_start_stop_dates.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\get_start_stop_dates.sql", "unique_id": "macro.automate_dv.get_start_stop_dates", "macro_sql": "{% macro get_start_stop_dates(timestamp_field, date_source_models) %}\r\n\r\n    {% if config.get('start_date', default=none) is not none %}\r\n\r\n        {%- set start_date = config.get('start_date') -%}\r\n        {%- set stop_date = config.get('stop_date', default=none) -%}\r\n\r\n        {% do return({'start_date': start_date,'stop_date': stop_date}) %}\r\n\r\n    {% elif date_source_models is not none %}\r\n\r\n        {% if date_source_models is string %}\r\n            {% set date_source_models = [date_source_models] %}\r\n        {% endif %}\r\n        {% set query_sql %}\r\n            WITH stage AS (\r\n            {% for source_model in date_source_models %}\r\n                SELECT {{ timestamp_field }} FROM {{ ref(source_model) }}\r\n                {% if not loop.last %} UNION ALL {% endif %}\r\n            {% endfor %})\r\n\r\n            SELECT MIN({{ timestamp_field }}) AS MIN, MAX({{ timestamp_field }}) AS MAX\r\n            FROM stage\r\n        {% endset %}\r\n\r\n        {% set min_max_dict = automate_dv.get_query_results_as_dict(query_sql) %}\r\n\r\n        {% set start_date = min_max_dict['MIN'][0] | string %}\r\n        {% set stop_date = min_max_dict['MAX'][0] | string %}\r\n        {% set min_max_dates = {\"start_date\": start_date, \"stop_date\": stop_date} %}\r\n\r\n        {% do return(min_max_dates) %}\r\n\r\n    {% else %}\r\n        {%- if execute -%}\r\n            {{ exceptions.raise_compiler_error(\"Invalid 'vault_insert_by_period' configuration. Must provide 'start_date' and 'stop_date', just 'stop_date', and/or 'date_source_models' options.\") }}\r\n        {%- endif -%}\r\n    {% endif %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4600286, "supported_languages": null}, "macro.automate_dv.replace_placeholder_with_period_filter": {"name": "replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "unique_id": "macro.automate_dv.replace_placeholder_with_period_filter", "macro_sql": "\r\n\r\n{%- macro replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) -%}\r\n\r\n    {% set macro = adapter.dispatch('replace_placeholder_with_period_filter',\r\n                                    'automate_dv')(core_sql=core_sql,\r\n                                                   timestamp_field=timestamp_field,\r\n                                                   start_timestamp=start_timestamp,\r\n                                                   stop_timestamp=stop_timestamp,\r\n                                                   offset=offset,\r\n                                                   period=period) %}\r\n    {% do return(macro) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.fabric__replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4630282, "supported_languages": null}, "macro.automate_dv.default__replace_placeholder_with_period_filter": {"name": "default__replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "unique_id": "macro.automate_dv.default__replace_placeholder_with_period_filter", "macro_sql": "{% macro default__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\r\n\r\n    {%- set period_filter -%}\r\n        (TO_DATE({{ timestamp_field }})\r\n        >= DATE_TRUNC('{{ period }}', TO_DATE('{{ start_timestamp }}') + INTERVAL '{{ offset }} {{ period }}') AND\r\n             TO_DATE({{ timestamp_field }}) < DATE_TRUNC('{{ period }}', TO_DATE('{{ start_timestamp }}') + INTERVAL '{{ offset }} {{ period }}' + INTERVAL '1 {{ period }}'))\r\n      AND (TO_DATE({{ timestamp_field }}) >= TO_DATE('{{ start_timestamp }}'))\r\n    {%- endset -%}\r\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\r\n\r\n    {% do return(filtered_sql) %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.465029, "supported_languages": null}, "macro.automate_dv.bigquery__replace_placeholder_with_period_filter": {"name": "bigquery__replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "unique_id": "macro.automate_dv.bigquery__replace_placeholder_with_period_filter", "macro_sql": "{% macro bigquery__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\r\n\r\n    {%- set period_filter -%}\r\n            (DATE({{ timestamp_field }}) >= DATE_TRUNC(DATE_ADD( DATE('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), {{ period }} ) AND\r\n             DATE({{ timestamp_field }}) < DATE_TRUNC(DATE_ADD(DATE_ADD( DATE('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), INTERVAL 1 {{ period }}), {{ period }} )\r\n      AND DATE({{ timestamp_field }}) >= DATE('{{ start_timestamp }}'))\r\n    {%- endset -%}\r\n\r\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\r\n\r\n    {% do return(filtered_sql) %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4660287, "supported_languages": null}, "macro.automate_dv.fabric__replace_placeholder_with_period_filter": {"name": "fabric__replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "unique_id": "macro.automate_dv.fabric__replace_placeholder_with_period_filter", "macro_sql": "{% macro fabric__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\r\n\r\n    {#  MSSQL cannot CAST datetime2 strings with more than 7 decimal places #}\r\n    {% set start_timestamp_mssql = start_timestamp[0:27] %}\r\n\r\n    {%- set period_filter -%}\r\n            (CAST({{ timestamp_field }} AS DATE) >= DATEADD({{ period }}, DATEDIFF({{ period }}, 0, DATEADD({{ period }}, {{ offset }}, CAST('{{ start_timestamp_mssql }}' AS DATETIME2))), 0) AND\r\n             CAST({{ timestamp_field }} AS DATE) < DATEADD({{ period }}, 1, DATEADD({{ period }}, {{ offset }}, CAST('{{ start_timestamp_mssql }}' AS DATETIME2)))\r\n      AND (CAST({{ timestamp_field }} AS DATE) >= CAST('{{ start_timestamp_mssql }}' AS DATE)))\r\n    {%- endset -%}\r\n\r\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\r\n\r\n    {% do return(filtered_sql) %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4670286, "supported_languages": null}, "macro.automate_dv.postgres__replace_placeholder_with_period_filter": {"name": "postgres__replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "original_file_path": "macros\\materialisations\\period_mat_helpers\\replace_placeholder_with_period_filter.sql", "unique_id": "macro.automate_dv.postgres__replace_placeholder_with_period_filter", "macro_sql": "{% macro postgres__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\r\n\r\n    {%- set period_filter -%}\r\n        {{ timestamp_field }}::DATE >= DATE_TRUNC('{{ period }}', TO_DATE('{{ start_timestamp }}', 'YYYY-MM-DD') + INTERVAL '{{ offset }} {{ period }}')\r\n        AND {{ timestamp_field }}::DATE < DATE_TRUNC('{{ period }}', TO_DATE('{{ start_timestamp }}','YYYY-MM-DD') + INTERVAL '{{ offset }} {{ period }}' + INTERVAL '1 {{ period }}')\r\n        AND {{ timestamp_field }}::DATE >= TO_DATE('{{ start_timestamp }}','YYYY-MM-DD')\r\n    {%- endset -%}\r\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\r\n\r\n    {% do return(filtered_sql) %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.468029, "supported_languages": null}, "macro.automate_dv.get_min_max_ranks": {"name": "get_min_max_ranks", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\rank_mat_helpers\\get_min_max_ranks.sql", "original_file_path": "macros\\materialisations\\rank_mat_helpers\\get_min_max_ranks.sql", "unique_id": "macro.automate_dv.get_min_max_ranks", "macro_sql": "{% macro get_min_max_ranks(rank_column, rank_source_models) %}\r\n\r\n    {% if rank_source_models is not none %}\r\n\r\n        {% if rank_source_models is string %}\r\n            {% set rank_source_models = [rank_source_models] %}\r\n        {% endif %}\r\n\r\n        {% set query_sql %}\r\n            WITH stage AS (\r\n            {% for source_model in rank_source_models %}\r\n                SELECT {{ rank_column }} FROM {{ ref(source_model) }}\r\n                {% if not loop.last %} UNION ALL {% endif %}\r\n            {% endfor %})\r\n\r\n            SELECT MIN({{ rank_column }}) AS MIN, MAX({{ rank_column }}) AS MAX\r\n            FROM stage\r\n        {% endset %}\r\n\r\n        {% set min_max_dict = automate_dv.get_query_results_as_dict(query_sql) %}\r\n\r\n        {% set min_rank = min_max_dict['MIN'][0] | string %}\r\n        {% set max_rank = min_max_dict['MAX'][0] | string %}\r\n        {% set min_max_ranks = {\"min_rank\": min_rank, \"max_rank\": max_rank} %}\r\n\r\n        {% do return(min_max_ranks) %}\r\n\r\n    {% else %}\r\n        {%- if execute -%}\r\n            {{ exceptions.raise_compiler_error(\"Invalid 'vault_insert_by_rank' configuration. Must provide 'rank_column', and 'rank_source_models' options.\") }}\r\n        {%- endif -%}\r\n    {% endif %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.47203, "supported_languages": null}, "macro.automate_dv.replace_placeholder_with_rank_filter": {"name": "replace_placeholder_with_rank_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "original_file_path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "unique_id": "macro.automate_dv.replace_placeholder_with_rank_filter", "macro_sql": "\r\n\r\n{%- macro replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) -%}\r\n\r\n    {% set macro = adapter.dispatch('replace_placeholder_with_rank_filter',\r\n                                    'automate_dv')(core_sql=core_sql,\r\n                                                  rank_column=rank_column,\r\n                                                  rank_iteration=rank_iteration) %}\r\n    {% do return(macro) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.fabric__replace_placeholder_with_rank_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4740298, "supported_languages": null}, "macro.automate_dv.default__replace_placeholder_with_rank_filter": {"name": "default__replace_placeholder_with_rank_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "original_file_path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "unique_id": "macro.automate_dv.default__replace_placeholder_with_rank_filter", "macro_sql": "{% macro default__replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) %}\r\n\r\n    {%- set rank_filter -%}\r\n    {{ rank_column }}:: INTEGER = {{ rank_iteration }}::INTEGER\r\n    {%- endset -%}\r\n\r\n    {%- set filtered_sql = core_sql | replace(\"__RANK_FILTER__\", rank_filter) -%}\r\n\r\n    {% do return(filtered_sql) %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4740298, "supported_languages": null}, "macro.automate_dv.fabric__replace_placeholder_with_rank_filter": {"name": "fabric__replace_placeholder_with_rank_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "original_file_path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "unique_id": "macro.automate_dv.fabric__replace_placeholder_with_rank_filter", "macro_sql": "{% macro fabric__replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) %}\r\n\r\n    {%- set rank_filter -%}\r\n        CAST({{ rank_column }} AS INT) = CAST({{ rank_iteration }} AS INT)\r\n    {%- endset -%}\r\n\r\n    {%- set filtered_sql = core_sql | replace(\"__RANK_FILTER__\", rank_filter) -%}\r\n\r\n    {% do return(filtered_sql) %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.475031, "supported_languages": null}, "macro.automate_dv.bigquery__replace_placeholder_with_rank_filter": {"name": "bigquery__replace_placeholder_with_rank_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "original_file_path": "macros\\materialisations\\rank_mat_helpers\\replace_placeholder_with_rank_filter.sql", "unique_id": "macro.automate_dv.bigquery__replace_placeholder_with_rank_filter", "macro_sql": "{% macro bigquery__replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) %}\r\n    {%- set rank_filter -%}\r\n        CAST({{ rank_column }} AS INTEGER) = CAST({{ rank_iteration }} AS INTEGER)\r\n    {%- endset -%}\r\n\r\n    {%- set filtered_sql = core_sql | replace(\"__RANK_FILTER__\", rank_filter) -%}\r\n\r\n    {% do return(filtered_sql) %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4760296, "supported_languages": null}, "macro.automate_dv.derive_columns": {"name": "derive_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\staging\\derive_columns.sql", "original_file_path": "macros\\staging\\derive_columns.sql", "unique_id": "macro.automate_dv.derive_columns", "macro_sql": "\r\n\r\n{%- macro derive_columns(source_relation=none, columns=none) -%}\r\n\r\n    {{- adapter.dispatch('derive_columns', 'automate_dv')(source_relation=source_relation, columns=columns) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__derive_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4790287, "supported_languages": null}, "macro.automate_dv.default__derive_columns": {"name": "default__derive_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\staging\\derive_columns.sql", "original_file_path": "macros\\staging\\derive_columns.sql", "unique_id": "macro.automate_dv.default__derive_columns", "macro_sql": "\r\n\r\n{%- macro default__derive_columns(source_relation=none, columns=none) -%}\r\n\r\n{%- set exclude_columns = [] -%}\r\n{%- set include_columns = [] -%}\r\n{%- set src_columns = [] -%}\r\n{%- set der_columns = [] -%}\r\n\r\n{%- set source_cols = automate_dv.source_columns(source_relation=source_relation) -%}\r\n\r\n{%- if columns is mapping and columns is not none -%}\r\n\r\n    {#- Add aliases of derived columns to excludes and full SQL to includes -#}\r\n    {%- for derived_column in columns -%}\r\n        {%- set column_config = columns[derived_column] -%}\r\n\r\n        {%- if automate_dv.is_list(column_config) -%}\r\n            {%- set column_list = [] -%}\r\n\r\n            {%- for concat_component in column_config -%}\r\n                {%- set column_str = automate_dv.as_constant(concat_component) -%}\r\n                {%- do column_list.append(column_str) -%}\r\n            {%- endfor -%}\r\n\r\n            {%- set concat = automate_dv.concat_ws(column_list, \"||\") -%}\r\n            {%- set concat_string = concat ~ \" AS \" ~ derived_column -%}\r\n\r\n            {%- do der_columns.append(concat_string) -%}\r\n        {%- else -%}\r\n            {%- if column_config is mapping and column_config -%}\r\n                {%- set column_escape = column_config['escape'] -%}\r\n\r\n                {%- if automate_dv.is_list(column_config['source_column']) -%}\r\n                    {%- set column_list = [] -%}\r\n\r\n                    {%- for concat_component in column_config['source_column'] -%}\r\n                        {%- set column_str = automate_dv.as_constant(concat_component) -%}\r\n                        {%- if column_escape is true %}\r\n                            {%- set column_str = automate_dv.escape_column_names(column_str) -%}\r\n                        {% endif %}\r\n                        {%- do column_list.append(column_str) -%}\r\n                    {%- endfor -%}\r\n\r\n                    {%- set concat = automate_dv.concat_ws(column_list, \"||\") -%}\r\n                    {%- set concat_string = concat ~ \" AS \" ~ derived_column -%}\r\n\r\n                    {%- do der_columns.append(concat_string) -%}\r\n                {%- else -%}\r\n                    {%- set column_str = automate_dv.as_constant(column_config['source_column']) -%}\r\n                    {%- if column_escape is true -%}\r\n                        {%- do der_columns.append(automate_dv.escape_column_names(column_str) ~ \" AS \" ~ derived_column) -%}\r\n                    {%- else -%}\r\n                        {%- do der_columns.append(column_str ~ \" AS \" ~ derived_column) -%}\r\n                    {%- endif -%}\r\n                {%- endif -%}\r\n            {%- else -%}\r\n                {%- set column_str = automate_dv.as_constant(column_config) -%}\r\n                {%- do der_columns.append(column_str ~ \" AS \" ~ derived_column) -%}\r\n            {%- endif -%}\r\n        {%- endif -%}\r\n\r\n        {%- do exclude_columns.append(derived_column) -%}\r\n\r\n    {%- endfor -%}\r\n\r\n    {#- Add all columns from source_model relation -#}\r\n    {%- if source_relation is defined and source_relation is not none -%}\r\n\r\n        {%- for col in source_cols -%}\r\n            {%- if col | lower not in exclude_columns | map('lower') | list -%}\r\n                {%- do src_columns.append(col) -%}\r\n            {%- endif -%}\r\n        {%- endfor -%}\r\n\r\n    {%- endif -%}\r\n\r\n    {#- Makes sure the columns are appended in a logical order. Source columns then derived columns -#}\r\n    {%- set include_columns = src_columns + der_columns -%}\r\n    {%- set columns_to_escape = automate_dv.process_columns_to_escape(columns) | list -%}\r\n\r\n    {#- Print out all columns in includes -#}\r\n    {%- for col in include_columns -%}\r\n        {%- if col | lower in columns_to_escape | map('lower') | list -%}\r\n            {{- automate_dv.escape_column_name(col) -}}{{ \",\\n\" if not loop.last }}\r\n        {%- else -%}\r\n            {{- col -}}{{ \",\\n\" if not loop.last }}\r\n        {%- endif -%}\r\n    {%- endfor -%}\r\n\r\n{%- else -%}\r\n\r\n{%- if execute -%}\r\n\r\n{{ exceptions.raise_compiler_error(\"Invalid column configuration:\r\nexpected format, either: {'source_relation': Relation, 'columns': {column_name: column_value}}\r\nor: {'source_relation': Relation, 'columns': {column_name: {'source_column': column_value, 'escape': true / false}}}\r\ngot: {'source_relation': \" ~ source_relation ~ \", 'columns': \" ~ columns ~ \"}\") }}\r\n{%- endif %}\r\n\r\n{%- endif %}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.source_columns", "macro.automate_dv.is_list", "macro.automate_dv.as_constant", "macro.automate_dv.concat_ws", "macro.automate_dv.escape_column_names", "macro.automate_dv.process_columns_to_escape", "macro.automate_dv.escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4870372, "supported_languages": null}, "macro.automate_dv.hash_columns": {"name": "hash_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\staging\\hash_columns.sql", "original_file_path": "macros\\staging\\hash_columns.sql", "unique_id": "macro.automate_dv.hash_columns", "macro_sql": "\r\n\r\n{%- macro hash_columns(columns=none, columns_to_escape=none) -%}\r\n\r\n    {{- adapter.dispatch('hash_columns', 'automate_dv')(columns=columns, columns_to_escape=columns_to_escape) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__hash_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4890337, "supported_languages": null}, "macro.automate_dv.default__hash_columns": {"name": "default__hash_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\staging\\hash_columns.sql", "original_file_path": "macros\\staging\\hash_columns.sql", "unique_id": "macro.automate_dv.default__hash_columns", "macro_sql": "\r\n\r\n{%- macro default__hash_columns(columns=none, columns_to_escape=none) -%}\r\n\r\n{%- if columns is mapping and columns is not none -%}\r\n\r\n    {%- for col in columns -%}\r\n\r\n        {%- if columns[col] is mapping and columns[col].is_hashdiff -%}\r\n\r\n            {{- automate_dv.hash(columns=columns[col]['columns'],\r\n                              alias=col,\r\n                              is_hashdiff=columns[col]['is_hashdiff'],\r\n                              columns_to_escape=columns_to_escape) -}}\r\n\r\n        {%- elif columns[col] is not mapping -%}\r\n\r\n            {{- automate_dv.hash(columns=columns[col],\r\n                              alias=col,\r\n                              is_hashdiff=false,\r\n                              columns_to_escape=columns_to_escape) -}}\r\n\r\n        {%- elif columns[col] is mapping and not columns[col].is_hashdiff -%}\r\n\r\n            {%- if execute -%}\r\n                {%- do exceptions.warn(\"[\" ~ this ~ \"] Warning: You provided a list of columns under a 'columns' key, but did not provide the 'is_hashdiff' flag. Use list syntax for PKs.\") -%}\r\n            {% endif %}\r\n\r\n            {{- automate_dv.hash(columns=columns[col]['columns'], alias=col, columns_to_escape=columns_to_escape) -}}\r\n\r\n        {%- endif -%}\r\n\r\n        {{- \",\\n\\n\" if not loop.last -}}\r\n    {%- endfor -%}\r\n\r\n{%- endif %}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.491033, "supported_languages": null}, "macro.automate_dv.null_columns": {"name": "null_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\staging\\null_columns.sql", "original_file_path": "macros\\staging\\null_columns.sql", "unique_id": "macro.automate_dv.null_columns", "macro_sql": "\r\n\r\n{%- macro null_columns(source_relation=none, columns=none) -%}\r\n\r\n    {{- adapter.dispatch('null_columns', 'automate_dv')(source_relation=source_relation, columns=columns) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__null_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4950335, "supported_languages": null}, "macro.automate_dv.default__null_columns": {"name": "default__null_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\staging\\null_columns.sql", "original_file_path": "macros\\staging\\null_columns.sql", "unique_id": "macro.automate_dv.default__null_columns", "macro_sql": "\r\n\r\n{%- macro default__null_columns(source_relation=none, columns=none) -%}\r\n\r\n{%- if columns is mapping and columns is not none -%}\r\n\r\n    {%- set ns = namespace() -%}\r\n\r\n    {%- for col in columns -%}\r\n        {%- if col.lower() == 'required' -%}\r\n            {% if automate_dv.is_something(columns[col]) %}\r\n                {%- if columns[col] is string -%}\r\n                    {%- set ns.required = [columns[col]] -%}\r\n                {%- elif automate_dv.is_list(columns[col]) -%}\r\n                    {%- set ns.required = columns[col] -%}\r\n                {%- endif -%}\r\n            {%- endif -%}\r\n        {%- endif -%}\r\n        {%- if col.lower() == 'optional' -%}\r\n            {% if automate_dv.is_something(columns[col]) %}\r\n                {%- if columns[col] is string -%}\r\n                    {%- set ns.optional = [columns[col]] -%}\r\n                {%- elif automate_dv.is_list(columns[col]) -%}\r\n                    {%- set ns.optional = columns[col] -%}\r\n                {%- endif -%}\r\n            {%- endif -%}\r\n        {%- endif -%}\r\n    {%- endfor -%}\r\n\r\n    {%- set required_value = var('null_key_required', '-1') -%}\r\n    {%- set optional_value = var('null_key_optional', '-2') -%}\r\n\r\n    {%- if automate_dv.is_something(ns.required) -%}\r\n        {%- filter indent(width=0) -%}\r\n        {%- for col_name in ns.required -%}\r\n            {{ automate_dv.null_column_sql(col_name, required_value) }}{{ \",\\n\" if not loop.last }}{{ \",\\n\" if loop.last and automate_dv.is_something(ns.optional) else \"\" }}\r\n        {%- endfor -%}\r\n        {%- endfilter -%}\r\n    {%- endif -%}\r\n\r\n    {%- if automate_dv.is_something(ns.optional) -%}\r\n        {%- filter indent(width=0) -%}\r\n        {%- for col_name in ns.optional -%}\r\n            {{ automate_dv.null_column_sql(col_name, optional_value) }}{{ \",\\n\" if not loop.last }}\r\n        {%- endfor -%}\r\n        {%- endfilter -%}\r\n    {%- endif -%}\r\n\r\n{%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.is_something", "macro.automate_dv.is_list", "macro.automate_dv.null_column_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4980328, "supported_languages": null}, "macro.automate_dv.null_column_sql": {"name": "null_column_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\staging\\null_columns.sql", "original_file_path": "macros\\staging\\null_columns.sql", "unique_id": "macro.automate_dv.null_column_sql", "macro_sql": "{%- macro null_column_sql(col_name, default_value) -%}\r\n\r\n    {{- adapter.dispatch('null_column_sql', 'automate_dv')(col_name=col_name, default_value=default_value) -}}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.fabric__null_column_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4990325, "supported_languages": null}, "macro.automate_dv.default__null_column_sql": {"name": "default__null_column_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\staging\\null_columns.sql", "original_file_path": "macros\\staging\\null_columns.sql", "unique_id": "macro.automate_dv.default__null_column_sql", "macro_sql": "{%- macro default__null_column_sql(col_name, default_value) -%}\r\n\r\n    {{ col_name }} AS {{ col_name ~ \"_ORIGINAL\" }},\r\n    IFNULL({{ col_name }}, '{{ default_value }}') AS {{ col_name }}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.4990325, "supported_languages": null}, "macro.automate_dv.fabric__null_column_sql": {"name": "fabric__null_column_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\staging\\null_columns.sql", "original_file_path": "macros\\staging\\null_columns.sql", "unique_id": "macro.automate_dv.fabric__null_column_sql", "macro_sql": "{%- macro fabric__null_column_sql(col_name, default_value) -%}\r\n\r\n    {{ col_name }} AS {{ col_name ~ \"_ORIGINAL\" }},\r\n    ISNULL({{ col_name }}, '{{ default_value }}') AS {{ col_name }}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5000324, "supported_languages": null}, "macro.automate_dv.postgres__null_column_sql": {"name": "postgres__null_column_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\staging\\null_columns.sql", "original_file_path": "macros\\staging\\null_columns.sql", "unique_id": "macro.automate_dv.postgres__null_column_sql", "macro_sql": "{%- macro postgres__null_column_sql(col_name, default_value) -%}\r\n\r\n    {{ col_name }} AS {{ col_name ~ \"_ORIGINAL\" }},\r\n    COALESCE({{ col_name }}, '{{ default_value }}') AS {{ col_name }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5000324, "supported_languages": null}, "macro.automate_dv.rank_columns": {"name": "rank_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\staging\\rank_columns.sql", "original_file_path": "macros\\staging\\rank_columns.sql", "unique_id": "macro.automate_dv.rank_columns", "macro_sql": "\r\n\r\n{%- macro rank_columns(columns=none) -%}\r\n\r\n    {{- adapter.dispatch('rank_columns', 'automate_dv')(columns=columns) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__rank_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5040472, "supported_languages": null}, "macro.automate_dv.default__rank_columns": {"name": "default__rank_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\staging\\rank_columns.sql", "original_file_path": "macros\\staging\\rank_columns.sql", "unique_id": "macro.automate_dv.default__rank_columns", "macro_sql": "\r\n\r\n{%- macro default__rank_columns(columns=none) -%}\r\n\r\n{%- if columns is mapping and columns is not none -%}\r\n\r\n    {%- for col in columns -%}\r\n\r\n        {%- if columns[col] is mapping and columns[col].partition_by and columns[col].order_by -%}\r\n\r\n            {%- set order_by = columns[col].order_by -%}\r\n            {%- set partition_by = columns[col].partition_by -%}\r\n            {%- set dense_rank = columns[col].dense_rank -%}\r\n\r\n            {%- if automate_dv.is_nothing(dense_rank) %}\r\n                {%- set rank_type = \"RANK()\" -%}\r\n            {%- elif dense_rank is true -%}\r\n                {%- set rank_type = \"DENSE_RANK()\" -%}\r\n            {%- else -%}\r\n                {%- if execute -%}\r\n                    {%- do exceptions.raise_compiler_error('If dense_rank is provided, it must be true or false, not {}'.format(dense_rank)) -%}\r\n                {% endif %}\r\n            {%- endif -%}\r\n\r\n            {%- if automate_dv.is_list(order_by) -%}\r\n\r\n                {%- set order_by_str_lst = [] -%}\r\n\r\n                {% for order_by_col in order_by %}\r\n\r\n                    {%- if order_by_col is mapping %}\r\n                        {%- set column_name, direction = order_by_col.items()|first -%}\r\n                        {%- set order_by_str = \"{} {}\".format(column_name, direction) | trim -%}\r\n                    {%- else -%}\r\n                        {%- set order_by_str = order_by_col -%}\r\n                    {%- endif -%}\r\n\r\n                    {%- do order_by_str_lst.append(order_by_str) -%}\r\n                {%- endfor -%}\r\n\r\n                {%- set order_by_str = order_by_str_lst | join(\", \") -%}\r\n\r\n            {%- else -%}\r\n\r\n                {%- if order_by is mapping %}\r\n                    {%- set column_name, direction = order_by.items()|first -%}\r\n                {%- else -%}\r\n                    {%- set column_name = order_by -%}\r\n                    {%- set direction = '' -%}\r\n                {%- endif -%}\r\n\r\n                {%- set order_by_str = \"{} {}\".format(column_name, direction) | trim -%}\r\n            {%- endif -%}\r\n\r\n            {%- if automate_dv.is_list(partition_by) -%}\r\n                {%- set partition_by_str = partition_by | join(\", \") -%}\r\n            {%- else -%}\r\n                {%- set partition_by_str = partition_by -%}\r\n            {%- endif -%}\r\n\r\n            {{- \"{} OVER (PARTITION BY {} ORDER BY {}) AS {}\".format(rank_type, partition_by_str, order_by_str, col) | indent(4) -}}\r\n\r\n        {%- endif -%}\r\n\r\n        {{- \",\\n\" if not loop.last -}}\r\n    {%- endfor -%}\r\n\r\n{%- endif %}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_nothing", "macro.automate_dv.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5080323, "supported_languages": null}, "macro.automate_dv.source_columns": {"name": "source_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\staging\\source_columns.sql", "original_file_path": "macros\\staging\\source_columns.sql", "unique_id": "macro.automate_dv.source_columns", "macro_sql": "\r\n\r\n{%- macro source_columns(source_relation=none) -%}\r\n\r\n    {%- if source_relation -%}\r\n        {%- set source_model_cols = adapter.get_columns_in_relation(source_relation) -%}\r\n\r\n        {%- set column_list = [] -%}\r\n\r\n        {%- for source_col in source_model_cols -%}\r\n            {%- do column_list.append(source_col.column) -%}\r\n        {%- endfor -%}\r\n\r\n        {%- do return(column_list) -%}\r\n    {%- endif %}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5090399, "supported_languages": null}, "macro.automate_dv.stage": {"name": "stage", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\staging\\stage.sql", "original_file_path": "macros\\staging\\stage.sql", "unique_id": "macro.automate_dv.stage", "macro_sql": "\r\n\r\n{%- macro stage(include_source_columns=none, source_model=none, hashed_columns=none, derived_columns=none, null_columns=none, ranked_columns=none) -%}\r\n\r\n    {%- if include_source_columns is none -%}\r\n        {%- set include_source_columns = true -%}\r\n    {%- endif -%}\r\n\r\n    {{- automate_dv.prepend_generated_by() }}\r\n\r\n    {{ adapter.dispatch('stage', 'automate_dv')(include_source_columns=include_source_columns,\r\n                                              source_model=source_model,\r\n                                              hashed_columns=hashed_columns,\r\n                                              derived_columns=derived_columns,\r\n                                              null_columns=null_columns,\r\n                                              ranked_columns=ranked_columns\r\n                                              ) -}}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.prepend_generated_by", "macro.automate_dv.default__stage"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5140333, "supported_languages": null}, "macro.automate_dv.default__stage": {"name": "default__stage", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\staging\\stage.sql", "original_file_path": "macros\\staging\\stage.sql", "unique_id": "macro.automate_dv.default__stage", "macro_sql": "{%- macro default__stage(include_source_columns, source_model, hashed_columns, derived_columns, null_columns, ranked_columns) -%}\r\n\r\n{% if (source_model is none) and execute %}\r\n\r\n    {%- set error_message -%}\r\n    Staging error: Missing source_model configuration. A source model name must be provided.\r\n    e.g.\r\n    [REF STYLE]\r\n    source_model: model_name\r\n    OR\r\n    [SOURCES STYLE]\r\n    source_model:\r\n        source_name: source_table_name\r\n    {%- endset -%}\r\n\r\n    {{- exceptions.raise_compiler_error(error_message) -}}\r\n{%- endif -%}\r\n\r\n{#- Check for source format or ref format and create\r\n    relation object from source_model -#}\r\n{% if source_model is mapping and source_model is not none -%}\r\n\r\n    {%- set source_name = source_model | first -%}\r\n    {%- set source_table_name = source_model[source_name] -%}\r\n\r\n    {%- set source_relation = source(source_name, source_table_name) -%}\r\n    {%- set all_source_columns = automate_dv.source_columns(source_relation=source_relation) -%}\r\n{%- elif source_model is not mapping and source_model is not none -%}\r\n\r\n    {%- set source_relation = ref(source_model) -%}\r\n    {%- set all_source_columns = automate_dv.source_columns(source_relation=source_relation) -%}\r\n{%- else -%}\r\n\r\n    {%- set all_source_columns = [] -%}\r\n{%- endif -%}\r\n\r\n{%- set columns_to_escape = automate_dv.process_columns_to_escape(derived_columns) | list -%}\r\n{%- set derived_column_names = automate_dv.extract_column_names(derived_columns) | list -%}\r\n{%- set null_column_names = automate_dv.extract_null_column_names(null_columns) | list -%}\r\n{%- set hashed_column_names = automate_dv.extract_column_names(hashed_columns) | list -%}\r\n{%- set ranked_column_names = automate_dv.extract_column_names(ranked_columns) | list -%}\r\n{%- set exclude_column_names = derived_column_names + null_column_names + hashed_column_names | list -%}\r\n{%- set source_and_derived_column_names = (all_source_columns + derived_column_names) | unique | list -%}\r\n\r\n{%- set source_columns_to_select = automate_dv.process_columns_to_select(all_source_columns, exclude_column_names) -%}\r\n{%- set derived_columns_to_select = automate_dv.process_columns_to_select(source_and_derived_column_names, null_column_names + hashed_column_names) | unique | list -%}\r\n{%- set derived_and_null_columns_to_select = automate_dv.process_columns_to_select(source_and_derived_column_names + null_column_names, hashed_column_names) | unique | list -%}\r\n{%- set final_columns_to_select = [] -%}\r\n\r\n{#- Include source columns in final column selection if true -#}\r\n{%- if include_source_columns -%}\r\n    {%- if automate_dv.is_nothing(derived_columns)\r\n           and automate_dv.is_nothing(null_columns)\r\n           and automate_dv.is_nothing(hashed_columns)\r\n           and automate_dv.is_nothing(ranked_columns) -%}\r\n        {%- set final_columns_to_select = final_columns_to_select + all_source_columns -%}\r\n    {%- else -%}\r\n        {#- Only include non-overriden columns if not just source columns -#}\r\n        {%- set final_columns_to_select = final_columns_to_select + source_columns_to_select -%}\r\n    {%- endif -%}\r\n{%- endif %}\r\n\r\nWITH source_data AS (\r\n\r\n    SELECT\r\n\r\n    {{- \"\\n\\n    \" ~ automate_dv.print_list(list_to_print=all_source_columns, columns_to_escape=columns_to_escape) if all_source_columns else \" *\" }}\r\n\r\n    FROM {{ source_relation }}\r\n    {%- set last_cte = \"source_data\" %}\r\n)\r\n\r\n{%- if automate_dv.is_something(derived_columns) -%},\r\n\r\nderived_columns AS (\r\n\r\n    SELECT\r\n\r\n    {{ automate_dv.derive_columns(source_relation=source_relation, columns=derived_columns) | indent(4) }}\r\n\r\n    FROM {{ last_cte }}\r\n    {%- set last_cte = \"derived_columns\" -%}\r\n    {%- set final_columns_to_select = final_columns_to_select + derived_column_names %}\r\n)\r\n{%- endif -%}\r\n\r\n{% if automate_dv.is_something(null_columns) -%},\r\n\r\nnull_columns AS (\r\n\r\n    SELECT\r\n\r\n    {{ automate_dv.print_list(list_to_print=derived_columns_to_select, columns_to_escape=columns_to_escape) }}{{\",\" if automate_dv.is_something(derived_columns_to_select) else \"\"}}\r\n\r\n    {{ automate_dv.null_columns(source_relation=none, columns=null_columns) | indent(4) }}\r\n\r\n    FROM {{ last_cte }}\r\n    {%- set last_cte = \"null_columns\" -%}\r\n    {%- set final_columns_to_select = final_columns_to_select + null_column_names %}\r\n)\r\n{%- endif -%}\r\n\r\n\r\n{% if automate_dv.is_something(hashed_columns) -%},\r\n\r\nhashed_columns AS (\r\n\r\n    SELECT\r\n\r\n    {{ automate_dv.print_list(list_to_print=derived_and_null_columns_to_select, columns_to_escape=columns_to_escape) }},\r\n\r\n    {% set processed_hash_columns = automate_dv.process_hash_column_excludes(hashed_columns, all_source_columns) -%}\r\n    {{- automate_dv.hash_columns(columns=processed_hash_columns, columns_to_escape=columns_to_escape) | indent(4) }}\r\n\r\n    FROM {{ last_cte }}\r\n    {%- set last_cte = \"hashed_columns\" -%}\r\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\r\n)\r\n{%- endif -%}\r\n\r\n{% if automate_dv.is_something(ranked_columns) -%},\r\n\r\nranked_columns AS (\r\n\r\n    SELECT *,\r\n\r\n    {{ automate_dv.rank_columns(columns=ranked_columns) | indent(4) if automate_dv.is_something(ranked_columns) }}\r\n\r\n    FROM {{ last_cte }}\r\n    {%- set last_cte = \"ranked_columns\" -%}\r\n    {%- set final_columns_to_select = final_columns_to_select + ranked_column_names %}\r\n)\r\n{%- endif -%}\r\n\r\n,\r\n\r\ncolumns_to_select AS (\r\n\r\n    SELECT\r\n\r\n    {{ automate_dv.print_list(list_to_print=final_columns_to_select | unique | list, columns_to_escape=columns_to_escape) }}\r\n\r\n    FROM {{ last_cte }}\r\n)\r\n\r\nSELECT * FROM columns_to_select\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.source_columns", "macro.automate_dv.process_columns_to_escape", "macro.automate_dv.extract_column_names", "macro.automate_dv.extract_null_column_names", "macro.automate_dv.process_columns_to_select", "macro.automate_dv.is_nothing", "macro.automate_dv.print_list", "macro.automate_dv.is_something", "macro.automate_dv.derive_columns", "macro.automate_dv.null_columns", "macro.automate_dv.process_hash_column_excludes", "macro.automate_dv.hash_columns", "macro.automate_dv.rank_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5220325, "supported_languages": null}, "macro.automate_dv.as_of_date_window": {"name": "as_of_date_window", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\as_of_date_window.sql", "original_file_path": "macros\\supporting\\as_of_date_window.sql", "unique_id": "macro.automate_dv.as_of_date_window", "macro_sql": "\r\n\r\n{%- macro as_of_date_window(src_pk, src_ldts, stage_tables_ldts, source_model) -%}\r\n\r\nlast_safe_load_datetime AS (\r\n    SELECT MIN(LOAD_DATETIME) AS LAST_SAFE_LOAD_DATETIME\r\n    FROM (\r\n\r\n        {% for stg in stage_tables_ldts -%}\r\n            {%- set stage_ldts = stage_tables_ldts[stg] -%}\r\n            SELECT MIN({{ stage_ldts }}) AS LOAD_DATETIME FROM {{ ref(stg) }}\r\n            {% if not loop.last %} UNION ALL {% endif %}\r\n        {% endfor -%}\r\n\r\n    ) AS l\r\n),\r\n\r\nas_of_grain_old_entries AS (\r\n    SELECT DISTINCT AS_OF_DATE\r\n    FROM {{ this }}\r\n),\r\n\r\nas_of_grain_lost_entries AS (\r\n    SELECT a.AS_OF_DATE\r\n    FROM as_of_grain_old_entries AS a\r\n    LEFT OUTER JOIN as_of_dates AS b\r\n        ON a.AS_OF_DATE = b.AS_OF_DATE\r\n    WHERE b.AS_OF_DATE IS NULL\r\n),\r\n\r\nas_of_grain_new_entries AS (\r\n    SELECT a.AS_OF_DATE\r\n    FROM as_of_dates AS a\r\n    LEFT OUTER JOIN as_of_grain_old_entries AS b\r\n        ON a.AS_OF_DATE = b.AS_OF_DATE\r\n    WHERE b.AS_OF_DATE IS NULL\r\n),\r\n\r\nmin_date AS (\r\n    SELECT MIN(AS_OF_DATE) AS MIN_DATE\r\n    FROM as_of_dates\r\n),\r\n\r\nbackfill_as_of AS (\r\n    SELECT AS_OF_DATE\r\n    FROM as_of_dates AS a\r\n\r\n    {% if target.type == \"bigquery\" -%}\r\n    INNER JOIN last_safe_load_datetime as l\r\n    ON a.AS_OF_DATE < l.LAST_SAFE_LOAD_DATETIME\r\n    {% else %}\r\n    WHERE a.AS_OF_DATE < (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\r\n    {%- endif %}\r\n),\r\n\r\nnew_rows_pks AS (\r\n    SELECT {{ automate_dv.prefix([src_pk], 'h') }}\r\n    FROM {{ source_model }} AS h\r\n\r\n    {% if target.type == \"bigquery\" -%}\r\n    INNER JOIN last_safe_load_datetime as l\r\n    ON h.{{ src_ldts }} >= l.LAST_SAFE_LOAD_DATETIME\r\n    {% else %}\r\n    WHERE h.{{ src_ldts }} >= (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\r\n    {%- endif %}\r\n),\r\n\r\nnew_rows_as_of AS (\r\n    SELECT AS_OF_DATE\r\n    FROM as_of_dates AS a\r\n    {% if target.type == \"bigquery\" -%}\r\n    INNER JOIN last_safe_load_datetime as l\r\n    ON a.AS_OF_DATE >= l.LAST_SAFE_LOAD_DATETIME\r\n    UNION DISTINCT\r\n    {% else %}\r\n    WHERE a.AS_OF_DATE >= (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\r\n    UNION\r\n    {%- endif %}\r\n    SELECT as_of_date\r\n    FROM as_of_grain_new_entries\r\n),\r\n\r\noverlap_pks AS (\r\n    SELECT a.*\r\n    FROM {{ this }} AS a\r\n    INNER JOIN {{ source_model }} as b\r\n        ON {{ automate_dv.multikey(src_pk, prefix=['a','b'], condition='=') }}\r\n    {% if target.type == \"bigquery\" -%}\r\n    INNER JOIN min_date\r\n    ON 1 = 1\r\n    INNER JOIN last_safe_load_datetime\r\n    ON 1 = 1\r\n\tLEFT OUTER JOIN as_of_grain_lost_entries\r\n\tON a.AS_OF_DATE = as_of_grain_lost_entries.AS_OF_DATE\r\n    WHERE a.AS_OF_DATE >= min_date.MIN_DATE\r\n        AND a.AS_OF_DATE < last_safe_load_datetime.LAST_SAFE_LOAD_DATETIME\r\n\t\tAND as_of_grain_lost_entries.AS_OF_DATE IS NULL\r\n    {% else %}\r\n    WHERE a.AS_OF_DATE >= (SELECT MIN_DATE FROM min_date)\r\n        AND a.AS_OF_DATE < (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\r\n        AND a.AS_OF_DATE NOT IN (SELECT AS_OF_DATE FROM as_of_grain_lost_entries)\r\n    {%- endif %}\r\n),\r\n\r\noverlap_as_of AS (\r\n    SELECT p.AS_OF_DATE\r\n    FROM as_of_dates AS p\r\n    {% if target.type == \"bigquery\" -%}\r\n    INNER JOIN min_date\r\n    ON 1 = 1\r\n    INNER JOIN last_safe_load_datetime\r\n    ON 1 = 1\r\n\tLEFT OUTER JOIN as_of_grain_lost_entries\r\n\tON p.AS_OF_DATE = as_of_grain_lost_entries.AS_OF_DATE\r\n    WHERE p.AS_OF_DATE >= min_date.MIN_DATE\r\n        AND p.AS_OF_DATE < last_safe_load_datetime.LAST_SAFE_LOAD_DATETIME\r\n\t\tAND as_of_grain_lost_entries.AS_OF_DATE IS NULL\r\n    {% else %}\r\n    WHERE p.AS_OF_DATE >= (SELECT MIN_DATE FROM min_date)\r\n        AND p.AS_OF_DATE < (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\r\n        AND p.AS_OF_DATE NOT IN (SELECT AS_OF_DATE FROM as_of_grain_lost_entries)\r\n    {% endif %}\r\n)\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.prefix", "macro.automate_dv.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.527032, "supported_languages": null}, "macro.automate_dv.bridge_overlap_and_new_rows": {"name": "bridge_overlap_and_new_rows", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\bridge_shared.sql", "original_file_path": "macros\\supporting\\bridge_shared.sql", "unique_id": "macro.automate_dv.bridge_overlap_and_new_rows", "macro_sql": "\r\n\r\n{%- macro bridge_overlap_and_new_rows(src_pk, bridge_walk, source_model, new_as_of_dates_cte) -%}\r\n\r\nSELECT\r\n    {{ automate_dv.prefix([src_pk], 'a') }},\r\n    b.AS_OF_DATE,\r\n    {%- for bridge_step in bridge_walk.keys() -%}\r\n        {%- set link_table = bridge_walk[bridge_step]['link_table'] -%}\r\n        {%- set eff_sat_table = bridge_walk[bridge_step]['eff_sat_table'] -%}\r\n\r\n        {%- set link_pk = bridge_walk[bridge_step]['link_pk'] -%}\r\n\r\n        {%- set bridge_link_pk = bridge_walk[bridge_step]['bridge_link_pk'] -%}\r\n        {%- set bridge_end_date = bridge_walk[bridge_step]['bridge_end_date'] -%}\r\n        {%- set bridge_load_date = bridge_walk[bridge_step]['bridge_load_date'] -%}\r\n\r\n        {%- set eff_sat_end_date = bridge_walk[bridge_step]['eff_sat_end_date'] -%}\r\n        {%- set eff_sat_load_date = bridge_walk[bridge_step]['eff_sat_load_date'] %}\r\n\r\n        {{- '\\n   ' }} {{ link_table | lower }}.{{ link_pk }} AS {{ bridge_link_pk }},\r\n        {{- '\\n   ' }} {{ eff_sat_table | lower }}.{{ eff_sat_end_date }} AS {{ bridge_end_date }},\r\n        {{- '\\n   ' }} {{ eff_sat_table | lower }}.{{ eff_sat_load_date }} AS {{ bridge_load_date }}\r\n\r\n        {%- if not loop.last %}, {%- endif -%}\r\n\r\n    {% endfor %}\r\n\r\n    FROM {{ source_model }} AS a\r\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\r\n        ON (1=1)\r\n\r\n    {%- set loop_vars = namespace(last_link = '', last_link_fk = '') %}\r\n    {%- for bridge_step in bridge_walk.keys() -%}\r\n\r\n        {%- set current_link = bridge_walk[bridge_step]['link_table'] -%}\r\n        {%- set current_eff_sat = bridge_walk[bridge_step]['eff_sat_table'] -%}\r\n\r\n        {%- set link_pk = bridge_walk[bridge_step]['link_pk'] -%}\r\n        {%- set link_fk1 = bridge_walk[bridge_step]['link_fk1'] -%}\r\n        {%- set link_fk2 = bridge_walk[bridge_step]['link_fk2'] -%}\r\n\r\n        {%- set eff_sat_pk = bridge_walk[bridge_step]['eff_sat_pk'] -%}\r\n        {%- set eff_sat_load_date = bridge_walk[bridge_step]['eff_sat_load_date'] -%}\r\n\r\n    {%- if loop.first %}\r\n    LEFT JOIN {{ ref(current_link) }} AS {{ current_link | lower }}\r\n        ON {{ automate_dv.multikey(src_pk, prefix=['a', current_link | lower], condition='=') }}\r\n    {%- else %}\r\n    LEFT JOIN {{ ref(current_link) }} AS {{ current_link | lower }}\r\n        ON {{ loop_vars.last_link }}.{{ loop_vars.last_link_fk2 }} = {{ current_link | lower }}.{{ link_fk1 }}\r\n    {%- endif %}\r\n    INNER JOIN {{ ref(current_eff_sat) }} AS {{ current_eff_sat | lower }}\r\n        ON {{ current_eff_sat | lower }}.{{ eff_sat_pk }} = {{ current_link | lower }}.{{ link_pk }}\r\n        AND {{ current_eff_sat | lower }}.{{ eff_sat_load_date }} <= b.AS_OF_DATE\r\n        {%- set loop_vars.last_link = current_link | lower -%}\r\n        {%- set loop_vars.last_link_fk2 = link_fk2 -%}\r\n    {% endfor %}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.prefix", "macro.automate_dv.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5340343, "supported_languages": null}, "macro.automate_dv.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\get_query_results_as_dict.sql", "original_file_path": "macros\\supporting\\get_query_results_as_dict.sql", "unique_id": "macro.automate_dv.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\r\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'automate_dv')(query)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.536036, "supported_languages": null}, "macro.automate_dv.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\get_query_results_as_dict.sql", "original_file_path": "macros\\supporting\\get_query_results_as_dict.sql", "unique_id": "macro.automate_dv.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\r\n    {%- set query_results = dbt_utils.get_query_results_as_dict(query) -%}\r\n    {%- set query_results_processed = {} -%}\r\n\r\n    {% for k, v in query_results.items() %}\r\n        {% do query_results_processed.update({k.upper(): v}) %}\r\n    {% endfor %}\r\n\r\n    {{ return(query_results_processed) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5370343, "supported_languages": null}, "macro.automate_dv.hash": {"name": "hash", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash.sql", "original_file_path": "macros\\supporting\\hash.sql", "unique_id": "macro.automate_dv.hash", "macro_sql": "\r\n\r\n{%- macro hash(columns=none, alias=none, is_hashdiff=false, columns_to_escape=none) -%}\r\n\r\n    {%- if is_hashdiff is none -%}\r\n        {%- set is_hashdiff = false -%}\r\n    {%- endif -%}\r\n\r\n    {{- adapter.dispatch('hash', 'automate_dv')(columns=columns, alias=alias,\r\n                                             is_hashdiff=is_hashdiff, columns_to_escape=columns_to_escape) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.fabric__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5410285, "supported_languages": null}, "macro.automate_dv.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash.sql", "original_file_path": "macros\\supporting\\hash.sql", "unique_id": "macro.automate_dv.default__hash", "macro_sql": "\r\n\r\n{%- macro default__hash(columns, alias, is_hashdiff, columns_to_escape) -%}\r\n\r\n{%- set hash = var('hash', 'md5') -%}\r\n{%- set concat_string = var('concat_string', '||') -%}\r\n{%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\r\n\r\n{%- set hash_alg = automate_dv.select_hash_alg(hash) -%}\r\n\r\n{%- set standardise = automate_dv.standard_column_wrapper() %}\r\n\r\n{#- Alpha sort columns before hashing if a hashdiff -#}\r\n{%- if is_hashdiff and automate_dv.is_list(columns) -%}\r\n    {%- set columns = columns|sort -%}\r\n{%- endif -%}\r\n\r\n{#- If single column to hash -#}\r\n{%- if columns is string -%}\r\n    {%- set column_str = automate_dv.as_constant(columns) -%}\r\n\r\n    {%- if automate_dv.is_something(columns_to_escape) -%}\r\n        {%- if column_str in columns_to_escape -%}\r\n            {%- set column_str = automate_dv.escape_column_name(column_str) -%}\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n\r\n    {{ hash_alg | replace('[HASH_STRING_PLACEHOLDER]', standardise | replace('[EXPRESSION]', column_str)) }} AS {{ alias | indent(4) }}\r\n\r\n{#- Else a list of columns to hash -#}\r\n{%- else -%}\r\n\r\n    {%- set all_null = [] -%}\r\n    {%- set processed_columns = [] -%}\r\n\r\n    {%- for column in columns -%}\r\n        {%- if automate_dv.is_something(columns_to_escape) -%}\r\n            {%- if column in columns_to_escape -%}\r\n                {%- set column = automate_dv.escape_column_name(column) -%}\r\n            {%- endif -%}\r\n        {%- endif -%}\r\n\r\n        {%- set column_str = automate_dv.as_constant(column) -%}\r\n\r\n        {%- set column_expression = automate_dv.null_expression(column_str) -%}\r\n\r\n        {%- do all_null.append(null_placeholder_string) -%}\r\n        {%- do processed_columns.append(column_expression) -%}\r\n\r\n    {% endfor -%}\r\n\r\n    {% if not is_hashdiff -%}\r\n\r\n        {%- set concat_sql -%}\r\n        NULLIF({{ automate_dv.concat_ws(processed_columns, separator=concat_string) -}} {{ ', ' -}}\r\n               '{{ all_null | join(concat_string) }}')\r\n        {%- endset -%}\r\n\r\n        {%- set hashed_column -%}\r\n        {{ hash_alg | replace('[HASH_STRING_PLACEHOLDER]', concat_sql) }} AS {{ alias }}\r\n        {%- endset -%}\r\n\r\n    {%- else -%}\r\n        {% if automate_dv.is_list(processed_columns) and processed_columns | length > 1 %}\r\n            {%- set hashed_column -%}\r\n                {{ hash_alg | replace('[HASH_STRING_PLACEHOLDER]', automate_dv.concat_ws(processed_columns, separator=concat_string)) }} AS {{ alias }}\r\n            {%- endset -%}\r\n        {%- else -%}\r\n            {%- set hashed_column -%}\r\n                {{ hash_alg | replace('[HASH_STRING_PLACEHOLDER]', processed_columns[0]) }} AS {{ alias }}\r\n            {%- endset -%}\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n\r\n    {{ hashed_column }}\r\n\r\n{%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.select_hash_alg", "macro.automate_dv.standard_column_wrapper", "macro.automate_dv.is_list", "macro.automate_dv.as_constant", "macro.automate_dv.is_something", "macro.automate_dv.escape_column_name", "macro.automate_dv.null_expression", "macro.automate_dv.concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5460289, "supported_languages": null}, "macro.automate_dv.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash.sql", "original_file_path": "macros\\supporting\\hash.sql", "unique_id": "macro.automate_dv.bigquery__hash", "macro_sql": "{%- macro bigquery__hash(columns, alias, is_hashdiff, columns_to_escape) -%}\r\n\r\n    {{ automate_dv.default__hash(columns=columns, alias=alias, is_hashdiff=is_hashdiff, columns_to_escape=columns_to_escape) }}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5460289, "supported_languages": null}, "macro.automate_dv.fabric__hash": {"name": "fabric__hash", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash.sql", "original_file_path": "macros\\supporting\\hash.sql", "unique_id": "macro.automate_dv.fabric__hash", "macro_sql": "{%- macro fabric__hash(columns, alias, is_hashdiff, columns_to_escape) -%}\r\n\r\n    {{ automate_dv.default__hash(columns=columns, alias=alias, is_hashdiff=is_hashdiff, columns_to_escape=columns_to_escape) }}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.547029, "supported_languages": null}, "macro.automate_dv.postgres__hash": {"name": "postgres__hash", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash.sql", "original_file_path": "macros\\supporting\\hash.sql", "unique_id": "macro.automate_dv.postgres__hash", "macro_sql": "{%- macro postgres__hash(columns, alias, is_hashdiff, columns_to_escape) -%}\r\n\r\n    {{ automate_dv.default__hash(columns=columns, alias=alias, is_hashdiff=is_hashdiff, columns_to_escape=columns_to_escape) }}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.547029, "supported_languages": null}, "macro.automate_dv.databricks__hash": {"name": "databricks__hash", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash.sql", "original_file_path": "macros\\supporting\\hash.sql", "unique_id": "macro.automate_dv.databricks__hash", "macro_sql": "{%- macro databricks__hash(columns, alias, is_hashdiff, columns_to_escape) -%}\r\n\r\n    {{ automate_dv.default__hash(columns=columns, alias=alias, is_hashdiff=is_hashdiff, columns_to_escape=columns_to_escape) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.548054, "supported_languages": null}, "macro.automate_dv.max_datetime": {"name": "max_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\max_datetime.sql", "original_file_path": "macros\\supporting\\max_datetime.sql", "unique_id": "macro.automate_dv.max_datetime", "macro_sql": "\r\n\r\n{%- macro max_datetime() -%}\r\n\r\n    {%- do return(adapter.dispatch('max_datetime', 'automate_dv')()) -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.fabric__max_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.548054, "supported_languages": null}, "macro.automate_dv.default__max_datetime": {"name": "default__max_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\max_datetime.sql", "original_file_path": "macros\\supporting\\max_datetime.sql", "unique_id": "macro.automate_dv.default__max_datetime", "macro_sql": "\r\n\r\n{%- macro default__max_datetime() %}\r\n\r\n    {%- do return(var('max_datetime', '9999-12-31 23:59:59.999999')) -%}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5490294, "supported_languages": null}, "macro.automate_dv.fabric__max_datetime": {"name": "fabric__max_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\max_datetime.sql", "original_file_path": "macros\\supporting\\max_datetime.sql", "unique_id": "macro.automate_dv.fabric__max_datetime", "macro_sql": "{%- macro fabric__max_datetime() -%}\r\n\r\n    {%- do return(var('max_datetime', '9999-12-31 23:59:59.9999999')) -%}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5490294, "supported_languages": null}, "macro.automate_dv.bigquery__max_datetime": {"name": "bigquery__max_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\max_datetime.sql", "original_file_path": "macros\\supporting\\max_datetime.sql", "unique_id": "macro.automate_dv.bigquery__max_datetime", "macro_sql": "{%- macro bigquery__max_datetime() -%}\r\n\r\n    {%- do return(var('max_datetime', '9999-12-31 23:59:59.999999')) -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5490294, "supported_languages": null}, "macro.automate_dv.prefix": {"name": "prefix", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\prefix.sql", "original_file_path": "macros\\supporting\\prefix.sql", "unique_id": "macro.automate_dv.prefix", "macro_sql": "\r\n\r\n{%- macro prefix(columns, prefix_str, alias_target) -%}\r\n\r\n    {{- adapter.dispatch('prefix', 'automate_dv')(columns=columns,\r\n                                               prefix_str=prefix_str,\r\n                                               alias_target=alias_target) -}}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.default__prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5530326, "supported_languages": null}, "macro.automate_dv.default__prefix": {"name": "default__prefix", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\prefix.sql", "original_file_path": "macros\\supporting\\prefix.sql", "unique_id": "macro.automate_dv.default__prefix", "macro_sql": "{%- macro default__prefix(columns=none, prefix_str=none, alias_target='source') -%}\r\n\r\n    {%- set processed_columns = [] -%}\r\n\r\n    {%- if columns and prefix_str -%}\r\n\r\n        {%- for col in columns -%}\r\n\r\n            {%- if col | lower not in processed_columns | map('lower') | list -%}\r\n\r\n                {%- if col is mapping -%}\r\n\r\n                    {%- if alias_target == 'source' -%}\r\n\r\n                        {{- automate_dv.prefix([col['source_column']], prefix_str) -}}\r\n\r\n                        {%- do processed_columns.append(col['source_column']) -%}\r\n\r\n                    {%- elif alias_target == 'target' -%}\r\n\r\n                        {{- automate_dv.prefix([col['alias']], prefix_str) -}}\r\n\r\n                         {%- do processed_columns.append(col['alias']) -%}\r\n\r\n                    {%- else -%}\r\n\r\n                        {{- automate_dv.prefix([col['source_column']], prefix_str) -}}\r\n\r\n                        {%- do processed_columns.append(col['source_column']) -%}\r\n\r\n                    {%- endif -%}\r\n\r\n                    {%- if not loop.last -%} , {% endif %}\r\n\r\n                {%- else -%}\r\n\r\n                    {%- if col is iterable and col is not string -%}\r\n\r\n                        {{- automate_dv.prefix(col, prefix_str) -}}\r\n\r\n                        {%- do processed_columns.append(col) -%}\r\n\r\n                    {%- elif col is not none -%}\r\n\r\n                        {{- prefix_str}}.{{col.strip() -}}\r\n\r\n                        {%- do processed_columns.append(col) -%}\r\n                    {% else %}\r\n\r\n                        {%- if execute -%}\r\n                            {{- exceptions.raise_compiler_error(\"Unexpected or missing configuration for '\" ~ this ~ \"' Unable to prefix columns.\") -}}\r\n                        {%- endif -%}\r\n                    {%- endif -%}\r\n\r\n                    {{- ', ' if not loop.last -}}\r\n\r\n                {%- endif -%}\r\n            {%- endif -%}\r\n\r\n        {%- endfor -%}\r\n\r\n    {%- else -%}\r\n\r\n        {%- if execute -%}\r\n            {{- exceptions.raise_compiler_error(\"Invalid parameters provided to prefix macro. Expected: (columns [list/string], prefix_str [string]) got: (\" ~ columns ~ \", \" ~ prefix_str ~ \")\") -}}\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5570323, "supported_languages": null}, "macro.automate_dv.cast_binary": {"name": "cast_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\casting\\cast_binary.sql", "original_file_path": "macros\\supporting\\casting\\cast_binary.sql", "unique_id": "macro.automate_dv.cast_binary", "macro_sql": "\r\n\r\n{%- macro cast_binary(column_str, alias=none, quote=true) -%}\r\n    {{ return(adapter.dispatch('cast_binary', 'automate_dv')(column_str=column_str, alias=alias, quote=quote)) }}\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.fabric__cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5580323, "supported_languages": null}, "macro.automate_dv.default__cast_binary": {"name": "default__cast_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\casting\\cast_binary.sql", "original_file_path": "macros\\supporting\\casting\\cast_binary.sql", "unique_id": "macro.automate_dv.default__cast_binary", "macro_sql": "{%- macro default__cast_binary(column_str, alias=none, quote=true) -%}\r\n\r\n    {%- if quote -%}\r\n        CAST('{{ column_str }}' AS {{ automate_dv.type_binary() }})\r\n    {%- else -%}\r\n        CAST({{ column_str }} AS {{ automate_dv.type_binary() }})\r\n    {%- endif -%}\r\n\r\n    {%- if alias %} AS {{ alias }} {%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.type_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5590453, "supported_languages": null}, "macro.automate_dv.fabric__cast_binary": {"name": "fabric__cast_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\casting\\cast_binary.sql", "original_file_path": "macros\\supporting\\casting\\cast_binary.sql", "unique_id": "macro.automate_dv.fabric__cast_binary", "macro_sql": "{%- macro fabric__cast_binary(column_str, alias=none, quote=true) -%}\r\n\r\n    {%- if quote -%}\r\n        CONVERT({{ automate_dv.type_binary() }}, '{{ column_str }}', 2)\r\n    {%- else -%}\r\n        CONVERT({{ automate_dv.type_binary() }}, {{ column_str }}, 2)\r\n    {%- endif -%}\r\n\r\n    {% if alias %} AS {{ alias }} {%- endif %}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.type_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5590453, "supported_languages": null}, "macro.automate_dv.bigquery__cast_binary": {"name": "bigquery__cast_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\casting\\cast_binary.sql", "original_file_path": "macros\\supporting\\casting\\cast_binary.sql", "unique_id": "macro.automate_dv.bigquery__cast_binary", "macro_sql": "{%- macro bigquery__cast_binary(column_str, alias=none, quote=true) -%}\r\n\r\n    {{ automate_dv.default__cast_binary(column_str=column_str, alias=alias, quote=quote) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5600324, "supported_languages": null}, "macro.automate_dv.cast_date": {"name": "cast_date", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\casting\\cast_date.sql", "original_file_path": "macros\\supporting\\casting\\cast_date.sql", "unique_id": "macro.automate_dv.cast_date", "macro_sql": "\r\n\r\n{%- macro cast_date(column_str, as_string=false, datetime=false, alias=none, date_type=none) -%}\r\n    {%- if datetime -%}\r\n        {{- automate_dv.cast_datetime(column_str=column_str, as_string=as_string, alias=alias, date_type=date_type) -}}\r\n    {%- else -%}\r\n        {{ return(adapter.dispatch('cast_date', 'automate_dv')(column_str=column_str, as_string=as_string, alias=alias)) }}\r\n    {%- endif -%}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.cast_datetime", "macro.automate_dv.fabric__cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.562034, "supported_languages": null}, "macro.automate_dv.snowflake__cast_date": {"name": "snowflake__cast_date", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\casting\\cast_date.sql", "original_file_path": "macros\\supporting\\casting\\cast_date.sql", "unique_id": "macro.automate_dv.snowflake__cast_date", "macro_sql": "{%- macro snowflake__cast_date(column_str, as_string=false, alias=none) -%}\r\n\r\n    {%- if not as_string -%}\r\n        TO_DATE({{ column_str }})\r\n    {%- else -%}\r\n        TO_DATE('{{ column_str }}')\r\n    {%- endif -%}\r\n\r\n    {%- if alias %} AS {{ alias }} {%- endif %}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5630474, "supported_languages": null}, "macro.automate_dv.fabric__cast_date": {"name": "fabric__cast_date", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\casting\\cast_date.sql", "original_file_path": "macros\\supporting\\casting\\cast_date.sql", "unique_id": "macro.automate_dv.fabric__cast_date", "macro_sql": "{%- macro fabric__cast_date(column_str, as_string=false, alias=none) -%}\r\n\r\n    {%- if not as_string -%}\r\n        CONVERT(DATE, {{ column_str }})\r\n    {%- else -%}\r\n        CONVERT(DATE, '{{ column_str }}')\r\n    {%- endif -%}\r\n\r\n    {%- if alias %} AS {{ alias }} {%- endif %}\r\n\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5630474, "supported_languages": null}, "macro.automate_dv.bigquery__cast_date": {"name": "bigquery__cast_date", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\casting\\cast_date.sql", "original_file_path": "macros\\supporting\\casting\\cast_date.sql", "unique_id": "macro.automate_dv.bigquery__cast_date", "macro_sql": "{%- macro bigquery__cast_date(column_str, as_string=false, alias=none) -%}\r\n\r\n    {%- if not as_string -%}\r\n        DATE({{ column_str }})\r\n    {%- else -%}\r\n        DATE('{{ column_str }}')\r\n    {%- endif -%}\r\n\r\n    {%- if alias %} AS {{ alias }} {%- endif %}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.564045, "supported_languages": null}, "macro.automate_dv.databricks__cast_date": {"name": "databricks__cast_date", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\casting\\cast_date.sql", "original_file_path": "macros\\supporting\\casting\\cast_date.sql", "unique_id": "macro.automate_dv.databricks__cast_date", "macro_sql": "{%- macro databricks__cast_date(column_str, as_string=false, alias=none) -%}\r\n\r\n    {{ automate_dv.snowflake__cast_date(column_str=column_str, as_string=as_string, alias=alias)}}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.snowflake__cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.564045, "supported_languages": null}, "macro.automate_dv.postgres__cast_date": {"name": "postgres__cast_date", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\casting\\cast_date.sql", "original_file_path": "macros\\supporting\\casting\\cast_date.sql", "unique_id": "macro.automate_dv.postgres__cast_date", "macro_sql": "{%- macro postgres__cast_date(column_str, as_string=false, alias=none) -%}\r\n\r\n    {%- if not as_string -%}\r\n        TO_DATE({{ column_str }})\r\n    {%- else -%}\r\n        TO_DATE('{{ column_str }}', 'YYY-MM-DD')\r\n    {%- endif -%}\r\n\r\n    {%- if alias %} AS {{ alias }} {%- endif %}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5650327, "supported_languages": null}, "macro.automate_dv.cast_datetime": {"name": "cast_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\casting\\cast_datetime.sql", "original_file_path": "macros\\supporting\\casting\\cast_datetime.sql", "unique_id": "macro.automate_dv.cast_datetime", "macro_sql": "\r\n\r\n{%- macro cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\r\n\r\n    {%- if as_string -%}\r\n        {%- set column_str -%} '{{ column_str }}' {%- endset -%}\r\n    {%- endif -%}\r\n\r\n    {%- set date_type = date_type | lower -%}\r\n\r\n    {{ return(adapter.dispatch('cast_datetime', 'automate_dv')(column_str=column_str, as_string=as_string, alias=alias, date_type=date_type)) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.fabric__cast_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5670326, "supported_languages": null}, "macro.automate_dv.snowflake__cast_datetime": {"name": "snowflake__cast_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\casting\\cast_datetime.sql", "original_file_path": "macros\\supporting\\casting\\cast_datetime.sql", "unique_id": "macro.automate_dv.snowflake__cast_datetime", "macro_sql": "{%- macro snowflake__cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\r\n\r\n    {%- if date_type == 'timestamp_tz' -%}\r\n        TO_TIMESTAMP_TZ({{ column_str }})\r\n    {%- elif date_type == 'timestamp_ltz' -%}\r\n        TO_TIMESTAMP_LTZ({{ column_str }})\r\n    {%- elif date_type == 'timestamp_ntz' -%}\r\n        TO_TIMESTAMP_NTZ({{ column_str }})\r\n    {%- else -%}\r\n        TO_TIMESTAMP({{ column_str }})\r\n    {%- endif -%}\r\n\r\n    {%- if alias %} AS {{ alias }} {%- endif %}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5690377, "supported_languages": null}, "macro.automate_dv.fabric__cast_datetime": {"name": "fabric__cast_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\casting\\cast_datetime.sql", "original_file_path": "macros\\supporting\\casting\\cast_datetime.sql", "unique_id": "macro.automate_dv.fabric__cast_datetime", "macro_sql": "{%- macro fabric__cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\r\n\r\n    CONVERT(DATETIME2(6), {{ column_str }})\r\n\r\n    {%- if alias %} AS {{ alias }} {%- endif %}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5700386, "supported_languages": null}, "macro.automate_dv.bigquery__cast_datetime": {"name": "bigquery__cast_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\casting\\cast_datetime.sql", "original_file_path": "macros\\supporting\\casting\\cast_datetime.sql", "unique_id": "macro.automate_dv.bigquery__cast_datetime", "macro_sql": "{%- macro bigquery__cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\r\n\r\n    {%- if date_type == 'timestamp' -%}\r\n        PARSE_TIMESTAMP('%F %H:%M:%E6S', {{ column_str }})\r\n    {%- else -%}\r\n        PARSE_DATETIME('%F %H:%M:%E6S', {{ column_str }})\r\n    {%- endif -%}\r\n\r\n    {%- if alias %} AS {{ alias }} {%- endif %}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5700386, "supported_languages": null}, "macro.automate_dv.databricks__cast_datetime": {"name": "databricks__cast_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\casting\\cast_datetime.sql", "original_file_path": "macros\\supporting\\casting\\cast_datetime.sql", "unique_id": "macro.automate_dv.databricks__cast_datetime", "macro_sql": "{%- macro databricks__cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\r\n\r\n    {{ automate_dv.snowflake__cast_datetime(column_str=column_str, as_string=as_string, alias=alias, date_type=date_type)}}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.snowflake__cast_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.571033, "supported_languages": null}, "macro.automate_dv.postgres__cast_datetime": {"name": "postgres__cast_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\casting\\cast_datetime.sql", "original_file_path": "macros\\supporting\\casting\\cast_datetime.sql", "unique_id": "macro.automate_dv.postgres__cast_datetime", "macro_sql": "{%- macro postgres__cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\r\n\r\n    TO_TIMESTAMP({{ column_str }}, 'YYY-MM-DD HH24:MI:SS.MS')\r\n\r\n    {%- if alias %} AS {{ alias }} {%- endif %}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.571033, "supported_languages": null}, "macro.automate_dv.type_binary": {"name": "type_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\data_types\\type_binary.sql", "original_file_path": "macros\\supporting\\data_types\\type_binary.sql", "unique_id": "macro.automate_dv.type_binary", "macro_sql": "\r\n\r\n{%- macro type_binary() -%}\r\n  {{- return(adapter.dispatch('type_binary', 'automate_dv')()) -}}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.fabric__type_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5720322, "supported_languages": null}, "macro.automate_dv.default__type_binary": {"name": "default__type_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\data_types\\type_binary.sql", "original_file_path": "macros\\supporting\\data_types\\type_binary.sql", "unique_id": "macro.automate_dv.default__type_binary", "macro_sql": "{%- macro default__type_binary() -%}\r\n    {%- if var('hash', 'MD5') | lower == 'md5' -%}\r\n        BINARY(16)\r\n    {%- elif var('hash', 'MD5') | lower == 'sha' -%}\r\n        BINARY(32)\r\n    {%- else -%}\r\n        BINARY(16)\r\n    {%- endif -%}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5730321, "supported_languages": null}, "macro.automate_dv.bigquery__type_binary": {"name": "bigquery__type_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\data_types\\type_binary.sql", "original_file_path": "macros\\supporting\\data_types\\type_binary.sql", "unique_id": "macro.automate_dv.bigquery__type_binary", "macro_sql": "{%- macro bigquery__type_binary() -%}\r\n    STRING\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5730321, "supported_languages": null}, "macro.automate_dv.postgres__type_binary": {"name": "postgres__type_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\data_types\\type_binary.sql", "original_file_path": "macros\\supporting\\data_types\\type_binary.sql", "unique_id": "macro.automate_dv.postgres__type_binary", "macro_sql": "{%- macro postgres__type_binary() -%}\r\n    BYTEA\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5730321, "supported_languages": null}, "macro.automate_dv.databricks__type_binary": {"name": "databricks__type_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\data_types\\type_binary.sql", "original_file_path": "macros\\supporting\\data_types\\type_binary.sql", "unique_id": "macro.automate_dv.databricks__type_binary", "macro_sql": "{%- macro databricks__type_binary() -%}\r\n    STRING\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5730321, "supported_languages": null}, "macro.automate_dv.fabric__type_binary": {"name": "fabric__type_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\data_types\\type_binary.sql", "original_file_path": "macros\\supporting\\data_types\\type_binary.sql", "unique_id": "macro.automate_dv.fabric__type_binary", "macro_sql": "{%- macro fabric__type_binary() -%}\r\n    {%- if var('hash', 'MD5') | lower == 'md5' -%}\r\n        CHAR(32)\r\n    {%- elif var('hash', 'MD5') | lower == 'sha' -%}\r\n        CHAR(40)\r\n    {%- else -%}\r\n        CHAR(32)\r\n    {%- endif -%}\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.574032, "supported_languages": null}, "macro.automate_dv.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\data_types\\type_string.sql", "original_file_path": "macros\\supporting\\data_types\\type_string.sql", "unique_id": "macro.automate_dv.type_string", "macro_sql": "\r\n\r\n{%- macro type_string(is_hash=false, char_length=255) -%}\r\n  {{- return(adapter.dispatch('type_string', 'automate_dv')(is_hash=is_hash, char_length=char_length)) -}}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.fabric__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5750322, "supported_languages": null}, "macro.automate_dv.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\data_types\\type_string.sql", "original_file_path": "macros\\supporting\\data_types\\type_string.sql", "unique_id": "macro.automate_dv.default__type_string", "macro_sql": "{%- macro default__type_string(is_hash, char_length) -%}\r\n    VARCHAR\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5750322, "supported_languages": null}, "macro.automate_dv.bigquery__type_string": {"name": "bigquery__type_string", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\data_types\\type_string.sql", "original_file_path": "macros\\supporting\\data_types\\type_string.sql", "unique_id": "macro.automate_dv.bigquery__type_string", "macro_sql": "{%- macro bigquery__type_string(is_hash, char_length) -%}\r\n    STRING\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5750322, "supported_languages": null}, "macro.automate_dv.fabric__type_string": {"name": "fabric__type_string", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\data_types\\type_string.sql", "original_file_path": "macros\\supporting\\data_types\\type_string.sql", "unique_id": "macro.automate_dv.fabric__type_string", "macro_sql": "{%- macro fabric__type_string(is_hash, char_length) -%}\r\n    VARCHAR\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5750322, "supported_languages": null}, "macro.automate_dv.databricks__type_string": {"name": "databricks__type_string", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\data_types\\type_string.sql", "original_file_path": "macros\\supporting\\data_types\\type_string.sql", "unique_id": "macro.automate_dv.databricks__type_string", "macro_sql": "{%- macro databricks__type_string(is_hash=false, char_length=255) -%}\r\n    {%- if is_hash -%}\r\n        {%- if var('hash', 'MD5') | lower == 'md5' -%}\r\n            VARCHAR(16)\r\n        {%- elif var('hash', 'MD5') | lower == 'sha' -%}\r\n            VARCHAR(32)\r\n        {%- endif -%}\r\n    {%- else -%}\r\n        VARCHAR({{ char_length }})\r\n    {%- endif -%}\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5760322, "supported_languages": null}, "macro.automate_dv.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\data_types\\type_timestamp.sql", "original_file_path": "macros\\supporting\\data_types\\type_timestamp.sql", "unique_id": "macro.automate_dv.type_timestamp", "macro_sql": "\r\n\r\n{%- macro type_timestamp() -%}\r\n  {{- return(adapter.dispatch('type_timestamp', 'automate_dv')()) -}}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.fabric__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5760322, "supported_languages": null}, "macro.automate_dv.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\data_types\\type_timestamp.sql", "original_file_path": "macros\\supporting\\data_types\\type_timestamp.sql", "unique_id": "macro.automate_dv.default__type_timestamp", "macro_sql": "{%- macro default__type_timestamp() -%}\r\n    TIMESTAMP_NTZ\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.577032, "supported_languages": null}, "macro.automate_dv.fabric__type_timestamp": {"name": "fabric__type_timestamp", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\data_types\\type_timestamp.sql", "original_file_path": "macros\\supporting\\data_types\\type_timestamp.sql", "unique_id": "macro.automate_dv.fabric__type_timestamp", "macro_sql": "{%- macro fabric__type_timestamp() -%}\r\n    DATETIME2\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.577032, "supported_languages": null}, "macro.automate_dv.binary_ghost": {"name": "binary_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\ghost_records\\binary_ghost.sql", "original_file_path": "macros\\supporting\\ghost_records\\binary_ghost.sql", "unique_id": "macro.automate_dv.binary_ghost", "macro_sql": "\r\n\r\n{%- macro binary_ghost(alias, hash) -%}\r\n    {{ adapter.dispatch('binary_ghost', 'automate_dv')(alias=alias, hash=hash) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.fabric__binary_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.578032, "supported_languages": null}, "macro.automate_dv.default__binary_ghost": {"name": "default__binary_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\ghost_records\\binary_ghost.sql", "original_file_path": "macros\\supporting\\ghost_records\\binary_ghost.sql", "unique_id": "macro.automate_dv.default__binary_ghost", "macro_sql": "{%- macro default__binary_ghost(alias, hash) -%}\r\n\r\n    {%- if hash | lower == 'md5' -%}\r\n        {{ automate_dv.cast_binary(column_str=modules.itertools.repeat('0', 32) | join (''), alias=alias, quote=true) }}\r\n    {%- elif hash | lower == 'sha' -%}\r\n        {{ automate_dv.cast_binary(column_str=modules.itertools.repeat('0', 64) | join (''), alias=alias, quote=true) }}\r\n    {%- else -%}\r\n        {{ automate_dv.cast_binary(column_str=modules.itertools.repeat('0', 32) | join (''), alias=alias, quote=true) }}\r\n    {%- endif -%}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5790324, "supported_languages": null}, "macro.automate_dv.fabric__binary_ghost": {"name": "fabric__binary_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\ghost_records\\binary_ghost.sql", "original_file_path": "macros\\supporting\\ghost_records\\binary_ghost.sql", "unique_id": "macro.automate_dv.fabric__binary_ghost", "macro_sql": "{%- macro fabric__binary_ghost(alias, hash) -%}\r\n    {%- if hash | lower == 'md5' -%}\r\n        CAST(REPLICATE('0', 32) AS CHAR(32))\r\n\t{%- elif hash | lower == 'sha' -%}\r\n        CAST(REPLICATE('0', 40) AS CHAR(32))\r\n    {%- else -%}\r\n        CAST(REPLICATE('0', 32) AS CHAR(32))\r\n    {%- endif -%}\r\n\r\n    {%- if alias %} AS {{ alias }} {%- endif -%}\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5800323, "supported_languages": null}, "macro.automate_dv.create_ghost_record": {"name": "create_ghost_record", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\ghost_records\\create_ghost_record.sql", "original_file_path": "macros\\supporting\\ghost_records\\create_ghost_record.sql", "unique_id": "macro.automate_dv.create_ghost_record", "macro_sql": "\r\n\r\n{%- macro create_ghost_record(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- adapter.dispatch('create_ghost_record', 'automate_dv')(src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                                                            src_payload=src_payload, src_extra_columns=src_extra_columns,\r\n                                                            src_eff=src_eff, src_ldts=src_ldts,\r\n                                                            src_source=src_source, source_model=source_model) -}}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.default__create_ghost_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5820312, "supported_languages": null}, "macro.automate_dv.default__create_ghost_record": {"name": "default__create_ghost_record", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\ghost_records\\create_ghost_record.sql", "original_file_path": "macros\\supporting\\ghost_records\\create_ghost_record.sql", "unique_id": "macro.automate_dv.default__create_ghost_record", "macro_sql": "{%- macro default__create_ghost_record(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set hash = var('hash', 'MD5') -%}\r\n{%- set source_str = var('system_record_value', 'AUTOMATE_DV_SYSTEM') -%}\r\n{%- set columns = adapter.get_columns_in_relation(ref(source_model)) -%}\r\n{%- set col_definitions = [] -%}\r\n\r\n{%- set string_columns = [src_payload] -%}\r\n\r\n{%- if src_extra_columns != none -%}\r\n    {%- do string_columns.append(src_extra_columns) -%}\r\n{%- endif -%}\r\n\r\n{%- set string_columns = automate_dv.expand_column_list(string_columns) -%}\r\n\r\n{%- for col in columns -%}\r\n\r\n    {%- set col_name = col.column -%}\r\n\r\n    {%- if ((col_name | lower) == (src_pk | lower)) or ((col_name | lower) == (src_hashdiff | lower)) -%}\r\n        {%- set col_sql = automate_dv.binary_ghost(alias=col_name, hash=hash) -%}\r\n        {%- do col_definitions.append(col_sql) -%}\r\n\r\n    {%- elif automate_dv.is_something(src_hashdiff['source_column'] | default(none)) and ((src_hashdiff['source_column'] | lower) == (col_name | lower)) -%}\r\n        {%- set col_sql = automate_dv.binary_ghost(alias=src_hashdiff['source_column'], hash=hash) -%}\r\n        {%- do col_definitions.append(col_sql) -%}\r\n\r\n    {%- elif ((col_name | lower) == (src_eff | lower)) or ((col_name | lower) == (src_ldts | lower))-%}\r\n        {% set col_sql = automate_dv.date_ghost(date_type = (col.dtype | lower), alias=col_name) -%}\r\n        {%- do col_definitions.append(col_sql) -%}\r\n\r\n    {%- elif (col_name | lower) == (src_source | lower) -%}\r\n        {%- set col_sql -%}\r\n            CAST('{{ source_str }}' AS {{ col.dtype }}) AS {{ src_source }}\r\n        {%- endset -%}\r\n        {%- do col_definitions.append(col_sql) -%}\r\n\r\n    {%- elif (col_name | lower) is in (string_columns | map('lower') | list) -%}\r\n        {% set col_sql = automate_dv.null_ghost(col.dtype, col_name) -%}\r\n        {%- do col_definitions.append(col_sql) -%}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endfor -%}\r\n\r\nSELECT\r\n    {% for col in col_definitions -%}\r\n    {{ col }}\r\n    {%- if not loop.last -%},\r\n    {% endif %}\r\n    {%- endfor -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.binary_ghost", "macro.automate_dv.is_something", "macro.automate_dv.date_ghost", "macro.automate_dv.null_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.588033, "supported_languages": null}, "macro.automate_dv.date_ghost": {"name": "date_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\ghost_records\\date_ghost.sql", "original_file_path": "macros\\supporting\\ghost_records\\date_ghost.sql", "unique_id": "macro.automate_dv.date_ghost", "macro_sql": "\r\n\r\n{%- macro date_ghost(date_type, alias) -%}\r\n    {{ adapter.dispatch('date_ghost', 'automate_dv')(date_type=date_type, alias=alias) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.default__date_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.588033, "supported_languages": null}, "macro.automate_dv.default__date_ghost": {"name": "default__date_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\ghost_records\\date_ghost.sql", "original_file_path": "macros\\supporting\\ghost_records\\date_ghost.sql", "unique_id": "macro.automate_dv.default__date_ghost", "macro_sql": "{%- macro default__date_ghost(date_type, alias=none) -%}\r\n\r\n        {%- if date_type == 'date' -%}\r\n            {{ automate_dv.cast_date('1900-01-01', as_string=true, datetime=false, alias=alias) }}\r\n        {%- else -%}\r\n            {{ automate_dv.cast_date('1900-01-01 00:00:00', as_string=true, datetime=true, alias=alias, date_type=date_type) }}\r\n        {%- endif -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5890326, "supported_languages": null}, "macro.automate_dv.null_ghost": {"name": "null_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\ghost_records\\null_ghost.sql", "original_file_path": "macros\\supporting\\ghost_records\\null_ghost.sql", "unique_id": "macro.automate_dv.null_ghost", "macro_sql": "\r\n\r\n{%- macro null_ghost(datatype, alias) -%}\r\n    {{ adapter.dispatch('null_ghost', 'automate_dv')(datatype=datatype, alias=alias) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.fabric__null_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5900328, "supported_languages": null}, "macro.automate_dv.default__null_ghost": {"name": "default__null_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\ghost_records\\null_ghost.sql", "original_file_path": "macros\\supporting\\ghost_records\\null_ghost.sql", "unique_id": "macro.automate_dv.default__null_ghost", "macro_sql": "{%- macro default__null_ghost(datatype, alias) -%}\r\n    NULL AS {{alias}}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5900328, "supported_languages": null}, "macro.automate_dv.bigquery__null_ghost": {"name": "bigquery__null_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\ghost_records\\null_ghost.sql", "original_file_path": "macros\\supporting\\ghost_records\\null_ghost.sql", "unique_id": "macro.automate_dv.bigquery__null_ghost", "macro_sql": "{% macro bigquery__null_ghost(datatype, alias) -%}\r\n    CAST(NULL AS {{datatype}}) AS {{alias}}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5900328, "supported_languages": null}, "macro.automate_dv.postgres__null_ghost": {"name": "postgres__null_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\ghost_records\\null_ghost.sql", "original_file_path": "macros\\supporting\\ghost_records\\null_ghost.sql", "unique_id": "macro.automate_dv.postgres__null_ghost", "macro_sql": "{%- macro postgres__null_ghost(datatype, alias) -%}\r\n    {{ automate_dv.bigquery__null_ghost(datatype, alias) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.bigquery__null_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5910325, "supported_languages": null}, "macro.automate_dv.fabric__null_ghost": {"name": "fabric__null_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\ghost_records\\null_ghost.sql", "original_file_path": "macros\\supporting\\ghost_records\\null_ghost.sql", "unique_id": "macro.automate_dv.fabric__null_ghost", "macro_sql": "{%- macro fabric__null_ghost(datatype, alias) -%}\r\n    {{ automate_dv.bigquery__null_ghost(datatype, alias) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.bigquery__null_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5910325, "supported_languages": null}, "macro.automate_dv.null_expression": {"name": "null_expression", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash_components\\null_expression.sql", "original_file_path": "macros\\supporting\\hash_components\\null_expression.sql", "unique_id": "macro.automate_dv.null_expression", "macro_sql": "\r\n\r\n{%- macro null_expression(column_str) -%}\r\n\r\n    {%- if execute and not column_str -%}\r\n        {%- do exceptions.raise_compiler_error(\"Must provide a column_str argument to null expression macro!\") -%}\r\n    {%- endif -%}\r\n\r\n    {%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\r\n    {%- set standardise = automate_dv.standard_column_wrapper() %}\r\n\r\n    {{ return(adapter.dispatch('null_expression', 'automate_dv')(standardise=standardise, column_str=column_str, null_placeholder_string=null_placeholder_string)) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.standard_column_wrapper", "macro.automate_dv.fabric__null_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5930326, "supported_languages": null}, "macro.automate_dv.default__null_expression": {"name": "default__null_expression", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash_components\\null_expression.sql", "original_file_path": "macros\\supporting\\hash_components\\null_expression.sql", "unique_id": "macro.automate_dv.default__null_expression", "macro_sql": "\r\n\r\n\r\n{%- macro default__null_expression(standardise, column_str, null_placeholder_string) -%}\r\n\r\n    {%- set column_expression -%}\r\n        IFNULL({{ standardise | replace('[EXPRESSION]', column_str) }}, '{{ null_placeholder_string}}')\r\n    {%- endset -%}\r\n\r\n    {% do return(column_expression) %}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5930326, "supported_languages": null}, "macro.automate_dv.postgres__null_expression": {"name": "postgres__null_expression", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash_components\\null_expression.sql", "original_file_path": "macros\\supporting\\hash_components\\null_expression.sql", "unique_id": "macro.automate_dv.postgres__null_expression", "macro_sql": "{%- macro postgres__null_expression(standardise, column_str, null_placeholder_string) -%}\r\n\r\n    {%- set column_expression -%}\r\n        COALESCE({{ standardise | replace('[EXPRESSION]', column_str) }}, '{{ null_placeholder_string }}')\r\n    {%- endset -%}\r\n\r\n    {% do return(column_expression) %}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5940323, "supported_languages": null}, "macro.automate_dv.fabric__null_expression": {"name": "fabric__null_expression", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash_components\\null_expression.sql", "original_file_path": "macros\\supporting\\hash_components\\null_expression.sql", "unique_id": "macro.automate_dv.fabric__null_expression", "macro_sql": "{%- macro fabric__null_expression(standardise, column_str, null_placeholder_string) -%}\r\n\r\n    {%- set column_expression -%}\r\n        ISNULL({{ standardise | replace('[EXPRESSION]', column_str) }}, '{{ null_placeholder_string }}')\r\n    {%- endset -%}\r\n\r\n    {% do return(column_expression) %}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5940323, "supported_languages": null}, "macro.automate_dv.select_hash_alg": {"name": "select_hash_alg", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "original_file_path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "unique_id": "macro.automate_dv.select_hash_alg", "macro_sql": "\r\n\r\n{%- macro select_hash_alg(hash) -%}\r\n\r\n    {%- set available_hash_algorithms = ['md5', 'sha'] -%}\r\n\r\n    {%- if execute and hash | lower not in available_hash_algorithms %}\r\n        {%- do exceptions.warn(\"Configured hash ('{}') not recognised. Must be one of: {} (case insensitive)\".format(hash | lower, available_hash_algorithms | join(', '))) -%}\r\n    {%- endif -%}\r\n\r\n    {%- if hash | lower == 'md5' -%}\r\n        {%- do return(automate_dv.hash_alg_md5()) -%}\r\n    {%- elif hash | lower == 'sha' -%}\r\n        {%- do return(automate_dv.hash_alg_sha256()) -%}\r\n    {%- else -%}\r\n        {%- do return(automate_dv.hash_alg_md5()) -%}\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.hash_alg_md5", "macro.automate_dv.hash_alg_sha256"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5970335, "supported_languages": null}, "macro.automate_dv.hash_alg_md5": {"name": "hash_alg_md5", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "original_file_path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "unique_id": "macro.automate_dv.hash_alg_md5", "macro_sql": "\r\n\r\n{%- macro hash_alg_md5() -%}\r\n\r\n    {{- adapter.dispatch('hash_alg_md5', 'automate_dv')() -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.fabric__hash_alg_md5"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5980303, "supported_languages": null}, "macro.automate_dv.default__hash_alg_md5": {"name": "default__hash_alg_md5", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "original_file_path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "unique_id": "macro.automate_dv.default__hash_alg_md5", "macro_sql": "{% macro default__hash_alg_md5() -%}\r\n\r\n    {% do return(automate_dv.cast_binary('MD5_BINARY([HASH_STRING_PLACEHOLDER])', quote=false)) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5980303, "supported_languages": null}, "macro.automate_dv.bigquery__hash_alg_md5": {"name": "bigquery__hash_alg_md5", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "original_file_path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "unique_id": "macro.automate_dv.bigquery__hash_alg_md5", "macro_sql": "{% macro bigquery__hash_alg_md5() -%}\r\n\r\n    {% do return(automate_dv.cast_binary('UPPER(TO_HEX(MD5([HASH_STRING_PLACEHOLDER])))', quote=false)) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5980303, "supported_languages": null}, "macro.automate_dv.fabric__hash_alg_md5": {"name": "fabric__hash_alg_md5", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "original_file_path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "unique_id": "macro.automate_dv.fabric__hash_alg_md5", "macro_sql": "{% macro fabric__hash_alg_md5() -%}\r\n\r\n    {% do return(automate_dv.cast_binary(\"HASHBYTES('MD5', [HASH_STRING_PLACEHOLDER])\", quote=false)) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5990338, "supported_languages": null}, "macro.automate_dv.postgres__hash_alg_md5": {"name": "postgres__hash_alg_md5", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "original_file_path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "unique_id": "macro.automate_dv.postgres__hash_alg_md5", "macro_sql": "{% macro postgres__hash_alg_md5() -%}\r\n\r\n    {% do return(automate_dv.cast_binary('UPPER(MD5([HASH_STRING_PLACEHOLDER]))', quote=false)) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5990338, "supported_languages": null}, "macro.automate_dv.databricks__hash_alg_md5": {"name": "databricks__hash_alg_md5", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "original_file_path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "unique_id": "macro.automate_dv.databricks__hash_alg_md5", "macro_sql": "{% macro databricks__hash_alg_md5() -%}\r\n\r\n    {% do return(automate_dv.cast_binary('UPPER(MD5([HASH_STRING_PLACEHOLDER]))', quote=false)) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.5990338, "supported_languages": null}, "macro.automate_dv.hash_alg_sha256": {"name": "hash_alg_sha256", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "original_file_path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "unique_id": "macro.automate_dv.hash_alg_sha256", "macro_sql": "\r\n\r\n\r\n{%- macro hash_alg_sha256() -%}\r\n\r\n    {{- adapter.dispatch('hash_alg_sha256', 'automate_dv')() -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.fabric__hash_alg_sha256"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.6000328, "supported_languages": null}, "macro.automate_dv.default__hash_alg_sha256": {"name": "default__hash_alg_sha256", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "original_file_path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "unique_id": "macro.automate_dv.default__hash_alg_sha256", "macro_sql": "{% macro default__hash_alg_sha256() -%}\r\n\r\n    {% do return(automate_dv.cast_binary('SHA2_BINARY([HASH_STRING_PLACEHOLDER])', quote=false)) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.6000328, "supported_languages": null}, "macro.automate_dv.bigquery__hash_alg_sha256": {"name": "bigquery__hash_alg_sha256", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "original_file_path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "unique_id": "macro.automate_dv.bigquery__hash_alg_sha256", "macro_sql": "{% macro bigquery__hash_alg_sha256() -%}\r\n\r\n    {% do return(automate_dv.cast_binary('UPPER(TO_HEX(SHA256([HASH_STRING_PLACEHOLDER])))', quote=false)) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.6000328, "supported_languages": null}, "macro.automate_dv.fabric__hash_alg_sha256": {"name": "fabric__hash_alg_sha256", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "original_file_path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "unique_id": "macro.automate_dv.fabric__hash_alg_sha256", "macro_sql": "{% macro fabric__hash_alg_sha256() -%}\r\n\r\n    {% do return(automate_dv.cast_binary(\"HASHBYTES('SHA2_256', [HASH_STRING_PLACEHOLDER])\", quote=false)) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.60104, "supported_languages": null}, "macro.automate_dv.postgres__hash_alg_sha256": {"name": "postgres__hash_alg_sha256", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "original_file_path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "unique_id": "macro.automate_dv.postgres__hash_alg_sha256", "macro_sql": "{% macro postgres__hash_alg_sha256() -%}\r\n    {#- * MD5 is simple function call to md5(val) -#}\r\n    {#- * SHA256 needs input cast to BYTEA and then its BYTEA result encoded as hex text output -#}\r\n    {#- e.g. ENCODE(SHA256(CAST(val AS BYTEA)), 'hex') -#}\r\n    {#- Ref: https://www.postgresql.org/docs/11/functions-binarystring.html  -#}\r\n\r\n    {% do return(automate_dv.cast_binary(\"UPPER(ENCODE(SHA256(CAST([HASH_STRING_PLACEHOLDER] AS {})), 'hex'))\".format(automate_dv.type_binary()), quote=false))  %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary", "macro.automate_dv.type_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.60104, "supported_languages": null}, "macro.automate_dv.databricks__hash_alg_sha256": {"name": "databricks__hash_alg_sha256", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "original_file_path": "macros\\supporting\\hash_components\\select_hash_alg.sql", "unique_id": "macro.automate_dv.databricks__hash_alg_sha256", "macro_sql": "{% macro databricks__hash_alg_sha256() -%}\r\n\r\n    {% do return('UPPER(SHA2([HASH_STRING_PLACEHOLDER], 256))') %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.60104, "supported_languages": null}, "macro.automate_dv.standard_column_wrapper": {"name": "standard_column_wrapper", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash_components\\standard_column_wrapper.sql", "original_file_path": "macros\\supporting\\hash_components\\standard_column_wrapper.sql", "unique_id": "macro.automate_dv.standard_column_wrapper", "macro_sql": "\r\n\r\n{%- macro standard_column_wrapper() -%}\r\n\r\n    {%- set hash_content_casing = var('hash_content_casing', 'upper') -%}\r\n    {%- set available_case_configs = ['upper', 'disabled'] -%}\r\n\r\n    {%- if execute and (hash_content_casing | lower) not in available_case_configs  -%}\r\n        {%- do exceptions.raise_compiler_error(\"Must provide a valid casing config for hash_content_casing.\r\n                                                '{}' was provided. Can be one of {} (case insensitive)\".format(\r\n                                                                                hash_content_casing,\r\n                                                                                available_case_configs | join(','))) -%}\r\n    {%- endif -%}\r\n\r\n    {{ return(adapter.dispatch('standard_column_wrapper', 'automate_dv')(hash_content_casing=hash_content_casing | lower)) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.fabric__standard_column_wrapper"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.605033, "supported_languages": null}, "macro.automate_dv.default__standard_column_wrapper": {"name": "default__standard_column_wrapper", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash_components\\standard_column_wrapper.sql", "original_file_path": "macros\\supporting\\hash_components\\standard_column_wrapper.sql", "unique_id": "macro.automate_dv.default__standard_column_wrapper", "macro_sql": "\r\n\r\n\r\n{%- macro default__standard_column_wrapper(hash_content_casing) -%}\r\n\r\n    {%- if hash_content_casing == 'upper' -%}\r\n        {%- set standardise -%}\r\n            NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS {{ automate_dv.type_string() }}))), '')\r\n        {%- endset -%}\r\n    {%- else -%}\r\n        {%- set standardise -%}\r\n            NULLIF(TRIM(CAST([EXPRESSION] AS {{ automate_dv.type_string() }})), '')\r\n        {%- endset -%}\r\n    {%- endif -%}\r\n\r\n    {% do return(standardise) -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.6060326, "supported_languages": null}, "macro.automate_dv.databricks__standard_column_wrapper": {"name": "databricks__standard_column_wrapper", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash_components\\standard_column_wrapper.sql", "original_file_path": "macros\\supporting\\hash_components\\standard_column_wrapper.sql", "unique_id": "macro.automate_dv.databricks__standard_column_wrapper", "macro_sql": "{%- macro databricks__standard_column_wrapper(hash_content_casing) -%}\r\n\r\n    {%- if hash_content_casing == 'upper' -%}\r\n        {%- set standardise -%}\r\n            NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS {{ automate_dv.type_string(is_hash=true) }}))), '')\r\n        {%- endset -%}\r\n    {%- else -%}\r\n        {%- set standardise -%}\r\n            NULLIF(TRIM(CAST([EXPRESSION] AS {{ automate_dv.type_string(is_hash=true) }})), '')\r\n        {%- endset -%}\r\n    {%- endif -%}\r\n\r\n    {% do return(standardise) -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.6060326, "supported_languages": null}, "macro.automate_dv.fabric__standard_column_wrapper": {"name": "fabric__standard_column_wrapper", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\supporting\\hash_components\\standard_column_wrapper.sql", "original_file_path": "macros\\supporting\\hash_components\\standard_column_wrapper.sql", "unique_id": "macro.automate_dv.fabric__standard_column_wrapper", "macro_sql": "{%- macro fabric__standard_column_wrapper(hash_content_casing) -%}\r\n\r\n    {%- if hash_content_casing == 'upper' -%}\r\n        {%- set standardise -%}\r\n            NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS {{ automate_dv.type_string() }}(MAX)))), '')\r\n        {%- endset -%}\r\n    {%- else -%}\r\n        {%- set standardise -%}\r\n            NULLIF(TRIM(CAST([EXPRESSION] AS {{ automate_dv.type_string() }}(MAX))), '')\r\n        {%- endset -%}\r\n    {%- endif -%}\r\n\r\n    {% do return(standardise) -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.6070325, "supported_languages": null}, "macro.automate_dv.bigquery__bridge": {"name": "bigquery__bridge", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\bigquery\\bridge.sql", "original_file_path": "macros\\tables\\bigquery\\bridge.sql", "unique_id": "macro.automate_dv.bigquery__bridge", "macro_sql": "\r\n\r\n{%- macro bigquery__bridge(src_pk, as_of_dates_table, bridge_walk, stage_tables_ldts, src_extra_columns, src_ldts, source_model) -%}\r\n\r\n{{ automate_dv.default__bridge(src_pk=src_pk,\r\n                            as_of_dates_table=as_of_dates_table,\r\n                            bridge_walk=bridge_walk,\r\n                            stage_tables_ldts=stage_tables_ldts,\r\n                            src_extra_columns=src_extra_columns,\r\n                            src_ldts=src_ldts,\r\n                            source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__bridge"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.6080325, "supported_languages": null}, "macro.automate_dv.bigquery__eff_sat": {"name": "bigquery__eff_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\bigquery\\eff_sat.sql", "original_file_path": "macros\\tables\\bigquery\\eff_sat.sql", "unique_id": "macro.automate_dv.bigquery__eff_sat", "macro_sql": "\r\n\r\n{%- macro bigquery__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source]) -%}\r\n{%- set fk_cols = automate_dv.expand_column_list(columns=[src_dfk, src_sfk]) -%}\r\n{%- set dfk_cols = automate_dv.expand_column_list(columns=[src_dfk]) -%}\r\n{%- set is_auto_end_dating = config.get('is_auto_end_dating', default=false) %}\r\n\r\n{%- set max_datetime = automate_dv.max_datetime() %}\r\n\r\nWITH source_data AS (\r\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='source') }}\r\n    FROM {{ ref(source_model) }} AS a\r\n    WHERE {{ automate_dv.multikey(src_dfk, prefix='a', condition='IS NOT NULL') }}\r\n    AND {{ automate_dv.multikey(src_sfk, prefix='a', condition='IS NOT NULL') }}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n    AND __PERIOD_FILTER__\r\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\n    AND __RANK_FILTER__\r\n    {%- endif %}\r\n),\r\n\r\n{%- if automate_dv.is_any_incremental() %}\r\n\r\n{# Selecting the most recent records for each link hashkey -#}\r\nlatest_records_unranked AS (\r\n    SELECT {{ automate_dv.alias_all(source_cols, 'b') }},\r\n           ROW_NUMBER() OVER (\r\n                PARTITION BY {{ automate_dv.prefix([src_pk], 'b') }}\r\n                ORDER BY b.{{ src_ldts }} DESC\r\n           ) AS row_num\r\n    FROM {{ this }} AS b\r\n),\r\n\r\nlatest_records AS (\r\n    SELECT *\r\n    FROM latest_records_unranked\r\n    WHERE row_num = 1\r\n),\r\n\r\n{# Selecting the open records of the most recent records for each link hashkey -#}\r\nlatest_open AS (\r\n    SELECT {{ automate_dv.alias_all(source_cols, 'c') }}\r\n    FROM latest_records AS c\r\n    WHERE DATE(c.{{ src_end_date }}) = CAST(PARSE_DATETIME('%F %H:%M:%E6S', '{{ max_datetime }}') AS DATE)\r\n),\r\n\r\n{# Selecting the closed records of the most recent records for each link hashkey -#}\r\nlatest_closed AS (\r\n    SELECT {{ automate_dv.alias_all(source_cols, 'd') }}\r\n    FROM latest_records AS d\r\n    WHERE DATE(d.{{ src_end_date }}) != CAST(PARSE_DATETIME('%F %H:%M:%E6S', '{{ max_datetime }}') AS DATE)\r\n),\r\n\r\n{# Identifying the completely new link relationships to be opened in eff sat -#}\r\nnew_open_records AS (\r\n    SELECT DISTINCT\r\n        {{ automate_dv.prefix([src_pk], 'f') }},\r\n        {{ automate_dv.alias_all(fk_cols, 'f') }},\r\n        {% if automate_dv.is_something(src_extra_columns) %}\r\n            {{ automate_dv.prefix([src_extra_columns], 'f') }},\r\n        {% endif -%}\r\n        {%- if is_auto_end_dating %}\r\n        f.{{ src_eff }} AS {{ src_start_date }},\r\n        {% else %}\r\n        f.{{ src_start_date }} AS {{ src_start_date }},\r\n        {% endif %}\r\n        f.{{ src_end_date }} AS {{ src_end_date }},\r\n        f.{{ src_eff }} AS {{ src_eff }},\r\n        f.{{ src_ldts }},\r\n        f.{{ src_source }}\r\n    FROM source_data AS f\r\n    LEFT JOIN latest_records AS lr\r\n    ON {{ automate_dv.multikey(src_pk, prefix=['f','lr'], condition='=') }}\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='lr', condition='IS NULL') }}\r\n),\r\n\r\n{# Identifying the currently closed link relationships to be reopened in eff sat -#}\r\nnew_reopened_records AS (\r\n    SELECT DISTINCT\r\n        {{ automate_dv.prefix([src_pk], 'lc') }},\r\n        {{ automate_dv.alias_all(fk_cols, 'lc') }},\r\n        {% if automate_dv.is_something(src_extra_columns) %}\r\n            {{ automate_dv.prefix([src_extra_columns], 'g') }},\r\n        {% endif -%}\r\n        {%- if is_auto_end_dating %}\r\n        g.{{ src_eff }} AS {{ src_start_date }},\r\n        {% else %}\r\n        g.{{ src_start_date }} AS {{ src_start_date }},\r\n        {% endif %}\r\n        g.{{ src_end_date }} AS {{ src_end_date }},\r\n        g.{{ src_eff }} AS {{ src_eff }},\r\n        g.{{ src_ldts }},\r\n        g.{{ src_source }}\r\n    FROM source_data AS g\r\n    INNER JOIN latest_closed AS lc\r\n    ON {{ automate_dv.multikey(src_pk, prefix=['g','lc'], condition='=') }}\r\n    WHERE CAST((g.{{ src_end_date }}) AS DATE) = CAST(PARSE_DATETIME('%F %H:%M:%E6S', '{{ max_datetime }}') AS DATE)\r\n),\r\n\r\n{%- if is_auto_end_dating %}\r\n\r\n{# Creating the closing records -#}\r\n{# Identifying the currently open relationships that need to be closed due to change in SFK(s) -#}\r\nnew_closed_records AS (\r\n    SELECT DISTINCT\r\n        {{ automate_dv.prefix([src_pk], 'lo') }},\r\n        {{ automate_dv.alias_all(fk_cols, 'lo') }},\r\n        {% if automate_dv.is_something(src_extra_columns) %}\r\n            {{ automate_dv.prefix([src_extra_columns], 'h') }},\r\n        {% endif -%}\r\n        lo.{{ src_start_date }} AS {{ src_start_date }},\r\n        h.{{ src_eff }} AS {{ src_end_date }},\r\n        h.{{ src_eff }} AS {{ src_eff }},\r\n        h.{{ src_ldts }},\r\n        lo.{{ src_source }}\r\n    FROM source_data AS h\r\n    INNER JOIN latest_open AS lo\r\n    ON {{ automate_dv.multikey(src_dfk, prefix=['lo', 'h'], condition='=') }}\r\n    WHERE ({{ automate_dv.multikey(src_sfk, prefix=['lo', 'h'], condition='<>', operator='OR') }})\r\n),\r\n\r\n{#- else if (not) is_auto_end_dating -#}\r\n{% else %}\r\n\r\nnew_closed_records AS (\r\n    SELECT DISTINCT\r\n        {{ automate_dv.prefix([src_pk], 'lo') }},\r\n        {{ automate_dv.alias_all(fk_cols, 'lo') }},\r\n        {% if automate_dv.is_something(src_extra_columns) %}\r\n            {{ automate_dv.prefix([src_extra_columns], 'h') }},\r\n        {% endif -%}\r\n        h.{{ src_start_date }} AS {{ src_start_date }},\r\n        h.{{ src_end_date }} AS {{ src_end_date }},\r\n        h.{{ src_eff }} AS {{ src_eff }},\r\n        h.{{ src_ldts }},\r\n        lo.{{ src_source }}\r\n    FROM source_data AS h\r\n    LEFT JOIN latest_open AS lo\r\n    ON lo.{{ src_pk }} = h.{{ src_pk }}\r\n    LEFT JOIN latest_closed AS lc\r\n    ON lc.{{ src_pk }} = h.{{ src_pk }}\r\n    WHERE CAST((h.{{ src_end_date }}) AS DATE) != CAST(PARSE_DATETIME('%F %H:%M:%E6S', '{{ max_datetime }}') AS DATE)\r\n    AND lo.{{ src_pk }} IS NOT NULL\r\n    AND lc.{{ src_pk }} IS NULL\r\n),\r\n\r\n{#- end if is_auto_end_dating -#}\r\n{%- endif %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT * FROM new_open_records\r\n    UNION DISTINCT\r\n    SELECT * FROM new_reopened_records\r\n    UNION DISTINCT\r\n    SELECT * FROM new_closed_records\r\n)\r\n\r\n{#- else if not automate_dv.is_any_incremental() -#}\r\n{%- else %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT {{ automate_dv.alias_all(source_cols, 'i') }}\r\n    FROM source_data AS i\r\n)\r\n\r\n{#- end if not automate_dv.is_any_incremental() -#}\r\n{%- endif %}\r\n\r\nSELECT *\r\nFROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.max_datetime", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental", "macro.automate_dv.alias_all", "macro.automate_dv.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.620033, "supported_languages": null}, "macro.automate_dv.bigquery__hub": {"name": "bigquery__hub", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\bigquery\\hub.sql", "original_file_path": "macros\\tables\\bigquery\\hub.sql", "unique_id": "macro.automate_dv.bigquery__hub", "macro_sql": "\r\n\r\n{%- macro bigquery__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\r\n{%- endif %}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- set stage_count = source_model | length -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\n    row_rank_{{ source_number }} AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'rr') }},\r\n    {%- else %}\r\n    SELECT {{ automate_dv.prefix(source_cols, 'rr') }},\r\n    {%- endif %}\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'rr') }}\r\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'rr') }}\r\n           ) AS row_number\r\n    FROM {{ ref(src) }} AS rr\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\r\n    QUALIFY row_number = 1\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n),\r\n\r\n{% endfor -%}\r\n{% if stage_count > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- endif -%}\r\n{%- if stage_count > 1 %}\r\n\r\n    row_rank_union AS (\r\n    SELECT ru.*,\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'ru') }}\r\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\r\n           ) AS row_rank_number\r\n    FROM {{ ns.last_cte }} AS ru\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    QUALIFY row_rank_number = 1\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if automate_dv.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.6280324, "supported_languages": null}, "macro.automate_dv.bigquery__link": {"name": "bigquery__link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\bigquery\\link.sql", "original_file_path": "macros\\tables\\bigquery\\link.sql", "unique_id": "macro.automate_dv.bigquery__link", "macro_sql": "\r\n\r\n{%- macro bigquery__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\r\n{%- set fk_cols = automate_dv.expand_column_list([src_fk]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\r\n{%- endif %}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- set stage_count = source_model | length -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\nrow_rank_{{ source_number }} AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'rr') }},\r\n    {%- else %}\r\n    SELECT {{ automate_dv.prefix(source_cols, 'rr') }},\r\n    {%- endif %}\r\n        ROW_NUMBER() OVER(\r\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'rr') }}\r\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'rr') }}\r\n        ) AS row_number\r\n    FROM {{ ref (src) }} AS rr\r\n    {%- if stage_count == 1 %}\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition ='IS NOT NULL') }}\r\n    AND {{ automate_dv.multikey(fk_cols, prefix='rr', condition ='IS NOT NULL') }}\r\n    QUALIFY row_number = 1\r\n    {%- endif %}\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n    ),\r\n\r\n{% endfor -%}\r\n\r\n{% if stage_count > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{% endif %}\r\n{%- if stage_count > 1 %}\r\n\r\nrow_rank_union AS (\r\n    SELECT ru.*,\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'ru') }}\r\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\r\n           ) AS row_rank_number\r\n    FROM {{ ns.last_cte }} AS ru\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    AND {{ automate_dv.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\r\n    QUALIFY row_rank_number = 1\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if automate_dv.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.6420324, "supported_languages": null}, "macro.automate_dv.bigquery__ma_sat": {"name": "bigquery__ma_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\bigquery\\ma_sat.sql", "original_file_path": "macros\\tables\\bigquery\\ma_sat.sql", "unique_id": "macro.automate_dv.bigquery__ma_sat", "macro_sql": "\r\n\r\n{%- macro bigquery__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) %}\r\n\r\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_cdk, src_payload, src_extra_columns, src_hashdiff, src_eff, src_ldts, src_source]) -%}\r\n{%- set rank_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\r\n{%- set cdk_cols = automate_dv.expand_column_list(columns=[src_cdk]) -%}\r\n{%- set cols_for_latest = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_ldts]) %}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' -%}\r\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\r\n{%- endif -%}\r\n\r\n{# Select unique source records -#}\r\nWITH source_data AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT DISTINCT {{ automate_dv.prefix(source_cols_with_rank, 's', alias_target='source') }}\r\n    {%- else %}\r\n    SELECT DISTINCT {{ automate_dv.prefix(source_cols, 's', alias_target='source') }}\r\n    {%- endif %}\r\n    FROM {{ ref(source_model) }} AS s\r\n    WHERE {{ automate_dv.multikey([src_pk], prefix='s', condition='IS NOT NULL') }}\r\n    {%- for child_key in src_cdk %}\r\n        AND {{ automate_dv.multikey(child_key, prefix='s', condition='IS NOT NULL') }}\r\n    {%- endfor %}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n        AND __PERIOD_FILTER__\r\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\n        AND __RANK_FILTER__\r\n    {%- endif %}\r\n),\r\n\r\n{# if any_incremental -#}\r\n{% if automate_dv.is_any_incremental() %}\r\n\r\nsource_data_with_count AS (\r\n    SELECT a.*,\r\n           b.source_count\r\n    FROM source_data a\r\n    INNER JOIN (\r\n        SELECT {{ automate_dv.prefix([src_pk], 't') }},\r\n            COUNT(*) AS source_count\r\n        FROM (SELECT DISTINCT {{ automate_dv.prefix([src_pk], 's') }}, {{ automate_dv.prefix([src_hashdiff], 's', alias_target='source') }}, {{ automate_dv.prefix(cdk_cols, 's') }} FROM source_data AS s) AS t\r\n        GROUP BY {{ automate_dv.prefix([src_pk], 't') }}\r\n    ) AS b\r\n    ON {{ automate_dv.multikey([src_pk], prefix=['a','b'], condition='=') }}\r\n),\r\n\r\n{# Select latest records from satellite, restricted to PKs in source data -#}\r\nlatest_records AS (\r\n    SELECT {{ automate_dv.prefix(cols_for_latest, 'mas', alias_target='target') }},\r\n           mas.latest_rank,\r\n           DENSE_RANK() OVER (PARTITION BY {{ automate_dv.prefix([src_pk], 'mas') }}\r\n                              ORDER BY {{ automate_dv.prefix([src_hashdiff], 'mas', alias_target='target') }},\r\n                                       {{ automate_dv.prefix([src_cdk], 'mas') }} ASC\r\n           ) AS check_rank\r\n    FROM (\r\n    SELECT {{ automate_dv.prefix(cols_for_latest, 'inner_mas', alias_target='target') }},\r\n           RANK() OVER (PARTITION BY {{ automate_dv.prefix([src_pk], 'inner_mas') }}\r\n                        ORDER BY {{ automate_dv.prefix([src_ldts], 'inner_mas') }} DESC\r\n           ) AS latest_rank\r\n    FROM {{ this }} AS inner_mas\r\n    INNER JOIN (SELECT DISTINCT {{ automate_dv.prefix([src_pk], 's') }} FROM source_data as s ) AS spk\r\n        ON {{ automate_dv.multikey([src_pk], prefix=['inner_mas', 'spk'], condition='=') }}\r\n    ) AS mas\r\n    WHERE latest_rank = 1\r\n),\r\n\r\n{# Select summary details for each group of latest records -#}\r\nlatest_group_details AS (\r\n    SELECT {{ automate_dv.prefix([src_pk], 'lr') }},\r\n           {{ automate_dv.prefix([src_ldts], 'lr') }},\r\n           MAX(lr.check_rank) AS latest_count\r\n    FROM latest_records AS lr\r\n    GROUP BY {{ automate_dv.prefix([src_pk], 'lr') }}, {{ automate_dv.prefix([src_ldts], 'lr') }}\r\n),\r\n\r\n{# endif any_incremental -#}\r\n{%- endif %}\r\n\r\n{# Select groups of source records where at least one member does not appear in a group of latest records -#}\r\nrecords_to_insert AS (\r\n{% if not automate_dv.is_any_incremental() %}\r\n    SELECT {{ automate_dv.alias_all(source_cols, 'source_data') }}\r\n    FROM source_data\r\n{%- endif %}\r\n\r\n{# if any_incremental -#}\r\n{% if automate_dv.is_any_incremental() %}\r\n    SELECT {{ automate_dv.alias_all(source_cols, 'source_data_with_count') }}\r\n    FROM source_data_with_count\r\n    WHERE EXISTS (\r\n        SELECT 1\r\n        FROM source_data_with_count AS stage\r\n        WHERE NOT EXISTS (\r\n            SELECT 1\r\n            FROM (\r\n                SELECT {{ automate_dv.prefix(cols_for_latest, 'lr', alias_target='target') }},\r\n                       lg.latest_count\r\n                FROM latest_records AS lr\r\n                INNER JOIN latest_group_details AS lg\r\n                    ON {{ automate_dv.multikey([src_pk], prefix=['lr', 'lg'], condition='=') }}\r\n                    AND {{ automate_dv.prefix([src_ldts], 'lr') }} = {{ automate_dv.prefix([src_ldts], 'lg') }}\r\n            ) AS active_records\r\n            WHERE {{ automate_dv.multikey([src_pk], prefix=['stage', 'active_records'], condition='=') }}\r\n                AND {{ automate_dv.prefix([src_hashdiff], 'stage') }} = {{ automate_dv.prefix([src_hashdiff], 'active_records', alias_target='target') }}\r\n{# In order to maintain the parallel with the standard satellite, we don''t allow for groups of records to be updated if the ldts is the only difference #}\r\n{#        AND {{ automate_dv.prefix([src_ldts], 'stage') }} = {{ automate_dv.prefix([src_ldts], 'active_records') }} #}\r\n                AND {{ automate_dv.multikey(src_cdk, prefix=['stage', 'active_records'], condition='=') }}\r\n                AND stage.source_count = active_records.latest_count\r\n        )\r\n        AND {{ automate_dv.multikey([src_pk], prefix=['source_data_with_count', 'stage'], condition='=') }}\r\n    )\r\n{# endif any_incremental -#}\r\n{%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental", "macro.automate_dv.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.6590319, "supported_languages": null}, "macro.automate_dv.bigquery__pit": {"name": "bigquery__pit", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\bigquery\\pit.sql", "original_file_path": "macros\\tables\\bigquery\\pit.sql", "unique_id": "macro.automate_dv.bigquery__pit", "macro_sql": "\r\n\r\n{%- macro bigquery__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) %}\r\n\r\n{#- Acquiring the source relation for the AS_OF table -#}\r\n{%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\r\n    {%- set source_name = as_of_dates_table | first -%}\r\n    {%- set source_table_name = as_of_dates_table[source_name] -%}\r\n    {%- set as_of_table_relation = source(source_name, source_table_name) -%}\r\n{%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\r\n    {%- set as_of_table_relation = ref(as_of_dates_table) -%}\r\n{%- endif -%}\r\n    {%- set enable_ghost_record = var('enable_ghost_records', false) -%}\r\n    {%- set hash = var('hash', 'MD5') -%}\r\n\r\n{%- if not enable_ghost_record -%}\r\n{#- Setting ghost values to replace NULLS -#}\r\n{%- set ghost_pk = '0x0000000000000000' -%}\r\n{%- set ghost_date = '1900-01-01 00:00:00.000000' %}\r\n{%- endif -%}\r\n\r\n{%- if automate_dv.is_any_incremental() -%}\r\n    {%- set new_as_of_dates_cte = 'new_rows_as_of' -%}\r\n{%- else -%}\r\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\r\n{%- endif %}\r\n\r\nWITH as_of_dates AS (\r\n    SELECT * FROM {{ as_of_table_relation }}\r\n),\r\n\r\n{%- if automate_dv.is_any_incremental() %}\r\n\r\n{{ automate_dv.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\r\n\r\nbackfill_rows_as_of_dates AS (\r\n    SELECT\r\n        {{ automate_dv.prefix([src_pk], 'a') }},\r\n        b.AS_OF_DATE\r\n    FROM new_rows_pks AS a\r\n    INNER JOIN backfill_as_of AS b\r\n        ON (1=1 )\r\n),\r\n\r\nbackfill AS (\r\n    SELECT\r\n        {{ automate_dv.prefix([src_pk], 'a') }},\r\n        a.AS_OF_DATE,\r\n    {%- for sat_name in satellites -%}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] | upper -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] | upper -%}\r\n        {%- set sat_name = sat_name | upper -%}\r\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\r\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\r\n\r\n        {% if enable_ghost_record %}\r\n\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\r\n            {{ automate_dv.binary_ghost(none, hash) }})\r\n        AS {{ sat_name | upper }}_{{ sat_pk_name | upper }},\r\n\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\r\n            {{ automate_dv.date_ghost(date_type = sat_ldts.dtype, alias=none) }})\r\n        AS {{ sat_name | upper }}_{{ sat_ldts_name | upper }}\r\n\r\n        {%- else -%}\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\r\n        '{{ ghost_pk }}') AS {{ sat_name | upper }}_{{ sat_pk_name | upper }},\r\n\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\r\n        PARSE_DATETIME('%F %H:%M:%E6S', '{{ ghost_date }}')) AS {{ sat_name | upper }}_{{ sat_ldts_name | upper }}\r\n        {%- endif -%}\r\n        {{- ',' if not loop.last -}}\r\n    {%- endfor %}\r\n    FROM backfill_rows_as_of_dates AS a\r\n\r\n    {% for sat_name in satellites -%}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\r\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\r\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\r\n        LEFT JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\r\n        {{ \"ON\" | indent(4) }} a.{{ src_pk }} = {{ sat_name | lower ~ '_src' }}.{{ sat_pk }}\r\n        {{ \"AND\" | indent(4) }} {{ sat_name | lower ~ '_src' }}.{{ sat_ldts }} <= a.AS_OF_DATE\r\n\r\n    {% endfor %}\r\n\r\n    GROUP BY\r\n        {{ automate_dv.prefix([src_pk], 'a') }}, a.AS_OF_DATE\r\n    ORDER BY (1)\r\n),\r\n{%- endif %}\r\n\r\nnew_rows_as_of_dates AS (\r\n    SELECT\r\n        {{ automate_dv.prefix([src_pk], 'a') }},\r\n        b.AS_OF_DATE\r\n    FROM {{ ref(source_model) }} AS a\r\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\r\n    ON (1=1)\r\n),\r\n\r\nnew_rows AS (\r\n    SELECT\r\n        {{ automate_dv.prefix([src_pk], 'a') }},\r\n        a.AS_OF_DATE,\r\n    {%- for sat_name in satellites -%}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\r\n        {%- set sat_name = sat_name -%}\r\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\r\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\r\n\r\n        {%- if enable_ghost_record %}\r\n\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\r\n            {{ automate_dv.binary_ghost(none, hash) }})\r\n        AS {{ sat_name | upper }}_{{ sat_pk_name | upper }},\r\n\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\r\n            {{ automate_dv.date_ghost(date_type = sat_ldts.dtype, alias=none) }})\r\n        AS {{ sat_name | upper }}_{{ sat_ldts_name | upper }}\r\n\r\n        {%- else -%}\r\n\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\r\n        '{{ ghost_pk }}') AS {{ sat_name | upper }}_{{ sat_pk_name | upper }},\r\n\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\r\n        PARSE_DATETIME('%F %H:%M:%E6S', '{{ ghost_date }}')) AS {{ sat_name | upper }}_{{ sat_ldts_name | upper }}\r\n\r\n        {%- endif -%}\r\n        {{- \",\" if not loop.last }}\r\n    {%- endfor %}\r\n    FROM new_rows_as_of_dates AS a\r\n\r\n\r\n    {% for sat_name in satellites -%}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\r\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\r\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\r\n        LEFT JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\r\n        {{ \"ON\" | indent(4) }} a.{{ src_pk }} = {{ sat_name | lower ~ '_src' }}.{{ sat_pk }}\r\n        {{ \"AND\" | indent(4) }} {{ sat_name | lower ~ '_src' }}.{{ sat_ldts }} <= a.AS_OF_DATE\r\n\r\n    {% endfor -%}\r\n\r\n    GROUP BY\r\n        {{ automate_dv.prefix([src_pk], 'a') }}, a.AS_OF_DATE\r\n    ORDER BY (1)\r\n),\r\n\r\npit AS (\r\n    SELECT * FROM new_rows\r\n{%- if automate_dv.is_any_incremental() %}\r\n    UNION ALL\r\n    SELECT * FROM overlap_pks\r\n    UNION ALL\r\n    SELECT * FROM backfill\r\n{%- endif %}\r\n)\r\n\r\nSELECT DISTINCT * FROM pit\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_any_incremental", "macro.automate_dv.as_of_date_window", "macro.automate_dv.prefix", "macro.automate_dv.binary_ghost", "macro.automate_dv.date_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.6930313, "supported_languages": null}, "macro.automate_dv.bigquery__sat": {"name": "bigquery__sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\bigquery\\sat.sql", "original_file_path": "macros\\tables\\bigquery\\sat.sql", "unique_id": "macro.automate_dv.bigquery__sat", "macro_sql": "\r\n\r\n{%- macro bigquery__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {{ automate_dv.default__sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                             src_payload=src_payload,\r\n                             src_extra_columns=src_extra_columns,\r\n                             src_eff=src_eff, src_ldts=src_ldts,\r\n                             src_source=src_source, source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.6950321, "supported_languages": null}, "macro.automate_dv.bigquery__t_link": {"name": "bigquery__t_link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\bigquery\\t_link.sql", "original_file_path": "macros\\tables\\bigquery\\t_link.sql", "unique_id": "macro.automate_dv.bigquery__t_link", "macro_sql": "\r\n\r\n{%- macro bigquery__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{{ automate_dv.default__t_link(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\r\n                            src_extra_columns=src_extra_columns,\r\n                            src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\r\n                            source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__t_link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.696031, "supported_languages": null}, "macro.automate_dv.bigquery__xts": {"name": "bigquery__xts", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\bigquery\\xts.sql", "original_file_path": "macros\\tables\\bigquery\\xts.sql", "unique_id": "macro.automate_dv.bigquery__xts", "macro_sql": "\r\n\r\n{%- macro bigquery__xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{{ automate_dv.default__xts(src_pk=src_pk,\r\n                         src_satellite=src_satellite,\r\n                         src_extra_columns=src_extra_columns,\r\n                         src_ldts=src_ldts,\r\n                         src_source=src_source,\r\n                         source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__xts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.6970325, "supported_languages": null}, "macro.automate_dv.databricks__hub": {"name": "databricks__hub", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\databricks\\hub.sql", "original_file_path": "macros\\tables\\databricks\\hub.sql", "unique_id": "macro.automate_dv.databricks__hub", "macro_sql": "\r\n\r\n{%- macro databricks__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{{ automate_dv.default__hub(src_pk=src_pk,\r\n                         src_nk=src_nk,\r\n                         src_extra_columns=src_extra_columns,\r\n                         src_ldts=src_ldts,\r\n                         src_source=src_source,\r\n                         source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__hub"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.6980326, "supported_languages": null}, "macro.automate_dv.databricks__link": {"name": "databricks__link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\databricks\\link.sql", "original_file_path": "macros\\tables\\databricks\\link.sql", "unique_id": "macro.automate_dv.databricks__link", "macro_sql": "\r\n\r\n{%- macro databricks__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{{ automate_dv.default__link(src_pk=src_pk,\r\n                          src_fk=src_fk,\r\n                          src_extra_columns=src_extra_columns,\r\n                          src_ldts=src_ldts,\r\n                          src_source=src_source,\r\n                          source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.6990316, "supported_languages": null}, "macro.automate_dv.databricks__sat": {"name": "databricks__sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\databricks\\sat.sql", "original_file_path": "macros\\tables\\databricks\\sat.sql", "unique_id": "macro.automate_dv.databricks__sat", "macro_sql": "\r\n\r\n{%- macro databricks__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{{ automate_dv.default__sat(src_pk=src_pk,\r\n                         src_hashdiff=src_hashdiff,\r\n                         src_payload=src_payload,\r\n                         src_extra_columns=src_extra_columns,\r\n                         src_eff=src_eff,\r\n                         src_ldts=src_ldts,\r\n                         src_source=src_source,\r\n                         source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.700034, "supported_languages": null}, "macro.automate_dv.postgres__hub": {"name": "postgres__hub", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\postgres\\hub.sql", "original_file_path": "macros\\tables\\postgres\\hub.sql", "unique_id": "macro.automate_dv.postgres__hub", "macro_sql": "\r\n\r\n{%- macro postgres__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\r\n{%- endif -%}\r\n\r\n{{ automate_dv.prepend_generated_by() }}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- if not (source_model is iterable and source_model is not string) -%}\r\n    {%- set source_model = [source_model] -%}\r\n{%- endif -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\nrow_rank_{{ source_number }} AS (\r\n{#- PostgreSQL has DISTINCT ON which should be more performant than the\r\n    strategy used by Snowflake ROW_NUMBER() OVER( PARTITION BY ...\r\n-#}\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT DISTINCT ON ({{ automate_dv.prefix([src_pk], 'rr') }}) {{ automate_dv.prefix(source_cols_with_rank, 'rr') }}\r\n    {%- else %}\r\n    SELECT DISTINCT ON ({{ automate_dv.prefix([src_pk], 'rr') }}) {{ automate_dv.prefix(source_cols, 'rr') }}\r\n    {%- endif %}\r\n    FROM {{ ref(src) }} AS rr\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\r\n    ORDER BY {{ automate_dv.prefix([src_pk], 'rr') }}, {{ automate_dv.prefix([src_ldts], 'rr') }}\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n),{{ \"\\n\" if not loop.last }}\r\n{% endfor -%}\r\n{% if source_model | length > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- endif -%}\r\n{%- if source_model | length > 1 %}\r\n\r\nrow_rank_union AS (\r\n{#- PostgreSQL has DISTINCT ON which should be more performant than the\r\n    strategy used by Snowflake ROW_NUMBER() OVER( PARTITION BY ...\r\n-#}\r\n    SELECT DISTINCT ON ({{ automate_dv.prefix([src_pk], 'ru') }}) ru.*\r\n    FROM {{ ns.last_cte }} AS ru\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    ORDER BY {{ automate_dv.prefix([src_pk], 'ru') }}, {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if automate_dv.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.7100334, "supported_languages": null}, "macro.automate_dv.postgres__link": {"name": "postgres__link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\postgres\\link.sql", "original_file_path": "macros\\tables\\postgres\\link.sql", "unique_id": "macro.automate_dv.postgres__link", "macro_sql": "\r\n\r\n{%- macro postgres__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\r\n{%- set fk_cols = automate_dv.expand_column_list([src_fk]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\r\n{%- endif -%}\r\n\r\n{{ automate_dv.prepend_generated_by() }}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- if not (source_model is iterable and source_model is not string) -%}\r\n    {%- set source_model = [source_model] -%}\r\n{%- endif -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\nrow_rank_{{ source_number }} AS (\r\n  SELECT * FROM (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'rr') }},\r\n    {%- else %}\r\n    SELECT {{ automate_dv.prefix(source_cols, 'rr') }},\r\n    {%- endif %}\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'rr') }}\r\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'rr') }}\r\n           ) AS row_number\r\n    FROM {{ ref(src) }} AS rr\r\n    {%- if source_model | length == 1 %}\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\r\n    AND {{ automate_dv.multikey(fk_cols, prefix='rr', condition='IS NOT NULL') }}\r\n    {%- endif %}\r\n  ) as l\r\n  WHERE row_number = 1\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n),{{ \"\\n\" if not loop.last }}\r\n{% endfor -%}\r\n{% if source_model | length > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{% endif %}\r\n{%- if source_model | length > 1 %}\r\n\r\nrow_rank_union AS (\r\n  SELECT * FROM (\r\n    SELECT ru.*,\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'ru') }}\r\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\r\n           ) AS row_rank_number\r\n    FROM {{ ns.last_cte }} AS ru\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    AND {{ automate_dv.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\r\n  ) AS a\r\n  WHERE row_rank_number = 1\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if automate_dv.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.7240322, "supported_languages": null}, "macro.automate_dv.postgres__sat": {"name": "postgres__sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\postgres\\sat.sql", "original_file_path": "macros\\tables\\postgres\\sat.sql", "unique_id": "macro.automate_dv.postgres__sat", "macro_sql": "\r\n\r\n{%- macro postgres__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\r\n{%- set window_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\r\n{%- set pk_cols = automate_dv.expand_column_list(columns=[src_pk]) -%}\r\n{%- set enable_ghost_record = var('enable_ghost_records', false) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\r\n{%- endif -%}\r\n\r\nWITH source_data AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'a', alias_target='source') }}\r\n    {%- else %}\r\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='source') }}\r\n    {%- endif %}\r\n    FROM {{ ref(source_model) }} AS a\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='a', condition='IS NOT NULL') }}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n    AND __PERIOD_FILTER__\r\n    {% elif model.config.materialized == 'vault_insert_by_rank' %}\r\n    AND __RANK_FILTER__\r\n    {% endif %}\r\n),\r\n\r\n{%- if automate_dv.is_any_incremental() %}\r\n\r\nlatest_records AS (\r\n    SELECT {{ automate_dv.prefix(window_cols, 'a', alias_target='target') }}\r\n    FROM (\r\n        SELECT {{ automate_dv.prefix(window_cols, 'current_records', alias_target='target') }},\r\n            RANK() OVER (\r\n                PARTITION BY {{ automate_dv.prefix([src_pk], 'current_records') }}\r\n                ORDER BY {{ automate_dv.prefix([src_ldts], 'current_records') }} DESC\r\n            ) AS rank\r\n        FROM {{ this }} AS current_records\r\n            JOIN (\r\n                SELECT DISTINCT {{ automate_dv.prefix([src_pk], 'source_data') }}\r\n                FROM source_data\r\n            ) AS source_records\r\n                ON {{ automate_dv.multikey(src_pk, prefix=['current_records','source_records'], condition='=') }}\r\n    ) AS a\r\n    WHERE a.rank = 1\r\n),\r\n\r\n{%- endif %}\r\n\r\n{%- if enable_ghost_record %}\r\n\r\nghost AS (\r\n{{- automate_dv.create_ghost_record(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) }}\r\n),\r\n\r\n{%- endif %}\r\n\r\nrecords_to_insert AS (\r\n    {%- if enable_ghost_record -%}\r\n    SELECT\r\n        {{ automate_dv.alias_all(source_cols, 'g') }}\r\n        FROM ghost AS g\r\n        {%- if automate_dv.is_any_incremental() %}\r\n        WHERE NOT EXISTS ( SELECT 1 FROM {{ this }} AS h WHERE {{ automate_dv.prefix([src_hashdiff], 'h', alias_target='target') }} = {{ automate_dv.prefix([src_hashdiff], 'g') }} )\r\n        {%- endif %}\r\n    UNION\r\n    {%- endif %}\r\n    SELECT DISTINCT {{ automate_dv.alias_all(source_cols, 'stage') }}\r\n    FROM source_data AS stage\r\n    {%- if automate_dv.is_any_incremental() %}\r\n    LEFT JOIN latest_records\r\n    ON {{ automate_dv.multikey(src_pk, prefix=['latest_records','stage'], condition='=') }}\r\n        AND {{ automate_dv.prefix([src_hashdiff], 'latest_records', alias_target='target') }} = {{ automate_dv.prefix([src_hashdiff], 'stage') }}\r\n    WHERE {{ automate_dv.prefix([src_hashdiff], 'latest_records', alias_target='target') }} IS NULL\r\n    {%- endif %}\r\n\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental", "macro.automate_dv.create_ghost_record", "macro.automate_dv.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.7340312, "supported_languages": null}, "macro.automate_dv.bridge": {"name": "bridge", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\snowflake\\bridge.sql", "original_file_path": "macros\\tables\\snowflake\\bridge.sql", "unique_id": "macro.automate_dv.bridge", "macro_sql": "\r\n\r\n{%- macro bridge(src_pk, src_extra_columns, as_of_dates_table, bridge_walk, stage_tables_ldts, src_ldts, source_model) -%}\r\n\r\n    {%- if automate_dv.is_something(src_extra_columns) and execute -%}\r\n      {%- do exceptions.warn(\"WARNING: src_extra_columns not yet available for PITs or Bridges. This parameter will be ignored.\") -%}\r\n    {%- endif -%}\r\n\r\n    {{- automate_dv.check_required_parameters(src_pk=src_pk,\r\n                                           as_of_dates_table=as_of_dates_table,\r\n                                           bridge_walk=bridge_walk,\r\n                                           stage_tables_ldts=stage_tables_ldts,\r\n                                           src_ldts=src_ldts,\r\n                                           source_model=source_model) -}}\r\n\r\n    {{- automate_dv.prepend_generated_by() }}\r\n\r\n    {% for stg in stage_tables_ldts %}\r\n    {{- \"-- depends_on: \" ~ ref(stg) }}\r\n    {% endfor %}\r\n\r\n    {#- Acquiring the source relation for the AS_OF table -#}\r\n    {%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\r\n        {%- set source_name = as_of_dates_table | first -%}\r\n        {%- set source_table_name = as_of_dates_table[source_name] -%}\r\n        {%- set as_of_dates_table = source(source_name, source_table_name) -%}\r\n    {%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\r\n        {%- set as_of_dates_table = ref(as_of_dates_table) -%}\r\n    {%- endif %}\r\n\r\n    {{ adapter.dispatch('bridge', 'automate_dv')(src_pk=src_pk,\r\n                                              src_extra_columns=src_extra_columns,\r\n                                              src_ldts=src_ldts,\r\n                                              as_of_dates_table=as_of_dates_table,\r\n                                              bridge_walk=bridge_walk,\r\n                                              stage_tables_ldts=stage_tables_ldts,\r\n                                              source_model=source_model) -}}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.is_something", "macro.automate_dv.check_required_parameters", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.fabric__bridge"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.7410362, "supported_languages": null}, "macro.automate_dv.default__bridge": {"name": "default__bridge", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\snowflake\\bridge.sql", "original_file_path": "macros\\tables\\snowflake\\bridge.sql", "unique_id": "macro.automate_dv.default__bridge", "macro_sql": "{%- macro default__bridge(src_pk, src_extra_columns, src_ldts, as_of_dates_table, bridge_walk, stage_tables_ldts, source_model) -%}\r\n\r\n{%- set max_datetime = automate_dv.max_datetime() -%}\r\n\r\n{#- Setting the new AS_OF dates CTE name -#}\r\n{%- if automate_dv.is_any_incremental() -%}\r\n    {%- set new_as_of_dates_cte = 'new_rows_as_of'  -%}\r\n{%- else -%}\r\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\r\n{%- endif %}\r\n\r\nWITH as_of_dates AS (\r\n    SELECT *\r\n    FROM {{ as_of_dates_table }}\r\n),\r\n\r\n{%- if automate_dv.is_any_incremental() %}\r\n\r\n{{ automate_dv.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\r\n\r\noverlap AS (\r\n    {{ automate_dv.bridge_overlap_and_new_rows(src_pk, bridge_walk, 'overlap_pks', 'overlap_as_of') }}\r\n),\r\n{%- endif %}\r\n\r\nnew_rows AS (\r\n    {{ automate_dv.bridge_overlap_and_new_rows(src_pk, bridge_walk, ref(source_model), new_as_of_dates_cte) }}\r\n),\r\n\r\n{# Full data from bridge walk(s) -#}\r\nall_rows AS (\r\n    SELECT * FROM new_rows\r\n    {%- if automate_dv.is_any_incremental() %}\r\n    UNION ALL\r\n    SELECT * FROM overlap\r\n    {%- endif %}\r\n),\r\n\r\n{# Select most recent set of relationship key(s) for each as of date -#}\r\ncandidate_rows AS (\r\n    SELECT *\r\n    FROM (\r\n        SELECT *,\r\n               ROW_NUMBER() OVER (\r\n               PARTITION BY\r\n                   AS_OF_DATE,\r\n                   {% for bridge_step in bridge_walk.keys() -%}\r\n\r\n                       {%- set bridge_link_pk = bridge_walk[bridge_step]['bridge_link_pk'] -%}\r\n\r\n                       {{ bridge_link_pk }} {%- if not loop.last %}, {% endif -%}\r\n\r\n                   {%- endfor %}\r\n               ORDER BY\r\n                   {% for bridge_step in bridge_walk.keys() -%}\r\n\r\n                       {%- set bridge_load_date = bridge_walk[bridge_step]['bridge_load_date'] -%}\r\n\r\n                       {{ bridge_load_date }} DESC {%- if not loop.last %}, {% endif -%}\r\n\r\n                   {%- endfor %}\r\n               ) AS ROW_NUM\r\n        FROM all_rows\r\n    ) AS a\r\n    WHERE a.ROW_NUM = 1\r\n),\r\n\r\nbridge AS (\r\n    SELECT\r\n        {{ automate_dv.prefix([src_pk], 'c') }},\r\n        c.AS_OF_DATE,\r\n\r\n        {% for bridge_step in bridge_walk.keys() %}\r\n\r\n        {% set bridge_link_pk = bridge_walk[bridge_step]['bridge_link_pk'] %}\r\n        c.{{ bridge_link_pk }}\r\n        {%- if not loop.last %}, {%- endif -%}\r\n        {%- endfor %}\r\n\r\n    FROM candidate_rows AS c\r\n\r\n{%- for bridge_step in bridge_walk.keys() -%}\r\n    {%- set bridge_end_date = bridge_walk[bridge_step]['bridge_end_date'] %}\r\n\r\n    {% if loop.first -%} WHERE {%- else -%} AND {%- endif %} {{ automate_dv.cast_date(automate_dv.prefix([bridge_end_date], 'c')) }} = {{ automate_dv.cast_date(max_datetime, true, false) }}\r\n\r\n{% endfor -%}\r\n)\r\n\r\nSELECT * FROM bridge\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.max_datetime", "macro.automate_dv.is_any_incremental", "macro.automate_dv.as_of_date_window", "macro.automate_dv.bridge_overlap_and_new_rows", "macro.automate_dv.prefix", "macro.automate_dv.cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.7460322, "supported_languages": null}, "macro.automate_dv.eff_sat": {"name": "eff_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\snowflake\\eff_sat.sql", "original_file_path": "macros\\tables\\snowflake\\eff_sat.sql", "unique_id": "macro.automate_dv.eff_sat", "macro_sql": "\r\n\r\n{%- macro eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- automate_dv.check_required_parameters(src_pk=src_pk, src_dfk=src_dfk, src_sfk=src_sfk,\r\n                                           src_start_date=src_start_date, src_end_date=src_end_date,\r\n                                           src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\r\n                                           source_model=source_model) -}}\r\n\r\n    {{ automate_dv.prepend_generated_by() }}\r\n\r\n    {{ adapter.dispatch('eff_sat', 'automate_dv')(src_pk=src_pk, src_dfk=src_dfk, src_sfk=src_sfk,\r\n                                               src_extra_columns=src_extra_columns,\r\n                                               src_start_date=src_start_date, src_end_date=src_end_date,\r\n                                               src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\r\n                                               source_model=source_model) -}}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.fabric__eff_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.7550325, "supported_languages": null}, "macro.automate_dv.default__eff_sat": {"name": "default__eff_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\snowflake\\eff_sat.sql", "original_file_path": "macros\\tables\\snowflake\\eff_sat.sql", "unique_id": "macro.automate_dv.default__eff_sat", "macro_sql": "{%- macro default__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source]) -%}\r\n{%- set fk_cols = automate_dv.expand_column_list(columns=[src_dfk, src_sfk]) -%}\r\n{%- set dfk_cols = automate_dv.expand_column_list(columns=[src_dfk]) -%}\r\n{%- set is_auto_end_dating = config.get('is_auto_end_dating', default=false) %}\r\n\r\n{%- set max_datetime = automate_dv.max_datetime() %}\r\n\r\nWITH source_data AS (\r\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='source') }}\r\n    FROM {{ ref(source_model) }} AS a\r\n    WHERE {{ automate_dv.multikey(src_dfk, prefix='a', condition='IS NOT NULL') }}\r\n    AND {{ automate_dv.multikey(src_sfk, prefix='a', condition='IS NOT NULL') }}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n    AND __PERIOD_FILTER__\r\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\n    AND __RANK_FILTER__\r\n    {%- endif %}\r\n),\r\n\r\n{%- if automate_dv.is_any_incremental() %}\r\n\r\n{# Selecting the most recent records for each link hashkey -#}\r\nlatest_records AS (\r\n    SELECT * FROM (\r\n        SELECT {{ automate_dv.alias_all(source_cols, 'b') }},\r\n               ROW_NUMBER() OVER (\r\n                    PARTITION BY {{ automate_dv.prefix([src_pk], 'b') }}\r\n                    ORDER BY b.{{ src_ldts }} DESC\r\n               ) AS row_num\r\n        FROM {{ this }} AS b\r\n    ) AS inner\r\n    WHERE row_num = 1\r\n),\r\n\r\n{# Selecting the open records of the most recent records for each link hashkey -#}\r\nlatest_open AS (\r\n    SELECT {{ automate_dv.alias_all(source_cols, 'c') }}\r\n    FROM latest_records AS c\r\n    WHERE TO_DATE(c.{{ src_end_date }}) = TO_DATE('{{ max_datetime }}')\r\n),\r\n\r\n{# Selecting the closed records of the most recent records for each link hashkey -#}\r\nlatest_closed AS (\r\n    SELECT {{ automate_dv.alias_all(source_cols, 'd') }}\r\n    FROM latest_records AS d\r\n    WHERE TO_DATE(d.{{ src_end_date }}) != TO_DATE('{{ max_datetime }}')\r\n),\r\n\r\n{# Identifying the completely new link relationships to be opened in eff sat -#}\r\nnew_open_records AS (\r\n    SELECT DISTINCT\r\n        {{ automate_dv.prefix([src_pk], 'f') }},\r\n        {{ automate_dv.alias_all(fk_cols, 'f') }},\r\n        {% if automate_dv.is_something(src_extra_columns) %}\r\n            {{ automate_dv.prefix([src_extra_columns], 'f') }},\r\n        {% endif -%}\r\n        {%- if is_auto_end_dating %}\r\n        f.{{ src_eff }} AS {{ src_start_date }},\r\n        {% else %}\r\n        f.{{ src_start_date }} AS {{ src_start_date }},\r\n        {% endif %}\r\n        f.{{ src_end_date }} AS {{ src_end_date }},\r\n        f.{{ src_eff }} AS {{ src_eff }},\r\n        f.{{ src_ldts }},\r\n        f.{{ src_source }}\r\n    FROM source_data AS f\r\n    LEFT JOIN latest_records AS lr\r\n    ON {{ automate_dv.multikey(src_pk, prefix=['f','lr'], condition='=') }}\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='lr', condition='IS NULL') }}\r\n),\r\n\r\n{# Identifying the currently closed link relationships to be reopened in eff sat -#}\r\nnew_reopened_records AS (\r\n    SELECT DISTINCT\r\n        {{ automate_dv.prefix([src_pk], 'lc') }},\r\n        {{ automate_dv.alias_all(fk_cols, 'lc') }},\r\n        {% if automate_dv.is_something(src_extra_columns) %}\r\n            {{ automate_dv.prefix([src_extra_columns], 'g') }},\r\n        {% endif -%}\r\n        {%- if is_auto_end_dating %}\r\n        g.{{ src_eff }} AS {{ src_start_date }},\r\n        {% else %}\r\n        g.{{ src_start_date }} AS {{ src_start_date }},\r\n        {% endif %}\r\n        g.{{ src_end_date }} AS {{ src_end_date }},\r\n        g.{{ src_eff }} AS {{ src_eff }},\r\n        g.{{ src_ldts }},\r\n        g.{{ src_source }}\r\n    FROM source_data AS g\r\n    INNER JOIN latest_closed AS lc\r\n    ON {{ automate_dv.multikey(src_pk, prefix=['g','lc'], condition='=') }}\r\n    WHERE TO_DATE(g.{{ src_end_date }}) = TO_DATE('{{ max_datetime }}')\r\n),\r\n\r\n{%- if is_auto_end_dating %}\r\n\r\n{# Creating the closing records -#}\r\n{# Identifying the currently open relationships that need to be closed due to change in SFK(s) -#}\r\nnew_closed_records AS (\r\n    SELECT DISTINCT\r\n        {{ automate_dv.prefix([src_pk], 'lo') }},\r\n        {{ automate_dv.alias_all(fk_cols, 'lo') }},\r\n        {% if automate_dv.is_something(src_extra_columns) %}\r\n            {{ automate_dv.prefix([src_extra_columns], 'h') }},\r\n        {% endif -%}\r\n        lo.{{ src_start_date }} AS {{ src_start_date }},\r\n        h.{{ src_eff }} AS {{ src_end_date }},\r\n        h.{{ src_eff }} AS {{ src_eff }},\r\n        h.{{ src_ldts }},\r\n        lo.{{ src_source }}\r\n    FROM source_data AS h\r\n    INNER JOIN latest_open AS lo\r\n    ON {{ automate_dv.multikey(src_dfk, prefix=['lo', 'h'], condition='=') }}\r\n    WHERE ({{ automate_dv.multikey(src_sfk, prefix=['lo', 'h'], condition='<>', operator='OR') }})\r\n),\r\n\r\n{#- else if (not) is_auto_end_dating -#}\r\n{% else %}\r\n\r\nnew_closed_records AS (\r\n    SELECT DISTINCT\r\n        {{ automate_dv.prefix([src_pk], 'lo') }},\r\n        {{ automate_dv.alias_all(fk_cols, 'h') }},\r\n        {% if automate_dv.is_something(src_extra_columns) %}\r\n            {{ automate_dv.prefix([src_extra_columns], 'h') }},\r\n        {% endif -%}\r\n        h.{{ src_start_date }} AS {{ src_start_date }},\r\n        h.{{ src_end_date }} AS {{ src_end_date }},\r\n        h.{{ src_eff }} AS {{ src_eff }},\r\n        h.{{ src_ldts }},\r\n        lo.{{ src_source }}\r\n    FROM source_data AS h\r\n    LEFT JOIN latest_open AS lo\r\n    ON {{ automate_dv.multikey(src_pk, prefix=['lo', 'h'], condition='=') }}\r\n    LEFT JOIN latest_closed AS lc\r\n    ON {{ automate_dv.multikey(src_pk, prefix=['lc', 'h'], condition='=') }}\r\n    WHERE TO_DATE(h.{{ src_end_date }}) != TO_DATE('{{ max_datetime }}')\r\n    AND {{ automate_dv.multikey(src_pk, prefix='lo', condition='IS NOT NULL') }}\r\n    AND {{ automate_dv.multikey(src_pk, prefix='lc', condition='IS NULL') }}\r\n),\r\n\r\n{#- end if is_auto_end_dating -#}\r\n{%- endif %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT * FROM new_open_records\r\n    UNION\r\n    SELECT * FROM new_reopened_records\r\n    UNION\r\n    SELECT * FROM new_closed_records\r\n)\r\n\r\n{#- else if not automate_dv.is_any_incremental() -#}\r\n{%- else %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT {{ automate_dv.alias_all(source_cols, 'i') }}\r\n    FROM source_data AS i\r\n)\r\n\r\n{#- end if not automate_dv.is_any_incremental() -#}\r\n{%- endif %}\r\n\r\nSELECT * FROM records_to_insert\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.max_datetime", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental", "macro.automate_dv.alias_all", "macro.automate_dv.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.7660315, "supported_languages": null}, "macro.automate_dv.hub": {"name": "hub", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\snowflake\\hub.sql", "original_file_path": "macros\\tables\\snowflake\\hub.sql", "unique_id": "macro.automate_dv.hub", "macro_sql": "\r\n\r\n{%- macro hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- automate_dv.check_required_parameters(src_pk=src_pk, src_nk=src_nk,\r\n                                           src_ldts=src_ldts, src_source=src_source,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- if not automate_dv.is_list(source_model) -%}\r\n        {%- set source_model = [source_model] -%}\r\n    {%- endif -%}\r\n\r\n    {{ automate_dv.log_relation_sources(this, source_model | length) }}\r\n\r\n    {{- automate_dv.prepend_generated_by() -}}\r\n\r\n    {{- adapter.dispatch('hub', 'automate_dv')(src_pk=src_pk, src_nk=src_nk,\r\n                                            src_extra_columns=src_extra_columns,\r\n                                            src_ldts=src_ldts, src_source=src_source,\r\n                                            source_model=source_model) -}}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.is_list", "macro.automate_dv.log_relation_sources", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.fabric__hub"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.7750323, "supported_languages": null}, "macro.automate_dv.default__hub": {"name": "default__hub", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\snowflake\\hub.sql", "original_file_path": "macros\\tables\\snowflake\\hub.sql", "unique_id": "macro.automate_dv.default__hub", "macro_sql": "{%- macro default__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\r\n{%- endif %}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- set stage_count = source_model | length -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\nrow_rank_{{ source_number }} AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'rr') }},\r\n    {%- else %}\r\n    SELECT {{ automate_dv.prefix(source_cols, 'rr') }},\r\n    {%- endif %}\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'rr') }}\r\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'rr') }}\r\n           ) AS row_number\r\n    FROM {{ ref(src) }} AS rr\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\r\n    QUALIFY row_number = 1\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n),{{ \"\\n\" if not loop.last }}\r\n{% endfor -%}\r\n{% if stage_count > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- endif -%}\r\n\r\n{%- if stage_count > 1 %}\r\n\r\nrow_rank_union AS (\r\n    SELECT ru.*,\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'ru') }}\r\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\r\n           ) AS row_rank_number\r\n    FROM {{ ns.last_cte }} AS ru\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    QUALIFY row_rank_number = 1\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if automate_dv.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.7820337, "supported_languages": null}, "macro.automate_dv.link": {"name": "link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\snowflake\\link.sql", "original_file_path": "macros\\tables\\snowflake\\link.sql", "unique_id": "macro.automate_dv.link", "macro_sql": "\r\n\r\n{%- macro link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- automate_dv.check_required_parameters(src_pk=src_pk, src_fk=src_fk,\r\n                                           src_ldts=src_ldts, src_source=src_source,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- if not automate_dv.is_list(source_model) -%}\r\n        {%- set source_model = [source_model] -%}\r\n    {%- endif -%}\r\n\r\n    {{ automate_dv.log_relation_sources(this, source_model | length) }}\r\n\r\n    {{ automate_dv.prepend_generated_by() }}\r\n\r\n    {{ adapter.dispatch('link', 'automate_dv')(src_pk=src_pk, src_fk=src_fk,\r\n                                             src_extra_columns=src_extra_columns,\r\n                                             src_ldts=src_ldts, src_source=src_source,\r\n                                             source_model=source_model) -}}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.is_list", "macro.automate_dv.log_relation_sources", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.fabric__link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.7903717, "supported_languages": null}, "macro.automate_dv.default__link": {"name": "default__link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\snowflake\\link.sql", "original_file_path": "macros\\tables\\snowflake\\link.sql", "unique_id": "macro.automate_dv.default__link", "macro_sql": "{%- macro default__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\r\n{%- set fk_cols = automate_dv.expand_column_list([src_fk]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\r\n{%- endif %}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- set stage_count = source_model | length -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\nrow_rank_{{ source_number }} AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'rr') }},\r\n    {%- else %}\r\n    SELECT {{ automate_dv.prefix(source_cols, 'rr') }},\r\n    {%- endif %}\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'rr') }}\r\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'rr') }}\r\n           ) AS row_number\r\n    FROM {{ ref(src) }} AS rr\r\n    {%- if stage_count == 1 %}\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\r\n    AND {{ automate_dv.multikey(fk_cols, prefix='rr', condition='IS NOT NULL') }}\r\n    {%- endif %}\r\n    QUALIFY row_number = 1\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n),{{ \"\\n\" if not loop.last }}\r\n{% endfor -%}\r\n{% if stage_count > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{% endif %}\r\n{%- if stage_count > 1 %}\r\n\r\nrow_rank_union AS (\r\n    SELECT ru.*,\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'ru') }}\r\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\r\n           ) AS row_rank_number\r\n    FROM {{ ns.last_cte }} AS ru\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    AND {{ automate_dv.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\r\n    QUALIFY row_rank_number = 1\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if automate_dv.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.798372, "supported_languages": null}, "macro.automate_dv.ma_sat": {"name": "ma_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\snowflake\\ma_sat.sql", "original_file_path": "macros\\tables\\snowflake\\ma_sat.sql", "unique_id": "macro.automate_dv.ma_sat", "macro_sql": "\r\n\r\n{%- macro ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- automate_dv.check_required_parameters(src_pk=src_pk, src_cdk=src_cdk, src_hashdiff=src_hashdiff,\r\n                                           src_payload=src_payload, src_ldts=src_ldts, src_source=src_source,\r\n                                           source_model=source_model) -}}\r\n\r\n    {{ automate_dv.prepend_generated_by() }}\r\n\r\n    {{ adapter.dispatch('ma_sat', 'automate_dv')(src_pk=src_pk, src_cdk=src_cdk, src_hashdiff=src_hashdiff,\r\n                                               src_payload=src_payload, src_extra_columns=src_extra_columns,\r\n                                               src_eff=src_eff, src_ldts=src_ldts,\r\n                                               src_source=src_source, source_model=source_model) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.fabric__ma_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.8033798, "supported_languages": null}, "macro.automate_dv.default__ma_sat": {"name": "default__ma_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\snowflake\\ma_sat.sql", "original_file_path": "macros\\tables\\snowflake\\ma_sat.sql", "unique_id": "macro.automate_dv.default__ma_sat", "macro_sql": "\r\n\r\n{%- macro default__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_cdk, src_payload, src_extra_columns, src_hashdiff, src_eff, src_ldts, src_source]) -%}\r\n{%- set rank_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\r\n{%- set cdk_cols = automate_dv.expand_column_list(columns=[src_cdk]) -%}\r\n{%- set cols_for_latest = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_ldts]) %}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' -%}\r\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\r\n{%- endif %}\r\n\r\n{# Select unique source records #}\r\nWITH source_data AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT DISTINCT {{ automate_dv.prefix(source_cols_with_rank, 's', alias_target='source') }}\r\n    {%- else %}\r\n    SELECT DISTINCT {{ automate_dv.prefix(source_cols, 's', alias_target='source') }}\r\n    {%- endif %}\r\n    {% if automate_dv.is_any_incremental() %}\r\n        ,COUNT(DISTINCT {{ automate_dv.prefix([src_hashdiff], 's', alias_target='source') }}, {{ automate_dv.prefix(cdk_cols, 's', alias_target='source') }})\r\n            OVER (PARTITION BY {{ automate_dv.prefix([src_pk], 's') }}) AS source_count\r\n    {% endif %}\r\n    FROM {{ ref(source_model) }} AS s\r\n    WHERE {{ automate_dv.multikey([src_pk], prefix='s', condition='IS NOT NULL') }}\r\n    {%- for child_key in cdk_cols %}\r\n        AND {{ automate_dv.multikey(child_key, prefix='s', condition='IS NOT NULL') }}\r\n    {%- endfor %}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n        AND __PERIOD_FILTER__\r\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\n        AND __RANK_FILTER__\r\n    {%- endif %}\r\n),\r\n\r\n{# if any_incremental -#}\r\n{% if automate_dv.is_any_incremental() %}\r\n\r\n{# Select latest records from satellite, restricted to PKs in source data -#}\r\nlatest_records AS (\r\n    SELECT {{ automate_dv.prefix(cols_for_latest, 'mas', alias_target='target') }},\r\n           mas.latest_rank,\r\n           DENSE_RANK() OVER (PARTITION BY {{ automate_dv.prefix([src_pk], 'mas') }}\r\n                              ORDER BY {{ automate_dv.prefix([src_hashdiff], 'mas', alias_target='target') }}, {{ automate_dv.prefix(cdk_cols, 'mas') }} ASC\r\n           ) AS check_rank\r\n    FROM (\r\n    SELECT {{ automate_dv.prefix(cols_for_latest, 'inner_mas', alias_target='target') }},\r\n           RANK() OVER (PARTITION BY {{ automate_dv.prefix([src_pk], 'inner_mas') }}\r\n                        ORDER BY {{ automate_dv.prefix([src_ldts], 'inner_mas') }} DESC\r\n           ) AS latest_rank\r\n    FROM {{ this }} AS inner_mas\r\n        INNER JOIN (\r\n            SELECT DISTINCT {{ automate_dv.prefix([src_pk], 's') }}\r\n            FROM source_data as s\r\n        ) AS spk\r\n            ON {{ automate_dv.multikey([src_pk], prefix=['inner_mas', 'spk'], condition='=') }}\r\n            QUALIFY latest_rank = 1\r\n    ) AS mas\r\n),\r\n\r\n{# Select summary details for each group of latest records -#}\r\nlatest_group_details AS (\r\n    SELECT {{ automate_dv.prefix([src_pk], 'lr') }},\r\n           {{ automate_dv.prefix([src_ldts], 'lr') }},\r\n           MAX(lr.check_rank) AS latest_count\r\n    FROM latest_records AS lr\r\n    GROUP BY {{ automate_dv.prefix([src_pk], 'lr') }}, {{ automate_dv.prefix([src_ldts], 'lr') }}\r\n),\r\n\r\n{# endif any_incremental -#}\r\n{%- endif %}\r\n\r\n{# Select groups of source records where at least one member does not appear in a group of latest records -#}\r\nrecords_to_insert AS (\r\n    SELECT {{ automate_dv.alias_all(source_cols, 'source_data') }}\r\n    FROM source_data\r\n\r\n{# if any_incremental -#}\r\n{% if automate_dv.is_any_incremental() %}\r\n    WHERE EXISTS (\r\n        SELECT 1\r\n        FROM source_data AS stage\r\n        WHERE NOT EXISTS (\r\n            SELECT 1\r\n            FROM (\r\n                SELECT {{ automate_dv.prefix(cols_for_latest, 'lr', alias_target='target') }},\r\n                lg.latest_count\r\n                FROM latest_records AS lr\r\n                INNER JOIN latest_group_details AS lg\r\n                    ON {{ automate_dv.multikey([src_pk], prefix=['lr', 'lg'], condition='=') }}\r\n                    AND {{ automate_dv.prefix([src_ldts], 'lr') }} = {{ automate_dv.prefix([src_ldts], 'lg') }}\r\n            ) AS active_records\r\n            WHERE {{ automate_dv.multikey([src_pk], prefix=['stage', 'active_records'], condition='=') }}\r\n                AND {{ automate_dv.prefix([src_hashdiff], 'stage') }} = {{ automate_dv.prefix([src_hashdiff], 'active_records', alias_target='target') }}\r\n                AND {{ automate_dv.multikey(cdk_cols, prefix=['stage', 'active_records'], condition='=') }}\r\n                AND stage.source_count = active_records.latest_count\r\n        )\r\n        AND {{ automate_dv.multikey([src_pk], prefix=['source_data', 'stage'], condition='=') }}\r\n    )\r\n{# endif any_incremental -#}\r\n{%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.is_any_incremental", "macro.automate_dv.multikey", "macro.automate_dv.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.8113728, "supported_languages": null}, "macro.automate_dv.pit": {"name": "pit", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\snowflake\\pit.sql", "original_file_path": "macros\\tables\\snowflake\\pit.sql", "unique_id": "macro.automate_dv.pit", "macro_sql": "\r\n\r\n{%- macro pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\r\n\r\n    {%- if automate_dv.is_something(src_extra_columns) and execute -%}\r\n      {%- do exceptions.warn(\"WARNING: src_extra_columns not yet available for PITs or Bridges. This parameter will be ignored.\") -%}\r\n    {%- endif -%}\r\n\r\n    {{- automate_dv.check_required_parameters(src_pk=src_pk,\r\n                                           as_of_dates_table=as_of_dates_table,\r\n                                           satellites=satellites,\r\n                                           stage_tables_ldts=stage_tables_ldts,\r\n                                           src_ldts=src_ldts,\r\n                                           source_model=source_model) -}}\r\n\r\n    {{- automate_dv.prepend_generated_by() }}\r\n\r\n    {%- for stg in stage_tables_ldts %}\r\n        {{ \"-- depends_on: \" ~ ref(stg) -}}\r\n    {%- endfor -%}\r\n\r\n    {{ adapter.dispatch('pit', 'automate_dv')(src_pk=src_pk,\r\n                                           src_extra_columns=src_extra_columns,\r\n                                           as_of_dates_table=as_of_dates_table,\r\n                                           satellites=satellites,\r\n                                           stage_tables_ldts=stage_tables_ldts,\r\n                                           src_ldts=src_ldts,\r\n                                           source_model=source_model) -}}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.is_something", "macro.automate_dv.check_required_parameters", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.fabric__pit"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.8263717, "supported_languages": null}, "macro.automate_dv.default__pit": {"name": "default__pit", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\snowflake\\pit.sql", "original_file_path": "macros\\tables\\snowflake\\pit.sql", "unique_id": "macro.automate_dv.default__pit", "macro_sql": "{%- macro default__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\r\n\r\n{#- Acquiring the source relation for the AS_OF table -#}\r\n{%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\r\n    {%- set source_name = as_of_dates_table | first -%}\r\n    {%- set source_table_name = as_of_dates_table[source_name] -%}\r\n    {%- set as_of_table_relation = source(source_name, source_table_name) -%}\r\n{%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\r\n    {%- set as_of_table_relation = ref(as_of_dates_table) -%}\r\n{%- endif -%}\r\n\r\n{#- Setting ghost values to replace NULLS -#}\r\n{%- set ghost_pk = '0000000000000000' -%}\r\n{%- set ghost_date = '1900-01-01 00:00:00.000' %}\r\n{%- set hash = var('hash', 'MD5') -%}\r\n\r\n{%- set enable_ghost_record = var('enable_ghost_records', false) -%}\r\n\r\n{%- if automate_dv.is_any_incremental() -%}\r\n    {%- set new_as_of_dates_cte = 'new_rows_as_of' -%}\r\n{%- else -%}\r\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\r\n{%- endif %}\r\n\r\nWITH as_of_dates AS (\r\n    SELECT * FROM {{ as_of_table_relation }}\r\n),\r\n\r\n{%- if automate_dv.is_any_incremental() %}\r\n\r\n{{ automate_dv.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\r\n\r\nbackfill_rows_as_of_dates AS (\r\n    SELECT\r\n        {{ automate_dv.prefix([src_pk], 'a') }},\r\n        b.AS_OF_DATE\r\n    FROM new_rows_pks AS a\r\n    INNER JOIN backfill_as_of AS b\r\n        ON (1=1)\r\n),\r\n\r\nbackfill AS (\r\n    SELECT\r\n        {{ automate_dv.prefix([src_pk], 'a') }},\r\n        a.AS_OF_DATE,\r\n\r\n    {%- for sat_name in satellites -%}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\r\n        {%- set sat_name = sat_name -%}\r\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\r\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\r\n        {%- set column_str = \"{}.{}\".format(sat_name | lower ~ '_src', sat_ldts) -%}\r\n\r\n        {% if enable_ghost_record %}\r\n\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\r\n                 {{ automate_dv.binary_ghost(none, hash) }})\r\n        AS {{ sat_name }}_{{ sat_pk_name }},\r\n\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\r\n                 {{ automate_dv.date_ghost(date_type = sat_ldts.dtype, alias=none) }})\r\n        AS {{ sat_name }}_{{ sat_ldts_name }}\r\n\r\n        {%- else %}\r\n\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\r\n                 {{ automate_dv.cast_binary(ghost_pk, quote=true) }})\r\n        AS {{ sat_name }}_{{ sat_pk_name }},\r\n\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\r\n                 {{ automate_dv.cast_date(ghost_date, as_string=true, datetime=true) }})\r\n        AS {{ sat_name }}_{{ sat_ldts_name }}\r\n\r\n        {%- endif -%}\r\n\r\n        {%- if not loop.last -%},{%- endif -%}\r\n    {%- endfor %}\r\n\r\n    FROM backfill_rows_as_of_dates AS a\r\n\r\n    {%- for sat_name in satellites -%}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\r\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\r\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\r\n\r\n        LEFT OUTER JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\r\n            ON a.{{ src_pk }} = {{ sat_name | lower }}_src.{{ sat_pk }}\r\n            AND {{ sat_name | lower ~ '_src'}}.{{ sat_ldts }} <= a.AS_OF_DATE\r\n    {% endfor %}\r\n\r\n    GROUP BY\r\n        {{ automate_dv.prefix([src_pk], 'a') }}, a.AS_OF_DATE\r\n),\r\n{%- endif %}\r\n\r\nnew_rows_as_of_dates AS (\r\n    SELECT\r\n        {{ automate_dv.prefix([src_pk], 'a') }},\r\n        b.AS_OF_DATE\r\n    FROM {{ ref(source_model) }} AS a\r\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\r\n    ON (1=1)\r\n),\r\n\r\nnew_rows AS (\r\n    SELECT\r\n        {{ automate_dv.prefix([src_pk], 'a') }},\r\n        a.AS_OF_DATE,\r\n\r\n    {%- for sat_name in satellites -%}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list)[0] -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list)[0] -%}\r\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\r\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\r\n        {%- set column_str = \"{}.{}\".format(sat_name | lower ~ '_src', sat_ldts) -%}\r\n\r\n        {% if enable_ghost_record %}\r\n\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\r\n                 {{ automate_dv.binary_ghost(none, hash) }})\r\n        AS {{ sat_name }}_{{ sat_pk_name }},\r\n\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\r\n                 {{ automate_dv.date_ghost(date_type = sat_ldts.dtype, alias=none) }})\r\n        AS {{ sat_name }}_{{ sat_ldts_name }}\r\n\r\n        {%- else %}\r\n\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\r\n                 {{ automate_dv.cast_binary(ghost_pk, quote=true) }})\r\n        AS {{ sat_name }}_{{ sat_pk_name }},\r\n\r\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\r\n                 {{ automate_dv.cast_date(ghost_date, as_string=true, datetime=true) }})\r\n        AS {{ sat_name }}_{{ sat_ldts_name }}\r\n\r\n        {%- endif -%}\r\n\r\n        {%- if not loop.last -%},{%- endif -%}\r\n\r\n    {%- endfor %}\r\n\r\n    FROM new_rows_as_of_dates AS a\r\n\r\n    {%- for sat_name in satellites -%}\r\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\r\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\r\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\r\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\r\n\r\n        LEFT OUTER JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\r\n            ON a.{{ src_pk }} = {{ sat_name | lower }}_src.{{ sat_pk }}\r\n            AND {{ sat_name | lower ~ '_src'}}.{{ sat_ldts }} <= a.AS_OF_DATE\r\n    {% endfor %}\r\n\r\n    GROUP BY\r\n        {{ automate_dv.prefix([src_pk], 'a') }},\r\n        a.AS_OF_DATE\r\n),\r\n\r\npit AS (\r\n    SELECT * FROM new_rows\r\n    {%- if automate_dv.is_any_incremental() %}\r\n    UNION ALL\r\n    SELECT * FROM overlap_pks\r\n    UNION ALL\r\n    SELECT * FROM backfill\r\n    {% endif %}\r\n)\r\n\r\nSELECT DISTINCT * FROM pit\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_any_incremental", "macro.automate_dv.as_of_date_window", "macro.automate_dv.prefix", "macro.automate_dv.binary_ghost", "macro.automate_dv.date_ghost", "macro.automate_dv.cast_binary", "macro.automate_dv.cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.8393717, "supported_languages": null}, "macro.automate_dv.sat": {"name": "sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\snowflake\\sat.sql", "original_file_path": "macros\\tables\\snowflake\\sat.sql", "unique_id": "macro.automate_dv.sat", "macro_sql": "\r\n\r\n{%- macro sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- automate_dv.check_required_parameters(src_pk=src_pk, src_hashdiff=src_hashdiff, src_payload=src_payload,\r\n                                           src_ldts=src_ldts, src_source=src_source,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- set src_payload = automate_dv.process_payload_column_excludes(\r\n                              src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                              src_payload=src_payload, src_extra_columns=src_extra_columns, src_eff=src_eff,\r\n                              src_ldts=src_ldts, src_source=src_source, source_model=source_model) -%}\r\n\r\n    {{ automate_dv.prepend_generated_by() }}\r\n\r\n    {{ adapter.dispatch('sat', 'automate_dv')(src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                                           src_payload=src_payload, src_extra_columns=src_extra_columns,\r\n                                           src_eff=src_eff, src_ldts=src_ldts,\r\n                                           src_source=src_source, source_model=source_model) -}}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.process_payload_column_excludes", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.fabric__sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.8453717, "supported_languages": null}, "macro.automate_dv.default__sat": {"name": "default__sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\snowflake\\sat.sql", "original_file_path": "macros\\tables\\snowflake\\sat.sql", "unique_id": "macro.automate_dv.default__sat", "macro_sql": "{%- macro default__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\r\n{%- set window_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\r\n{%- set pk_cols = automate_dv.expand_column_list(columns=[src_pk]) -%}\r\n{%- set enable_ghost_record = var('enable_ghost_records', false) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\r\n{%- endif %}\r\n\r\nWITH source_data AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'a', alias_target='source') }}\r\n    {%- else %}\r\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='source') }}\r\n    {%- endif %}\r\n    FROM {{ ref(source_model) }} AS a\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='a', condition='IS NOT NULL') }}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n    AND __PERIOD_FILTER__\r\n    {% elif model.config.materialized == 'vault_insert_by_rank' %}\r\n    AND __RANK_FILTER__\r\n    {% endif %}\r\n),\r\n\r\n{%- if automate_dv.is_any_incremental() %}\r\n\r\nlatest_records AS (\r\n    SELECT {{ automate_dv.prefix(window_cols, 'a', alias_target='target') }}\r\n    FROM (\r\n        SELECT {{ automate_dv.prefix(window_cols, 'current_records', alias_target='target') }},\r\n            RANK() OVER (\r\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'current_records') }}\r\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'current_records') }} DESC\r\n            ) AS rank\r\n        FROM {{ this }} AS current_records\r\n            JOIN (\r\n                SELECT DISTINCT {{ automate_dv.prefix([src_pk], 'source_data') }}\r\n                FROM source_data\r\n            ) AS source_records\r\n                ON {{ automate_dv.multikey(src_pk, prefix=['current_records','source_records'], condition='=') }}\r\n    ) AS a\r\n    WHERE a.rank = 1\r\n),\r\n\r\n{%- endif %}\r\n\r\n{%- if enable_ghost_record %}\r\n\r\nghost AS (\r\n    {{ automate_dv.create_ghost_record(src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                                    src_payload=src_payload, src_extra_columns=src_extra_columns,\r\n                                    src_eff=src_eff, src_ldts=src_ldts,\r\n                                    src_source=src_source, source_model=source_model) }}\r\n),\r\n\r\n{%- endif %}\r\n\r\nrecords_to_insert AS (\r\n    {%- if enable_ghost_record %}\r\n    SELECT\r\n        {{ automate_dv.alias_all(source_cols, 'g') }}\r\n        FROM ghost AS g\r\n        {%- if automate_dv.is_any_incremental() %}\r\n        WHERE NOT EXISTS ( SELECT 1 FROM {{ this }} AS h WHERE {{ automate_dv.prefix([src_hashdiff], 'h', alias_target='target') }} = {{ automate_dv.prefix([src_hashdiff], 'g') }} )\r\n        {%- endif %}\r\n    UNION {% if target.type == 'bigquery' -%} DISTINCT {%- endif -%}\r\n    {%- endif %}\r\n    SELECT DISTINCT {{ automate_dv.alias_all(source_cols, 'stage') }}\r\n    FROM source_data AS stage\r\n    {%- if automate_dv.is_any_incremental() %}\r\n    LEFT JOIN latest_records\r\n    ON {{ automate_dv.multikey(src_pk, prefix=['latest_records','stage'], condition='=') }}\r\n        AND {{ automate_dv.prefix([src_hashdiff], 'latest_records', alias_target='target') }} = {{ automate_dv.prefix([src_hashdiff], 'stage') }}\r\n    WHERE {{ automate_dv.prefix([src_hashdiff], 'latest_records', alias_target='target') }} IS NULL\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental", "macro.automate_dv.create_ghost_record", "macro.automate_dv.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.8523736, "supported_languages": null}, "macro.automate_dv.t_link": {"name": "t_link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\snowflake\\t_link.sql", "original_file_path": "macros\\tables\\snowflake\\t_link.sql", "unique_id": "macro.automate_dv.t_link", "macro_sql": "\r\n\r\n{%- macro t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- automate_dv.check_required_parameters(src_pk=src_pk, src_fk=src_fk, src_eff=src_eff,\r\n                                           src_ldts=src_ldts, src_source=src_source,\r\n                                           source_model=source_model) -}}\r\n\r\n    {{ automate_dv.prepend_generated_by() }}\r\n\r\n    {{ adapter.dispatch('t_link', 'automate_dv')(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\r\n                                               src_extra_columns=src_extra_columns,\r\n                                               src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\r\n                                               source_model=source_model) -}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.fabric__t_link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.8553686, "supported_languages": null}, "macro.automate_dv.default__t_link": {"name": "default__t_link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\snowflake\\t_link.sql", "original_file_path": "macros\\tables\\snowflake\\t_link.sql", "unique_id": "macro.automate_dv.default__t_link", "macro_sql": "\r\n\r\n{%- macro default__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\r\n{%- set fk_cols = automate_dv.expand_column_list([src_fk]) %}\r\n\r\nWITH stage AS (\r\n    SELECT {{ source_cols | join(', ') }}\r\n    FROM {{ ref(source_model) }}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n    WHERE __PERIOD_FILTER__\r\n    AND {{ automate_dv.multikey(src_pk, condition='IS NOT NULL') }}\r\n    AND {{ automate_dv.multikey(fk_cols, condition='IS NOT NULL') }}\r\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\n    WHERE __RANK_FILTER__\r\n    AND {{ automate_dv.multikey(src_pk, condition='IS NOT NULL') }}\r\n    AND {{ automate_dv.multikey(fk_cols, condition='IS NOT NULL') }}\r\n    {%- else %}\r\n    WHERE {{ automate_dv.multikey(src_pk, condition='IS NOT NULL') }}\r\n    AND {{ automate_dv.multikey(fk_cols, condition='IS NOT NULL') }}\r\n    {%- endif %}\r\n),\r\nrecords_to_insert AS (\r\n    SELECT DISTINCT {{ automate_dv.prefix(source_cols, 'stg') }}\r\n    FROM stage AS stg\r\n    {% if automate_dv.is_any_incremental() -%}\r\n    LEFT JOIN {{ this }} AS tgt\r\n    ON {{ automate_dv.multikey(src_pk, prefix=['stg','tgt'], condition='=') }}\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='tgt', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.multikey", "macro.automate_dv.prefix", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.8573675, "supported_languages": null}, "macro.automate_dv.xts": {"name": "xts", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\snowflake\\xts.sql", "original_file_path": "macros\\tables\\snowflake\\xts.sql", "unique_id": "macro.automate_dv.xts", "macro_sql": "\r\n\r\n{%- macro xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n    {{- automate_dv.check_required_parameters(src_pk=src_pk, src_satellite=src_satellite,\r\n                                           src_ldts=src_ldts, src_source=src_source,\r\n                                           source_model=source_model) -}}\r\n\r\n    {%- if not automate_dv.is_list(source_model) -%}\r\n        {%- set source_model = [source_model] -%}\r\n    {%- endif -%}\r\n\r\n    {{ automate_dv.prepend_generated_by() }}\r\n\r\n    {{ adapter.dispatch('xts', 'automate_dv')(src_pk=src_pk,\r\n                                            src_satellite=src_satellite,\r\n                                            src_extra_columns=src_extra_columns,\r\n                                            src_ldts=src_ldts,\r\n                                            src_source=src_source,\r\n                                            source_model=source_model) -}}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.is_list", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.fabric__xts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.86437, "supported_languages": null}, "macro.automate_dv.default__xts": {"name": "default__xts", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\snowflake\\xts.sql", "original_file_path": "macros\\tables\\snowflake\\xts.sql", "unique_id": "macro.automate_dv.default__xts", "macro_sql": "{%- macro default__xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set hashdiff_col_name_alias = 'HASHDIFF' -%}\r\n{%- set satellite_name_col_name_alias = 'SATELLITE_NAME' %}\r\n{%- set satellite_count = src_satellite.keys() | list | length %}\r\n{%- set stage_count = source_model | length %}\r\n\r\n{%- if execute -%}\r\n    {%- do dbt_utils.log_info('Loading {} from {} source(s) and {} satellite(s)'.format(\"{}.{}.{}\".format(this.database, this.schema, this.identifier),\r\n                                                                                        stage_count, satellite_count)) -%}\r\n{%- endif %}\r\n\r\n{%- set ns = namespace(last_cte= \"\") %}\r\n\r\n{{ 'WITH ' }}\r\n{%- for src in source_model -%}\r\n    {%- for satellite in src_satellite.items() -%}\r\n        {%- set satellite_name = (satellite[1]['sat_name'].values() | list)[0] -%}\r\n        {%- set hashdiff = (satellite[1]['hashdiff'].values() | list)[0] %}\r\n        {%- set cte_name = \"satellite_{}_from_{}\".format(satellite_name, src) | lower %}\r\n\r\n{{ cte_name }} AS (\r\n    SELECT {{ automate_dv.prefix([src_pk], 's') }},\r\n           s.{{ hashdiff }} AS {{ hashdiff_col_name_alias }},\r\n           s.{{ satellite_name }} AS {{ satellite_name_col_name_alias }},\r\n           {%- if automate_dv.is_something(src_extra_columns) -%}\r\n               {{ automate_dv.prefix([src_extra_columns], 's') }},\r\n           {%- endif %}\r\n           s.{{ src_ldts }},\r\n           s.{{ src_source }}\r\n    FROM {{ ref(src) }} AS s\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='s', condition='IS NOT NULL') }}\r\n),\r\n\r\n    {%- set ns.last_cte = cte_name %}\r\n    {%- endfor %}\r\n{%- endfor %}\r\n\r\n{%- if stage_count > 1 or satellite_count > 1 %}\r\n\r\nunion_satellites AS (\r\n    {%- for src in source_model %}\r\n        {%- for satellite in src_satellite.items() %}\r\n            {%- set satellite_name = (satellite[1]['sat_name'].values() | list)[0]  %}\r\n            {%- set cte_name = \"satellite_{}_from_{}\".format(satellite_name, src) | lower %}\r\n    SELECT * FROM {{ cte_name }}\r\n            {%- if not loop.last %}\r\n    UNION ALL\r\n            {%- endif %}\r\n        {%- endfor %}\r\n        {%- if not loop.last %}\r\n    UNION ALL\r\n        {%- endif %}\r\n    {%- endfor %}\r\n),\r\n{%- set ns.last_cte = \"union_satellites\" -%}\r\n{%- endif %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT DISTINCT\r\n        {{ automate_dv.prefix([src_pk], 'a') }},\r\n        a.{{ hashdiff_col_name_alias }},\r\n        a.{{ satellite_name_col_name_alias }},\r\n        {%- if automate_dv.is_something(src_extra_columns) -%}\r\n            {{ automate_dv.prefix([src_extra_columns], 'a') }},\r\n        {%- endif %}\r\n        a.{{ src_ldts }},\r\n        a.{{ src_source }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if automate_dv.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n        ON (\r\n            a.{{ hashdiff_col_name_alias }} = d.{{ hashdiff_col_name_alias }}\r\n            AND a.{{ src_ldts }} = d.{{ src_ldts }}\r\n            AND a.{{ satellite_name_col_name_alias }} = d.{{ satellite_name_col_name_alias }}\r\n        )\r\n    WHERE d.{{ hashdiff_col_name_alias }} IS NULL\r\n    AND d.{{ src_ldts }} IS NULL\r\n    AND d.{{ satellite_name_col_name_alias }} IS NULL\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.log_info", "macro.automate_dv.prefix", "macro.automate_dv.is_something", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.871368, "supported_languages": null}, "macro.automate_dv.fabric__bridge": {"name": "fabric__bridge", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\sqlserver\\bridge.sql", "original_file_path": "macros\\tables\\sqlserver\\bridge.sql", "unique_id": "macro.automate_dv.fabric__bridge", "macro_sql": "\r\n\r\n{%- macro fabric__bridge(src_pk, as_of_dates_table, bridge_walk, stage_tables_ldts, src_extra_columns, src_ldts, source_model) -%}\r\n\r\n{{ automate_dv.default__bridge(src_pk=src_pk,\r\n                            as_of_dates_table=as_of_dates_table,\r\n                            bridge_walk=bridge_walk,\r\n                            stage_tables_ldts=stage_tables_ldts,\r\n                            src_extra_columns=src_extra_columns,\r\n                            src_ldts=src_ldts,\r\n                            source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__bridge"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.8723688, "supported_languages": null}, "macro.automate_dv.fabric__eff_sat": {"name": "fabric__eff_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\sqlserver\\eff_sat.sql", "original_file_path": "macros\\tables\\sqlserver\\eff_sat.sql", "unique_id": "macro.automate_dv.fabric__eff_sat", "macro_sql": "\r\n\r\n{%- macro fabric__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source]) -%}\r\n{%- set fk_cols = automate_dv.expand_column_list(columns=[src_dfk, src_sfk]) -%}\r\n{%- set dfk_cols = automate_dv.expand_column_list(columns=[src_dfk]) -%}\r\n{%- set is_auto_end_dating = config.get('is_auto_end_dating', default=false) %}\r\n\r\n{%- set max_datetime = automate_dv.max_datetime() %}\r\n\r\nWITH source_data AS (\r\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='source') }}\r\n    FROM {{ ref(source_model) }} AS a\r\n    WHERE {{ automate_dv.multikey(src_dfk, prefix='a', condition='IS NOT NULL') }}\r\n    AND {{ automate_dv.multikey(src_sfk, prefix='a', condition='IS NOT NULL') }}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n    AND __PERIOD_FILTER__\r\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\n    AND __RANK_FILTER__\r\n    {%- endif %}\r\n),\r\n\r\n{%- if automate_dv.is_any_incremental() %}\r\n\r\n{# Selecting the most recent records for each link hashkey -#}\r\nlatest_records AS (\r\n    SELECT *\r\n    FROM\r\n    (\r\n        SELECT {{ automate_dv.alias_all(source_cols, 'b') }},\r\n               ROW_NUMBER() OVER (\r\n                    PARTITION BY {{ automate_dv.prefix([src_pk], 'b') }}\r\n                    ORDER BY b.{{ src_ldts }} DESC\r\n               ) AS row_num\r\n        FROM {{ this }} AS b\r\n    ) l\r\n    WHERE l.row_num = 1\r\n),\r\n\r\n{# Selecting the open records of the most recent records for each link hashkey -#}\r\nlatest_open AS (\r\n    SELECT {{ automate_dv.alias_all(source_cols, 'c') }}\r\n    FROM latest_records AS c\r\n    WHERE CONVERT(DATE, c.{{ src_end_date }}) = CONVERT(DATE, '{{ max_datetime }}')\r\n),\r\n\r\n{# Selecting the closed records of the most recent records for each link hashkey -#}\r\nlatest_closed AS (\r\n    SELECT {{ automate_dv.alias_all(source_cols, 'd') }}\r\n    FROM latest_records AS d\r\n    WHERE CONVERT(DATE, d.{{ src_end_date }}) != CONVERT(DATE, '{{ max_datetime }}')\r\n),\r\n\r\n{# Identifying the completely new link relationships to be opened in eff sat -#}\r\nnew_open_records AS (\r\n    SELECT DISTINCT\r\n        {{ automate_dv.prefix([src_pk], 'f') }},\r\n        {{ automate_dv.alias_all(fk_cols, 'f') }},\r\n        {%- if automate_dv.is_something(src_extra_columns) -%}\r\n        {{ automate_dv.prefix([src_extra_columns], 'f') }},\r\n        {%- endif -%}\r\n        {%- if is_auto_end_dating %}\r\n        f.{{ src_eff }} AS {{ src_start_date }},\r\n        {% else %}\r\n        f.{{ src_start_date }} AS {{ src_start_date }},\r\n        {% endif %}\r\n        f.{{ src_end_date }} AS {{ src_end_date }},\r\n        f.{{ src_eff }} AS {{ src_eff }},\r\n        f.{{ src_ldts }},\r\n        f.{{ src_source }}\r\n    FROM source_data AS f\r\n    LEFT JOIN latest_records AS lr\r\n    ON {{ automate_dv.multikey(src_pk, prefix=['f','lr'], condition='=') }}\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='lr', condition='IS NULL') }}\r\n),\r\n\r\n{# Identifying the currently closed link relationships to be reopened in eff sat -#}\r\nnew_reopened_records AS (\r\n    SELECT DISTINCT\r\n        {{ automate_dv.prefix([src_pk], 'lc') }},\r\n        {{ automate_dv.alias_all(fk_cols, 'lc') }},\r\n        {%- if automate_dv.is_something(src_extra_columns) -%}\r\n        {{ automate_dv.prefix([src_extra_columns], 'g') }},\r\n        {%- endif -%}\r\n        {%- if is_auto_end_dating %}\r\n        g.{{ src_eff }} AS {{ src_start_date }},\r\n        {% else %}\r\n        g.{{ src_start_date }} AS {{ src_start_date }},\r\n        {% endif %}\r\n        g.{{ src_end_date }} AS {{ src_end_date }},\r\n        g.{{ src_eff }} AS {{ src_eff }},\r\n        g.{{ src_ldts }},\r\n        g.{{ src_source }}\r\n    FROM source_data AS g\r\n    INNER JOIN latest_closed AS lc\r\n    ON {{ automate_dv.multikey(src_pk, prefix=['g','lc'], condition='=') }}\r\n    WHERE CAST((g.{{ src_end_date }}) AS DATE) = CAST(('{{ max_datetime }}') AS DATE)\r\n),\r\n\r\n{%- if is_auto_end_dating %}\r\n\r\n{# Creating the closing records -#}\r\n{# Identifying the currently open relationships that need to be closed due to change in SFK(s) -#}\r\nnew_closed_records AS (\r\n    SELECT DISTINCT\r\n        {{ automate_dv.prefix([src_pk], 'lo') }},\r\n        {{ automate_dv.alias_all(fk_cols, 'lo') }},\r\n        {%- if automate_dv.is_something(src_extra_columns) -%}\r\n        {{ automate_dv.prefix([src_extra_columns], 'h') }},\r\n        {%- endif -%}\r\n        lo.{{ src_start_date }} AS {{ src_start_date }},\r\n        h.{{ src_eff }} AS {{ src_end_date }},\r\n        h.{{ src_eff }} AS {{ src_eff }},\r\n        h.{{ src_ldts }},\r\n        lo.{{ src_source }}\r\n    FROM source_data AS h\r\n    INNER JOIN latest_open AS lo\r\n    ON {{ automate_dv.multikey(src_dfk, prefix=['lo', 'h'], condition='=') }}\r\n    WHERE ({{ automate_dv.multikey(src_sfk, prefix=['lo', 'h'], condition='<>', operator='OR') }})\r\n),\r\n\r\n{#- else if (not) is_auto_end_dating -#}\r\n{% else %}\r\n\r\nnew_closed_records AS (\r\n    SELECT DISTINCT\r\n        {{ automate_dv.prefix([src_pk], 'lo') }},\r\n        {{ automate_dv.alias_all(fk_cols, 'lo') }},\r\n        {%- if automate_dv.is_something(src_extra_columns) -%}\r\n        {{ automate_dv.prefix([src_extra_columns], 'h') }},\r\n        {%- endif -%}\r\n        h.{{ src_start_date }} AS {{ src_start_date }},\r\n        h.{{ src_end_date }} AS {{ src_end_date }},\r\n        h.{{ src_eff }} AS {{ src_eff }},\r\n        h.{{ src_ldts }},\r\n        lo.{{ src_source }}\r\n    FROM source_data AS h\r\n    LEFT JOIN latest_open AS lo\r\n    ON lo.{{ src_pk }} = h.{{ src_pk }}\r\n    LEFT JOIN latest_closed AS lc\r\n    ON lc.{{ src_pk }} = h.{{ src_pk }}\r\n    WHERE CAST((h.{{ src_end_date }}) AS DATE) != CAST(('{{ max_datetime }}') AS DATE)\r\n    AND lo.{{ src_pk }} IS NOT NULL\r\n    AND lc.{{ src_pk }} IS NULL\r\n),\r\n\r\n{#- end if is_auto_end_dating -#}\r\n{%- endif %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT * FROM new_open_records\r\n    UNION\r\n    SELECT * FROM new_reopened_records\r\n    UNION\r\n    SELECT * FROM new_closed_records\r\n)\r\n\r\n{#- else if not automate_dv.is_any_incremental() -#}\r\n{%- else %}\r\n\r\nrecords_to_insert AS (\r\n    SELECT {{ automate_dv.alias_all(source_cols, 'i') }}\r\n    FROM source_data AS i\r\n)\r\n\r\n{#- end if not automate_dv.is_any_incremental() -#}\r\n{%- endif %}\r\n\r\nSELECT * FROM records_to_insert\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.max_datetime", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental", "macro.automate_dv.alias_all", "macro.automate_dv.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.8853703, "supported_languages": null}, "macro.automate_dv.fabric__hub": {"name": "fabric__hub", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\sqlserver\\hub.sql", "original_file_path": "macros\\tables\\sqlserver\\hub.sql", "unique_id": "macro.automate_dv.fabric__hub", "macro_sql": "\r\n\r\n{%- macro fabric__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\r\n{%- endif %}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- set stage_count = source_model | length -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\nrow_rank_{{ source_number }} AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ source_cols_with_rank | join(', ') }}\r\n    {%- else %}\r\n    SELECT {{ source_cols | join(', ') }}\r\n    {%- endif %}\r\n    FROM (\r\n        {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n        SELECT {{ automate_dv.prefix(source_cols_with_rank, 'rr') }},\r\n        {%- else %}\r\n        SELECT {{ automate_dv.prefix(source_cols, 'rr') }},\r\n        {%- endif %}\r\n               ROW_NUMBER() OVER(\r\n                   PARTITION BY {{ automate_dv.prefix([src_pk], 'rr') }}\r\n                   ORDER BY {{ automate_dv.prefix([src_ldts], 'rr') }}\r\n               ) AS row_number\r\n        FROM {{ ref(src) }} AS rr\r\n        WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\r\n    ) h\r\n    WHERE h.row_number = 1\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n),{{ \"\\n\" if not loop.last }}\r\n{% endfor -%}\r\n{% if stage_count > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- endif -%}\r\n\r\n{%- if stage_count > 1 %}\r\n\r\nrow_rank_union AS (\r\n    SELECT *\r\n    FROM (\r\n        SELECT ru.*,\r\n               ROW_NUMBER() OVER(\r\n                   PARTITION BY {{ automate_dv.prefix([src_pk], 'ru') }}\r\n                   ORDER BY {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\r\n               ) AS row_rank_number\r\n        FROM {{ ns.last_cte }} AS ru\r\n        WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    ) h\r\n    WHERE h.row_rank_number = 1\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if automate_dv.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.8953717, "supported_languages": null}, "macro.automate_dv.fabric__link": {"name": "fabric__link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\sqlserver\\link.sql", "original_file_path": "macros\\tables\\sqlserver\\link.sql", "unique_id": "macro.automate_dv.fabric__link", "macro_sql": "\r\n\r\n{%- macro fabric__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\r\n{%- set fk_cols = automate_dv.expand_column_list([src_fk]) -%}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\r\n{%- endif -%}\r\n\r\n{{ 'WITH ' -}}\r\n\r\n{%- set stage_count = source_model | length -%}\r\n\r\n{%- set ns = namespace(last_cte= \"\") -%}\r\n\r\n{%- for src in source_model -%}\r\n\r\n{%- set source_number = loop.index | string -%}\r\n\r\nrow_rank_{{ source_number }} AS (\r\n    SELECT *\r\n    FROM\r\n    (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'rr') }},\r\n    {%- else %}\r\n    SELECT {{ automate_dv.prefix(source_cols, 'rr') }},\r\n    {%- endif %}\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'rr') }}\r\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'rr') }}\r\n           ) AS row_number\r\n    FROM {{ ref(src) }} AS rr\r\n    {%- if stage_count == 1 %}\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\r\n    AND {{ automate_dv.multikey(fk_cols, prefix='rr', condition='IS NOT NULL') }}\r\n    {%- endif %}\r\n    ) l\r\n    WHERE l.row_number = 1\r\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\r\n),{{ \"\\n\" if not loop.last }}\r\n{% endfor -%}\r\n{% if stage_count > 1 %}\r\nstage_union AS (\r\n    {%- for src in source_model %}\r\n    SELECT * FROM row_rank_{{ loop.index | string }}\r\n    {%- if not loop.last %}\r\n    UNION ALL\r\n    {%- endif %}\r\n    {%- endfor %}\r\n    {%- set ns.last_cte = \"stage_union\" %}\r\n),\r\n{%- endif -%}\r\n{%- if model.config.materialized == 'vault_insert_by_period' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __PERIOD_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\nstage_mat_filter AS (\r\n    SELECT *\r\n    FROM {{ ns.last_cte }}\r\n    WHERE __RANK_FILTER__\r\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\r\n),\r\n{% endif %}\r\n{%- if stage_count > 1 %}\r\n\r\nrow_rank_union AS (\r\n    SELECT *\r\n    FROM\r\n    (\r\n    SELECT ru.*,\r\n           ROW_NUMBER() OVER(\r\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'ru') }}\r\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\r\n           ) AS row_rank_number\r\n    FROM {{ ns.last_cte }} AS ru\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\r\n    AND {{ automate_dv.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\r\n    ) r\r\n    WHERE r.row_rank_number = 1\r\n    {%- set ns.last_cte = \"row_rank_union\" %}\r\n),\r\n{% endif %}\r\nrecords_to_insert AS (\r\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\r\n    FROM {{ ns.last_cte }} AS a\r\n    {%- if automate_dv.is_any_incremental() %}\r\n    LEFT JOIN {{ this }} AS d\r\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\r\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\r\n    {%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9053724, "supported_languages": null}, "macro.automate_dv.fabric__ma_sat": {"name": "fabric__ma_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\sqlserver\\ma_sat.sql", "original_file_path": "macros\\tables\\sqlserver\\ma_sat.sql", "unique_id": "macro.automate_dv.fabric__ma_sat", "macro_sql": "\r\n\r\n{%- macro fabric__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\r\n{%- set rank_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\r\n{%- set cdk_cols = automate_dv.expand_column_list(columns=[src_cdk]) -%}\r\n{%- set cols_for_latest = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_ldts]) %}\r\n\r\n{%- if model.config.materialized == 'vault_insert_by_rank' -%}\r\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\r\n{%- endif -%}\r\n\r\n{# Select unique source records -#}\r\nWITH source_data AS (\r\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\r\n    SELECT DISTINCT {{ automate_dv.prefix(source_cols_with_rank, 's', alias_target='source') }}\r\n    {%- else %}\r\n    SELECT DISTINCT {{ automate_dv.prefix(source_cols, 's', alias_target='source') }}\r\n    {%- endif %}\r\n    FROM {{ ref(source_model) }} AS s\r\n    WHERE {{ automate_dv.multikey([src_pk], prefix='s', condition='IS NOT NULL') }}\r\n    {%- for child_key in src_cdk %}\r\n        AND {{ automate_dv.multikey(child_key, prefix='s', condition='IS NOT NULL') }}\r\n    {%- endfor %}\r\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\r\n        AND __PERIOD_FILTER__\r\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\r\n        AND __RANK_FILTER__\r\n    {%- endif %}\r\n),\r\n\r\n{# if any_incremental -#}\r\n{% if automate_dv.is_any_incremental() %}\r\n\r\nsource_data_with_count AS (\r\n    SELECT a.*\r\n        ,b.source_count\r\n    FROM source_data a\r\n    INNER JOIN\r\n    (\r\n        SELECT {{ automate_dv.prefix([src_pk], 't') }}\r\n            ,COUNT(*) AS source_count\r\n        FROM (SELECT DISTINCT {{ automate_dv.prefix([src_pk], 's') }}, {{ automate_dv.prefix([src_hashdiff], 's', alias_target='source') }}, {{ automate_dv.prefix(cdk_cols, 's') }} FROM source_data AS s) AS t\r\n        GROUP BY {{ automate_dv.prefix([src_pk], 't') }}\r\n    ) AS b\r\n    ON {{ automate_dv.multikey([src_pk], prefix=['a','b'], condition='=') }}\r\n),\r\n\r\n{# Select latest records from satellite, restricted to PKs in source data -#}\r\nlatest_records AS (\r\n    SELECT {{ automate_dv.prefix(cols_for_latest, 'mas', alias_target='target') }}\r\n        ,mas.latest_rank\r\n        ,DENSE_RANK() OVER (PARTITION BY {{ automate_dv.prefix([src_pk], 'mas') }}\r\n            ORDER BY {{ automate_dv.prefix([src_hashdiff], 'mas', alias_target='target') }}, {{ automate_dv.prefix([src_cdk], 'mas') }} ASC) AS check_rank\r\n    FROM\r\n    (\r\n    SELECT {{ automate_dv.prefix(cols_for_latest, 'inner_mas', alias_target='target') }}\r\n        ,RANK() OVER (PARTITION BY {{ automate_dv.prefix([src_pk], 'inner_mas') }}\r\n            ORDER BY {{ automate_dv.prefix([src_ldts], 'inner_mas') }} DESC) AS latest_rank\r\n    FROM {{ this }} AS inner_mas\r\n    INNER JOIN (SELECT DISTINCT {{ automate_dv.prefix([src_pk], 's') }} FROM source_data as s ) AS spk\r\n        ON {{ automate_dv.multikey([src_pk], prefix=['inner_mas', 'spk'], condition='=') }}\r\n    ) AS mas\r\n    WHERE latest_rank = 1\r\n),\r\n\r\n{# Select summary details for each group of latest records -#}\r\nlatest_group_details AS (\r\n    SELECT {{ automate_dv.prefix([src_pk], 'lr') }}\r\n        ,{{ automate_dv.prefix([src_ldts], 'lr') }}\r\n        ,MAX(lr.check_rank) AS latest_count\r\n    FROM latest_records AS lr\r\n    GROUP BY {{ automate_dv.prefix([src_pk], 'lr') }}, {{ automate_dv.prefix([src_ldts], 'lr') }}\r\n),\r\n\r\n{# endif any_incremental -#}\r\n{%- endif %}\r\n\r\n{# Select groups of source records where at least one member does not appear in a group of latest records -#}\r\nrecords_to_insert AS (\r\n{% if not automate_dv.is_any_incremental() %}\r\n    SELECT {{ automate_dv.alias_all(source_cols, 'source_data') }}\r\n    FROM source_data\r\n{%- endif %}\r\n\r\n{# if any_incremental -#}\r\n{% if automate_dv.is_any_incremental() %}\r\n    SELECT {{ automate_dv.alias_all(source_cols, 'source_data_with_count') }}\r\n    FROM source_data_with_count\r\n    WHERE EXISTS (\r\n        SELECT 1\r\n        FROM source_data_with_count AS stage\r\n        WHERE NOT EXISTS (\r\n            SELECT 1\r\n            FROM (\r\n                SELECT {{ automate_dv.prefix(cols_for_latest, 'lr', alias_target='target') }}\r\n                ,lg.latest_count\r\n                FROM latest_records AS lr\r\n                INNER JOIN latest_group_details AS lg\r\n                    ON {{ automate_dv.multikey([src_pk], prefix=['lr', 'lg'], condition='=') }}\r\n                    AND {{ automate_dv.prefix([src_ldts], 'lr') }} = {{ automate_dv.prefix([src_ldts], 'lg') }}\r\n            ) AS active_records\r\n            WHERE {{ automate_dv.multikey([src_pk], prefix=['stage', 'active_records'], condition='=') }}\r\n                AND {{ automate_dv.prefix([src_hashdiff], 'stage') }} = {{ automate_dv.prefix([src_hashdiff], 'active_records', alias_target='target') }}\r\n{# In order to maintain the parallel with the standard satellite, we don''t allow for groups of records to be updated if the ldts is the only difference #}\r\n{#        AND {{ automate_dv.prefix([src_ldts], 'stage') }} = {{ automate_dv.prefix([src_ldts], 'active_records') }} #}\r\n                AND {{ automate_dv.multikey(src_cdk, prefix=['stage', 'active_records'], condition='=') }}\r\n                AND stage.source_count = active_records.latest_count\r\n        )\r\n        AND {{ automate_dv.multikey([src_pk], prefix=['source_data_with_count', 'stage'], condition='=') }}\r\n    )\r\n{# endif any_incremental -#}\r\n{%- endif %}\r\n)\r\n\r\nSELECT * FROM records_to_insert\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental", "macro.automate_dv.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.916372, "supported_languages": null}, "macro.automate_dv.fabric__pit": {"name": "fabric__pit", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\sqlserver\\pit.sql", "original_file_path": "macros\\tables\\sqlserver\\pit.sql", "unique_id": "macro.automate_dv.fabric__pit", "macro_sql": "\r\n\r\n{%- macro fabric__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\r\n\r\n{{ automate_dv.default__pit(src_pk=src_pk,\r\n                         src_extra_columns=src_extra_columns,\r\n                         as_of_dates_table=as_of_dates_table,\r\n                         satellites=satellites,\r\n                         stage_tables_ldts=stage_tables_ldts,\r\n                         src_ldts=src_ldts,\r\n                         source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__pit"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9173727, "supported_languages": null}, "macro.automate_dv.fabric__sat": {"name": "fabric__sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\sqlserver\\sat.sql", "original_file_path": "macros\\tables\\sqlserver\\sat.sql", "unique_id": "macro.automate_dv.fabric__sat", "macro_sql": "\r\n\r\n{%- macro fabric__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n    {{ automate_dv.default__sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\r\n                             src_payload=src_payload, src_extra_columns=src_extra_columns,\r\n                             src_eff=src_eff, src_ldts=src_ldts,\r\n                             src_source=src_source, source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.918369, "supported_languages": null}, "macro.automate_dv.fabric__t_link": {"name": "fabric__t_link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\sqlserver\\t_link.sql", "original_file_path": "macros\\tables\\sqlserver\\t_link.sql", "unique_id": "macro.automate_dv.fabric__t_link", "macro_sql": "\r\n\r\n{%- macro fabric__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\r\n\r\n{{ automate_dv.default__t_link(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\r\n                            src_extra_columns=src_extra_columns,\r\n                            src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\r\n                            source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__t_link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9203959, "supported_languages": null}, "macro.automate_dv.fabric__xts": {"name": "fabric__xts", "resource_type": "macro", "package_name": "automate_dv", "path": "macros\\tables\\sqlserver\\xts.sql", "original_file_path": "macros\\tables\\sqlserver\\xts.sql", "unique_id": "macro.automate_dv.fabric__xts", "macro_sql": "\r\n\r\n{%- macro fabric__xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\r\n\r\n{{ automate_dv.default__xts(src_pk=src_pk,\r\n                         src_satellite=src_satellite,\r\n                         src_extra_columns=src_extra_columns,\r\n                         src_ldts=src_ldts,\r\n                         src_source=src_source,\r\n                         source_model=source_model) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__xts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9213693, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.923369, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9243689, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9263685, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9283726, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9293728, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9293728, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.931372, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9323726, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.934372, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9373713, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9383724, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.939372, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9413722, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.943372, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9483676, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9513676, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9523723, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9543734, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9553723, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9573724, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.958372, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9593723, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.961376, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9643736, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9663732, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9693754, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.972373, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9733865, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9763734, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.978371, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9803698, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9813724, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9823709, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.98337, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.98337, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9843707, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9853766, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9873745, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9903765, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_ephemeral.sql", "original_file_path": "macros\\jinja_helpers\\_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9923718, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_relation.sql", "original_file_path": "macros\\jinja_helpers\\_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9943752, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9963741, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.998373, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307657.9993725, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0003705, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0033755, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0043757, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0043757, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0053768, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0063734, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0063734, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0083735, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0093725, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0103726, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0113716, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0123732, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0143714, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0173724, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.022369, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.023375, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0253737, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0263731, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0283759, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0303724, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0323737, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0333729, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0383725, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_single_value.sql", "original_file_path": "macros\\sql\\get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.040373, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_single_value.sql", "original_file_path": "macros\\sql\\get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0423717, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0473697, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0483696, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0503712, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0523756, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0543728, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0553727, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.057374, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0583713, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0583713, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0593722, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.060372, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0613763, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.064372, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.06538, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0693758, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0723789, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0733738, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0753717, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.076374, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0773714, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0803711, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0833738, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.085375, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.088378, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_divide.sql", "original_file_path": "macros\\sql\\safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.090373, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_divide.sql", "original_file_path": "macros\\sql\\safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.090373, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_subtract.sql", "original_file_path": "macros\\sql\\safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0913727, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_subtract.sql", "original_file_path": "macros\\sql\\safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.0943704, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.097374, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.104379, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.1063766, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.1073742, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.1133738, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.125371, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.1283722, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.1333733, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.1373768, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.1393743, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.1393743, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.1403716, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.1423717, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.1433728, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.1443753, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.145373, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689307658.1463697, "supported_languages": null}}, "docs": {"doc.build_dv_for_cmc_use_automate_dv.V_XHD_CHITIET_V2": {"name": "V_XHD_CHITIET_V2", "resource_type": "doc", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "docs.md", "original_file_path": "models\\docs.md", "unique_id": "doc.build_dv_for_cmc_use_automate_dv.V_XHD_CHITIET_V2", "block_contents": "S\u1ed1 \u0111\u00e3 XH\u0110 (TongXuatHD)\r\n                      SELECT rtrim(b.ma_vv) as OpportunityCode\r\n                                          , sum((COALESCE(b.XuatHoaDon, 0) - COALESCE(b.HBTL, 0))) AS TongXuatHD\r\n                                          , max(b.ngay_ct) ngay_ct\r\n                                      FROM V_XHD_ChiTiet_V2 b \r\n                                      group by b.ma_vv\r\n                      Select distinct a.ngay_ct , a.so_ct, a.ma_vv, a.ma_kh,  a.XuatHoaDon,  a.HBTL , a.line_nbr\r\n                          From (\r\n                            SELECT   ngay_ct, so_ct, ma_vv, ma_kh, ps_co AS XuatHoaDon, ps_no  AS HBTL, line_nbr\r\n                            FROM            ct00\r\n                            where ((tk like '511%' and tk != '5119' and tk != '5118') or tk like '521%')\r\n                            and (tk_du like '131%' or tk_du like '3387%'or tk_du like '331%'or tk_du like '138%' or tk_du like '335%')\r\n                          ) a"}, "doc.build_dv_for_cmc_use_automate_dv.ContractDetails": {"name": "ContractDetails", "resource_type": "doc", "package_name": "build_dv_for_cmc_use_automate_dv", "path": "docs.md", "original_file_path": "models\\docs.md", "unique_id": "doc.build_dv_for_cmc_use_automate_dv.ContractDetails", "block_contents": "Chi ti\u1ebft H\u0110\r\nModule: Kinh doanh"}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_branches": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Branches"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_businessplans": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_BusinessPlans"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_contractlockstatus": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_ContractLockStatus"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_contracts": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Contracts"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_ct00": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_ct00"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_customers": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Customers"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_customertypes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_CustomerTypes"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_environmenttypes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_EnvironmentTypes"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_estimatecontracts": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_EstimateContracts"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_finalizationcontracts": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_FinalizationContracts"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_groups": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Groups"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_industrytypes": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_IndustryTypes"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_opportunities": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Opportunities"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_opportunitystatus": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_OpportunityStatus"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_orderdetails": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_OrderDetails"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_orders": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Orders"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_titles": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Titles"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_usercustomers": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_UserCustomers"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_users": ["source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Users"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_branches": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_branches"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_businessplans": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_businessplans"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_contractlockstatus": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_contractlockstatus"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_contracts": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_contracts"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_ct00": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_ct00"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_customers": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_customers"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_estimatecontracts": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_estimatecontracts"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_finalizationcontracts": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_finalizationcontracts"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_groups": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_groups"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_opportunities": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_opportunities"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_opportunities2": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_opportunities"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orderdetails": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_orderdetails"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orders": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_orders"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_usercustomers": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_usercustomers"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_users": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_users"], "model.build_dv_for_cmc_use_automate_dv.dv__h_businessplan": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_businessplans"], "model.build_dv_for_cmc_use_automate_dv.dv__h_contract": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_contracts"], "model.build_dv_for_cmc_use_automate_dv.dv__h_customer": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_customers"], "model.build_dv_for_cmc_use_automate_dv.dv__h_department": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_groups"], "model.build_dv_for_cmc_use_automate_dv.dv__h_estimatecontract": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_estimatecontracts"], "model.build_dv_for_cmc_use_automate_dv.dv__h_finalizationcontract": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_finalizationcontracts"], "model.build_dv_for_cmc_use_automate_dv.dv__h_invoice": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_ct00"], "model.build_dv_for_cmc_use_automate_dv.dv__h_opportunity": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_opportunities", "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_opportunities2"], "model.build_dv_for_cmc_use_automate_dv.dv__h_order": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orders"], "model.build_dv_for_cmc_use_automate_dv.dv__h_product": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_branches", "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orderdetails"], "model.build_dv_for_cmc_use_automate_dv.dv__h_user": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_users"], "model.build_dv_for_cmc_use_automate_dv.dv__l_contract_lockstatus": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_contractlockstatus"], "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_businessplan": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_businessplans"], "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_contract": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_contracts"], "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_customer_user_department": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_opportunities"], "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_estimatecontract": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_estimatecontracts"], "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_finalizationcontract": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_finalizationcontracts"], "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_invoice": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_ct00"], "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_order": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orders"], "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_sa": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_opportunities2"], "model.build_dv_for_cmc_use_automate_dv.dv__l_orderdetail": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orderdetails"], "model.build_dv_for_cmc_use_automate_dv.dv__l_user_customer": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_usercustomers"], "model.build_dv_for_cmc_use_automate_dv.dv__s_h_businessplan": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_businessplans"], "model.build_dv_for_cmc_use_automate_dv.dv__s_h_contract": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_contracts"], "model.build_dv_for_cmc_use_automate_dv.dv__s_h_customer": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_customers"], "model.build_dv_for_cmc_use_automate_dv.dv__s_h_department": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_groups"], "model.build_dv_for_cmc_use_automate_dv.dv__s_h_estimatecontract": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_estimatecontracts"], "model.build_dv_for_cmc_use_automate_dv.dv__s_h_finalizationcontract": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_finalizationcontracts"], "model.build_dv_for_cmc_use_automate_dv.dv__s_h_opportunity": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_opportunities"], "model.build_dv_for_cmc_use_automate_dv.dv__s_h_order": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orders"], "model.build_dv_for_cmc_use_automate_dv.dv__s_h_product": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_branches"], "model.build_dv_for_cmc_use_automate_dv.dv__s_h_user": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_users"], "model.build_dv_for_cmc_use_automate_dv.dv__s_l_contract_lockstatus": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_contractlockstatus"], "model.build_dv_for_cmc_use_automate_dv.dv__s_l_opportunity_invoice": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_ct00"], "model.build_dv_for_cmc_use_automate_dv.dv__s_l_orderdetail": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orderdetails"], "model.build_dv_for_cmc_use_automate_dv.dv__s_l_user_customer": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_usercustomers"], "model.build_dv_for_cmc_use_automate_dv.dv__s_l_user_customer_rt": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_usercustomers"], "model.build_dv_for_cmc_use_automate_dv.dv__r_customertypes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_customertypes"], "model.build_dv_for_cmc_use_automate_dv.dv__r_environmenttypes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_environmenttypes"], "model.build_dv_for_cmc_use_automate_dv.dv__r_industrytypes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_industrytypes"], "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_opportunitystatus"], "model.build_dv_for_cmc_use_automate_dv.dv__r_titles": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_titles"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_businessplan_cleaned_lastest": ["model.build_dv_for_cmc_use_automate_dv.dv__s_h_businessplan"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_contract_cleaned_lastest": ["model.build_dv_for_cmc_use_automate_dv.dv__s_h_contract"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_customer_lastest": ["model.build_dv_for_cmc_use_automate_dv.dv__s_h_customer"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_department_lastest": ["model.build_dv_for_cmc_use_automate_dv.dv__s_h_department"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_estimatecontract_cleaned_lastest": ["model.build_dv_for_cmc_use_automate_dv.dv__s_h_estimatecontract"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_finalizationcontract_cleaned_lastest": ["model.build_dv_for_cmc_use_automate_dv.dv__s_h_finalizationcontract"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_opportunity_lastest": ["model.build_dv_for_cmc_use_automate_dv.dv__s_h_opportunity"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_order_lastest": ["model.build_dv_for_cmc_use_automate_dv.dv__s_h_order"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_product_lastest": ["model.build_dv_for_cmc_use_automate_dv.dv__s_h_product"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_user_lastest": ["model.build_dv_for_cmc_use_automate_dv.dv__s_h_user"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_contract_lockstatus_cleaned_lastest": ["model.build_dv_for_cmc_use_automate_dv.dv__s_l_contract_lockstatus"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_opportunity_invoice_lastest": ["model.build_dv_for_cmc_use_automate_dv.dv__s_l_opportunity_invoice"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_orderdetail_lastest": ["model.build_dv_for_cmc_use_automate_dv.dv__s_l_orderdetail"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_user_customer_activesaler_lastest": ["model.build_dv_for_cmc_use_automate_dv.dv__s_l_user_customer"], "model.build_dv_for_cmc_use_automate_dv.mart__bridge": ["model.build_dv_for_cmc_use_automate_dv.mart__customer", "model.build_dv_for_cmc_use_automate_dv.mart__department", "model.build_dv_for_cmc_use_automate_dv.mart__employee", "model.build_dv_for_cmc_use_automate_dv.mart__opportunity", "model.build_dv_for_cmc_use_automate_dv.mart__plan", "model.build_dv_for_cmc_use_automate_dv.mart__profit", "model.build_dv_for_cmc_use_automate_dv.mart__sale", "model.build_dv_for_cmc_use_automate_dv.mart__solution"], "model.build_dv_for_cmc_use_automate_dv.mart__customer": ["model.build_dv_for_cmc_use_automate_dv.dv__h_customer", "model.build_dv_for_cmc_use_automate_dv.dv__r_customertypes", "model.build_dv_for_cmc_use_automate_dv.dv__r_environmenttypes", "model.build_dv_for_cmc_use_automate_dv.dv__r_industrytypes", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_customer_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_user_customer_activesaler_lastest"], "model.build_dv_for_cmc_use_automate_dv.mart__department": ["model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_department_lastest"], "model.build_dv_for_cmc_use_automate_dv.mart__employee": ["model.build_dv_for_cmc_use_automate_dv.dv__r_titles", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_user_lastest"], "model.build_dv_for_cmc_use_automate_dv.mart__opportunity": ["model.build_dv_for_cmc_use_automate_dv.dv__h_opportunity", "model.build_dv_for_cmc_use_automate_dv.dv__h_opportunity", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_sa", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_opportunity_lastest"], "model.build_dv_for_cmc_use_automate_dv.mart__pipeline": ["model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus", "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus"], "model.build_dv_for_cmc_use_automate_dv.mart__plan": ["model.build_dv_for_cmc_use_automate_dv.dv__h_opportunity", "model.build_dv_for_cmc_use_automate_dv.dv__h_order", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_customer_user_department", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_order", "model.build_dv_for_cmc_use_automate_dv.dv__l_orderdetail", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_order_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_orderdetail_lastest"], "model.build_dv_for_cmc_use_automate_dv.mart__profit": ["model.build_dv_for_cmc_use_automate_dv.dv__h_contract", "model.build_dv_for_cmc_use_automate_dv.dv__h_opportunity", "model.build_dv_for_cmc_use_automate_dv.dv__h_order", "model.build_dv_for_cmc_use_automate_dv.dv__l_contract_lockstatus", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_businessplan", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_contract", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_customer_user_department", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_estimatecontract", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_finalizationcontract", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_order", "model.build_dv_for_cmc_use_automate_dv.dv__l_orderdetail", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_businessplan_cleaned_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_contract_cleaned_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_estimatecontract_cleaned_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_finalizationcontract_cleaned_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_opportunity_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_order_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_contract_lockstatus_cleaned_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_orderdetail_lastest"], "model.build_dv_for_cmc_use_automate_dv.mart__sale": ["model.build_dv_for_cmc_use_automate_dv.dv__h_contract", "model.build_dv_for_cmc_use_automate_dv.dv__h_opportunity", "model.build_dv_for_cmc_use_automate_dv.dv__h_order", "model.build_dv_for_cmc_use_automate_dv.dv__l_contract_lockstatus", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_contract", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_customer_user_department", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_order", "model.build_dv_for_cmc_use_automate_dv.dv__l_orderdetail", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_contract_cleaned_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_opportunity_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_order_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_contract_lockstatus_cleaned_lastest", "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_orderdetail_lastest"], "model.build_dv_for_cmc_use_automate_dv.mart__solution": ["model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_product_lastest"], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Opportunities": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Groups": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_GroupHistories": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_ct00": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Orders": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_OrderDetails": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Contracts": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_ContractDetails": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_EstimateContracts": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_FinalizationContracts": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_BusinessPlans": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Estimates": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_FinalizationEstimates": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_ContractLockStatus": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_ContractLockTypes": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Customers": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_CustomerTypes": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_IndustryTypes": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_EnvironmentTypes": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_UserCustomers": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Users": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Titles": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_OpportunityStatus": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Branches": []}, "child_map": {"model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_branches": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_branches"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_businessplans": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_businessplans"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_contractlockstatus": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_contractlockstatus"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_contracts": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_contracts"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_ct00": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_ct00"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_customers": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_customers"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_customertypes": ["model.build_dv_for_cmc_use_automate_dv.dv__r_customertypes"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_environmenttypes": ["model.build_dv_for_cmc_use_automate_dv.dv__r_environmenttypes"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_estimatecontracts": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_estimatecontracts"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_finalizationcontracts": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_finalizationcontracts"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_groups": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_groups"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_industrytypes": ["model.build_dv_for_cmc_use_automate_dv.dv__r_industrytypes"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_opportunities": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_opportunities", "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_opportunities2"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_opportunitystatus": ["model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_orderdetails": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orderdetails"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_orders": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orders"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_titles": ["model.build_dv_for_cmc_use_automate_dv.dv__r_titles"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_usercustomers": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_usercustomers"], "model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_users": ["model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_users"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_branches": ["model.build_dv_for_cmc_use_automate_dv.dv__h_product", "model.build_dv_for_cmc_use_automate_dv.dv__s_h_product"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_businessplans": ["model.build_dv_for_cmc_use_automate_dv.dv__h_businessplan", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_businessplan", "model.build_dv_for_cmc_use_automate_dv.dv__s_h_businessplan"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_contractlockstatus": ["model.build_dv_for_cmc_use_automate_dv.dv__l_contract_lockstatus", "model.build_dv_for_cmc_use_automate_dv.dv__s_l_contract_lockstatus"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_contracts": ["model.build_dv_for_cmc_use_automate_dv.dv__h_contract", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_contract", "model.build_dv_for_cmc_use_automate_dv.dv__s_h_contract"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_ct00": ["model.build_dv_for_cmc_use_automate_dv.dv__h_invoice", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_invoice", "model.build_dv_for_cmc_use_automate_dv.dv__s_l_opportunity_invoice"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_customers": ["model.build_dv_for_cmc_use_automate_dv.dv__h_customer", "model.build_dv_for_cmc_use_automate_dv.dv__s_h_customer"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_estimatecontracts": ["model.build_dv_for_cmc_use_automate_dv.dv__h_estimatecontract", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_estimatecontract", "model.build_dv_for_cmc_use_automate_dv.dv__s_h_estimatecontract"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_finalizationcontracts": ["model.build_dv_for_cmc_use_automate_dv.dv__h_finalizationcontract", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_finalizationcontract", "model.build_dv_for_cmc_use_automate_dv.dv__s_h_finalizationcontract"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_groups": ["model.build_dv_for_cmc_use_automate_dv.dv__h_department", "model.build_dv_for_cmc_use_automate_dv.dv__s_h_department"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_opportunities": ["model.build_dv_for_cmc_use_automate_dv.dv__h_opportunity", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_customer_user_department", "model.build_dv_for_cmc_use_automate_dv.dv__s_h_opportunity"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_opportunities2": ["model.build_dv_for_cmc_use_automate_dv.dv__h_opportunity", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_sa"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orderdetails": ["model.build_dv_for_cmc_use_automate_dv.dv__h_product", "model.build_dv_for_cmc_use_automate_dv.dv__l_orderdetail", "model.build_dv_for_cmc_use_automate_dv.dv__s_l_orderdetail"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_orders": ["model.build_dv_for_cmc_use_automate_dv.dv__h_order", "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_order", "model.build_dv_for_cmc_use_automate_dv.dv__s_h_order"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_usercustomers": ["model.build_dv_for_cmc_use_automate_dv.dv__l_user_customer", "model.build_dv_for_cmc_use_automate_dv.dv__s_l_user_customer", "model.build_dv_for_cmc_use_automate_dv.dv__s_l_user_customer_rt"], "model.build_dv_for_cmc_use_automate_dv.hash__cmis_dbo_users": ["model.build_dv_for_cmc_use_automate_dv.dv__h_user", "model.build_dv_for_cmc_use_automate_dv.dv__s_h_user"], "model.build_dv_for_cmc_use_automate_dv.dv__h_businessplan": [], "model.build_dv_for_cmc_use_automate_dv.dv__h_contract": ["model.build_dv_for_cmc_use_automate_dv.mart__profit", "model.build_dv_for_cmc_use_automate_dv.mart__sale"], "model.build_dv_for_cmc_use_automate_dv.dv__h_customer": ["model.build_dv_for_cmc_use_automate_dv.mart__customer"], "model.build_dv_for_cmc_use_automate_dv.dv__h_department": [], "model.build_dv_for_cmc_use_automate_dv.dv__h_estimatecontract": [], "model.build_dv_for_cmc_use_automate_dv.dv__h_finalizationcontract": [], "model.build_dv_for_cmc_use_automate_dv.dv__h_invoice": [], "model.build_dv_for_cmc_use_automate_dv.dv__h_opportunity": ["model.build_dv_for_cmc_use_automate_dv.mart__opportunity", "model.build_dv_for_cmc_use_automate_dv.mart__opportunity", "model.build_dv_for_cmc_use_automate_dv.mart__plan", "model.build_dv_for_cmc_use_automate_dv.mart__profit", "model.build_dv_for_cmc_use_automate_dv.mart__sale"], "model.build_dv_for_cmc_use_automate_dv.dv__h_order": ["model.build_dv_for_cmc_use_automate_dv.mart__plan", "model.build_dv_for_cmc_use_automate_dv.mart__profit", "model.build_dv_for_cmc_use_automate_dv.mart__sale"], "model.build_dv_for_cmc_use_automate_dv.dv__h_product": [], "model.build_dv_for_cmc_use_automate_dv.dv__h_user": [], "model.build_dv_for_cmc_use_automate_dv.dv__l_contract_lockstatus": ["model.build_dv_for_cmc_use_automate_dv.mart__profit", "model.build_dv_for_cmc_use_automate_dv.mart__sale"], "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_businessplan": ["model.build_dv_for_cmc_use_automate_dv.mart__profit"], "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_contract": ["model.build_dv_for_cmc_use_automate_dv.mart__profit", "model.build_dv_for_cmc_use_automate_dv.mart__sale"], "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_customer_user_department": ["model.build_dv_for_cmc_use_automate_dv.mart__plan", "model.build_dv_for_cmc_use_automate_dv.mart__profit", "model.build_dv_for_cmc_use_automate_dv.mart__sale"], "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_estimatecontract": ["model.build_dv_for_cmc_use_automate_dv.mart__profit"], "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_finalizationcontract": ["model.build_dv_for_cmc_use_automate_dv.mart__profit"], "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_invoice": [], "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_order": ["model.build_dv_for_cmc_use_automate_dv.mart__plan", "model.build_dv_for_cmc_use_automate_dv.mart__profit", "model.build_dv_for_cmc_use_automate_dv.mart__sale"], "model.build_dv_for_cmc_use_automate_dv.dv__l_opportunity_sa": ["model.build_dv_for_cmc_use_automate_dv.mart__opportunity"], "model.build_dv_for_cmc_use_automate_dv.dv__l_orderdetail": ["model.build_dv_for_cmc_use_automate_dv.mart__plan", "model.build_dv_for_cmc_use_automate_dv.mart__profit", "model.build_dv_for_cmc_use_automate_dv.mart__sale"], "model.build_dv_for_cmc_use_automate_dv.dv__l_user_customer": [], "model.build_dv_for_cmc_use_automate_dv.dv__s_h_businessplan": ["model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_businessplan_cleaned_lastest"], "model.build_dv_for_cmc_use_automate_dv.dv__s_h_contract": ["model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_contract_cleaned_lastest"], "model.build_dv_for_cmc_use_automate_dv.dv__s_h_customer": ["model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_customer_lastest"], "model.build_dv_for_cmc_use_automate_dv.dv__s_h_department": ["model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_department_lastest"], "model.build_dv_for_cmc_use_automate_dv.dv__s_h_estimatecontract": ["model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_estimatecontract_cleaned_lastest"], "model.build_dv_for_cmc_use_automate_dv.dv__s_h_finalizationcontract": ["model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_finalizationcontract_cleaned_lastest"], "model.build_dv_for_cmc_use_automate_dv.dv__s_h_opportunity": ["model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_opportunity_lastest"], "model.build_dv_for_cmc_use_automate_dv.dv__s_h_order": ["model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_order_lastest"], "model.build_dv_for_cmc_use_automate_dv.dv__s_h_product": ["model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_product_lastest"], "model.build_dv_for_cmc_use_automate_dv.dv__s_h_user": ["model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_user_lastest"], "model.build_dv_for_cmc_use_automate_dv.dv__s_l_contract_lockstatus": ["model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_contract_lockstatus_cleaned_lastest"], "model.build_dv_for_cmc_use_automate_dv.dv__s_l_opportunity_invoice": ["model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_opportunity_invoice_lastest"], "model.build_dv_for_cmc_use_automate_dv.dv__s_l_orderdetail": ["model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_orderdetail_lastest"], "model.build_dv_for_cmc_use_automate_dv.dv__s_l_user_customer": ["model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_user_customer_activesaler_lastest"], "model.build_dv_for_cmc_use_automate_dv.dv__s_l_user_customer_rt": [], "model.build_dv_for_cmc_use_automate_dv.dv__r_customertypes": ["model.build_dv_for_cmc_use_automate_dv.mart__customer"], "model.build_dv_for_cmc_use_automate_dv.dv__r_environmenttypes": ["model.build_dv_for_cmc_use_automate_dv.mart__customer"], "model.build_dv_for_cmc_use_automate_dv.dv__r_industrytypes": ["model.build_dv_for_cmc_use_automate_dv.mart__customer"], "model.build_dv_for_cmc_use_automate_dv.dv__r_opportunitystatus": ["model.build_dv_for_cmc_use_automate_dv.mart__pipeline", "model.build_dv_for_cmc_use_automate_dv.mart__pipeline", "model.build_dv_for_cmc_use_automate_dv.mart__pipeline", "model.build_dv_for_cmc_use_automate_dv.mart__pipeline", "model.build_dv_for_cmc_use_automate_dv.mart__pipeline", "model.build_dv_for_cmc_use_automate_dv.mart__pipeline", "model.build_dv_for_cmc_use_automate_dv.mart__pipeline", "model.build_dv_for_cmc_use_automate_dv.mart__pipeline", "model.build_dv_for_cmc_use_automate_dv.mart__pipeline", "model.build_dv_for_cmc_use_automate_dv.mart__pipeline", "model.build_dv_for_cmc_use_automate_dv.mart__pipeline", "model.build_dv_for_cmc_use_automate_dv.mart__pipeline", "model.build_dv_for_cmc_use_automate_dv.mart__pipeline", "model.build_dv_for_cmc_use_automate_dv.mart__pipeline", "model.build_dv_for_cmc_use_automate_dv.mart__pipeline", "model.build_dv_for_cmc_use_automate_dv.mart__pipeline", "model.build_dv_for_cmc_use_automate_dv.mart__pipeline", "model.build_dv_for_cmc_use_automate_dv.mart__pipeline"], "model.build_dv_for_cmc_use_automate_dv.dv__r_titles": ["model.build_dv_for_cmc_use_automate_dv.mart__employee"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_businessplan_cleaned_lastest": ["model.build_dv_for_cmc_use_automate_dv.mart__profit"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_contract_cleaned_lastest": ["model.build_dv_for_cmc_use_automate_dv.mart__profit", "model.build_dv_for_cmc_use_automate_dv.mart__sale"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_customer_lastest": ["model.build_dv_for_cmc_use_automate_dv.mart__customer"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_department_lastest": ["model.build_dv_for_cmc_use_automate_dv.mart__department"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_estimatecontract_cleaned_lastest": ["model.build_dv_for_cmc_use_automate_dv.mart__profit"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_finalizationcontract_cleaned_lastest": ["model.build_dv_for_cmc_use_automate_dv.mart__profit"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_opportunity_lastest": ["model.build_dv_for_cmc_use_automate_dv.mart__opportunity", "model.build_dv_for_cmc_use_automate_dv.mart__profit", "model.build_dv_for_cmc_use_automate_dv.mart__sale"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_order_lastest": ["model.build_dv_for_cmc_use_automate_dv.mart__plan", "model.build_dv_for_cmc_use_automate_dv.mart__profit", "model.build_dv_for_cmc_use_automate_dv.mart__sale"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_product_lastest": ["model.build_dv_for_cmc_use_automate_dv.mart__solution"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_h_user_lastest": ["model.build_dv_for_cmc_use_automate_dv.mart__employee"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_contract_lockstatus_cleaned_lastest": ["model.build_dv_for_cmc_use_automate_dv.mart__profit", "model.build_dv_for_cmc_use_automate_dv.mart__sale"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_opportunity_invoice_lastest": [], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_orderdetail_lastest": ["model.build_dv_for_cmc_use_automate_dv.mart__plan", "model.build_dv_for_cmc_use_automate_dv.mart__profit", "model.build_dv_for_cmc_use_automate_dv.mart__sale"], "model.build_dv_for_cmc_use_automate_dv.dv__s_bv_l_user_customer_activesaler_lastest": ["model.build_dv_for_cmc_use_automate_dv.mart__customer"], "model.build_dv_for_cmc_use_automate_dv.mart__bridge": [], "model.build_dv_for_cmc_use_automate_dv.mart__customer": ["model.build_dv_for_cmc_use_automate_dv.mart__bridge"], "model.build_dv_for_cmc_use_automate_dv.mart__department": ["model.build_dv_for_cmc_use_automate_dv.mart__bridge"], "model.build_dv_for_cmc_use_automate_dv.mart__employee": ["model.build_dv_for_cmc_use_automate_dv.mart__bridge"], "model.build_dv_for_cmc_use_automate_dv.mart__opportunity": ["model.build_dv_for_cmc_use_automate_dv.mart__bridge"], "model.build_dv_for_cmc_use_automate_dv.mart__pipeline": [], "model.build_dv_for_cmc_use_automate_dv.mart__plan": ["model.build_dv_for_cmc_use_automate_dv.mart__bridge"], "model.build_dv_for_cmc_use_automate_dv.mart__profit": ["model.build_dv_for_cmc_use_automate_dv.mart__bridge"], "model.build_dv_for_cmc_use_automate_dv.mart__sale": ["model.build_dv_for_cmc_use_automate_dv.mart__bridge"], "model.build_dv_for_cmc_use_automate_dv.mart__solution": ["model.build_dv_for_cmc_use_automate_dv.mart__bridge"], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Opportunities": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_opportunities"], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Groups": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_groups"], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_GroupHistories": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_ct00": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_ct00"], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Orders": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_orders"], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_OrderDetails": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_orderdetails"], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Contracts": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_contracts"], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_ContractDetails": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_EstimateContracts": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_estimatecontracts"], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_FinalizationContracts": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_finalizationcontracts"], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_BusinessPlans": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_businessplans"], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Estimates": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_FinalizationEstimates": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_ContractLockStatus": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_contractlockstatus"], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_ContractLockTypes": [], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Customers": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_customers"], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_CustomerTypes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_customertypes"], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_IndustryTypes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_industrytypes"], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_EnvironmentTypes": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_environmenttypes"], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_UserCustomers": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_usercustomers"], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Users": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_users"], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Titles": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_titles"], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_OpportunityStatus": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_opportunitystatus"], "source.build_dv_for_cmc_use_automate_dv.DWH.Staging__CMIS_dbo_Branches": ["model.build_dv_for_cmc_use_automate_dv.stg__cmis_dbo_branches"]}}